[
  {
    "id": 116,
    "title": "node 爬虫手记",
    "labels": "开发者笔记",
    "created_at": "2019-12-30T17:04:44Z",
    "updated_at": "2020-01-01T17:00:09Z",
    "body_html": "<h2>内容</h2>\n<ul>\n<li>抓取文章内容 API</li>\n<li>爬取限制</li>\n</ul>\n<h3>周边</h3>\n<ul>\n<li><a href=\"https://github.com/cheeriojs/cheerio\">https://github.com/cheeriojs/cheerio</a></li>\n</ul>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://github.com/ZY2071/Crawler-for-Github-Trending\">https://github.com/ZY2071/Crawler-for-Github-Trending</a></li>\n<li><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/254\" data-hovercard-type=\"issue\" data-hovercard-url=\"/Advanced-Frontend/Daily-Interview-Question/issues/254/hovercard\">接口如何防刷 </a></li>\n<li><a href=\"https://juejin.im/post/5bead1b25188251e1a1f4d34\" rel=\"nofollow\">https://juejin.im/post/5bead1b25188251e1a1f4d34</a></li>\n<li><a href=\"https://dev.to/int0h/creating-a-cli-for-your-node-js-app-using-typescript-124p\" rel=\"nofollow\">https://dev.to/int0h/creating-a-cli-for-your-node-js-app-using-typescript-124p</a></li>\n<li><a href=\"https://www.kancloud.cn/kancloud/command-line-with-node#/catalog\" rel=\"nofollow\">Node.js 命令行程序开发教程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28705824\" rel=\"nofollow\">30分钟使用 Node 实现一个命令行程序</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/32936993\" rel=\"nofollow\">设计和实现一款轻量级的爬虫框架</a></li>\n</ul>"
  },
  {
    "id": 115,
    "title": "GitHub API 纪录",
    "labels": "开发者笔记",
    "created_at": "2019-12-30T11:23:49Z",
    "updated_at": "2020-01-01T09:39:28Z",
    "body_html": "<h2>前言</h2>\n<p>纪录GitHub API 的使用方式，便于改造 blog。</p>\n<h2>获取 GitHub Token</h2>\n<p>点击 <a href=\"https://github.com/settings/tokens/new\">这里</a>，勾选以下两项：</p>\n<pre><code>read: user        Read all user profile data\nuser: email       Access user email addresses (read-only)\n</code></pre>\n<p><g-emoji class=\"g-emoji\" alias=\"warning\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26a0.png\">⚠️</g-emoji>警告️：别的不要勾选，以免造成账号安全问题。</p>\n<p>如果你的项目是属于一个组织的，还需要勾选一个权限：</p>\n<pre><code>read: org         Read org and team membership\n</code></pre>\n<h4>GitHub Token 进行 Base64 加密</h4>\n<p>打开 Chrome 的 Console，运行：</p>\n<pre><code>window.btoa('{你的 GitHub Token}')\n</code></pre>\n<p>如果你把 Token 直接明文推到 GitHub 仓库中，此 Token 就会立马失效，所以需要加密混淆。</p>\n<p><strong>在 node.js 环境中，借助 Buffer</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">Buffer</span>.<span class=\"pl-en\">from</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello World!<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-c1\">toString</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>base64<span class=\"pl-pds\">\"</span></span>));\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">Buffer</span>.<span class=\"pl-en\">from</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello World!<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>base64<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-c1\">toString</span>());</pre></div>\n<h4>axios 请求 utils</h4>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">axios</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>axios<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">axiosInstance</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">axios</span>.<span class=\"pl-en\">create</span>({\n  baseURL<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.github.com<span class=\"pl-pds\">'</span></span>,\n  headers<span class=\"pl-k\">:</span> {\n    Accept<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>application/vnd.github.v3.html<span class=\"pl-pds\">'</span></span>,\n    Authorization<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>token <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-c1\">window</span>.<span class=\"pl-c1\">atob</span>(accessToken)<span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>,\n  },\n});</pre></div>\n<h2>API</h2>\n<ul>\n<li>用户信息 <code>https://api.github.com/users/yanyue404</code></li>\n<li>Issues 文件 <code>https://api.github.com/repos/yanyue404/blog/issues/114</code></li>\n<li>stars 列表 <code>https://api.github.com/users/yanyue404/starred</code></li>\n</ul>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://developer.github.com/v3\">https://developer.github.com/v3</a></li>\n<li><a href=\"https://github.com/ttop5/issue-blog\">https://github.com/ttop5/issue-blog</a></li>\n<li><a href=\"https://stackoverflow.com/questions/23097928/node-js-throws-btoa-is-not-defined-error\" rel=\"nofollow\">https://stackoverflow.com/questions/23097928/node-js-throws-btoa-is-not-defined-error</a></li>\n</ul>"
  },
  {
    "id": 114,
    "title": "超文本传输协议-HTTP",
    "labels": "开发者笔记",
    "created_at": "2019-12-30T04:55:10Z",
    "updated_at": "2019-12-30T04:55:10Z",
    "body_html": "<h1>HTTP</h1>\n<p>超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的<strong>应用层协议</strong>。HTTP 是万维网的数据通信的基础。</p>\n<p>HTTP 是一个客户端（用户）和服务端（网站）之间请求和应答的标准，通常使用 TCP 协议。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个 HTTP 请求到服务器上指定端口（默认端口为 80）。我们称这个客户端为用户代理程序。应答的服务器上存储着一些资源，比如 HTML 文件和图像。我们称这个应答服务器为源服务器。（在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道）</p>\n<p><strong>协议</strong>：规定了客户端与服务器双方必须遵守约定好的数据传输格式</p>\n<p><strong>一个完成的 HTTP 请求</strong></p>\n<ul>\n<li>域名解析（此处涉及 DNS 的寻址过程）</li>\n<li>发起 TCP 的 3 次握手</li>\n<li>建立 TCP 连接后发起 http 请求</li>\n<li>服务器响应 http 请求，浏览器得到 html 代码</li>\n<li>浏览器解析 html 代码，并请求 html 代码中的资源（如 js、css、图片等，此处可能涉及 HTTP 缓存）</li>\n<li>浏览器对页面进行渲染呈现给用户（此处涉及浏览器的渲染原理）</li>\n</ul>\n<p><strong>TCP 三次握手</strong></p>\n<p>传输控制协议（英语：Transmission Control Protocol，缩写：TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p>\n<p>TCP 用三次握手过程创建一个连接。在连接创建过程中，很多参数要被初始化，例如序号被初始化以保证按序传输和连接的强壮性。</p>\n<p>TCP 连接的正常创建<br>\n一对终端同时初始化一个它们之间的连接是可能的。但通常是由一端打开一个套接字（socket）然后监听来自另一方的连接，这就是通常所指的被动打开（passive open）。服务器端被被动打开以后，用户端就能开始创建主动打开（active open）。</p>\n<ul>\n<li>客户端通过向服务器端发送一个 SYN 来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。</li>\n<li>服务器端应当为一个合法的 SYN 回送一个 SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机产生的序号 B。</li>\n<li>最后，客户端再发送一个 ACK。此时包的序号被设定为 A+1，而 ACK 的确认码则为 B+1。当服务端收到这个 ACK 的时候，就完成了三次握手，并进入了连接创建状态。</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/64ee091369d5e6f4feb63f9d965ec1e1703ca2fd/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f332f33662f436f6e6e656374696f6e5f5443502e706e672f32323070782d436f6e6e656374696f6e5f5443502e706e67\"><img src=\"https://camo.githubusercontent.com/64ee091369d5e6f4feb63f9d965ec1e1703ca2fd/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f332f33662f436f6e6e656374696f6e5f5443502e706e672f32323070782d436f6e6e656374696f6e5f5443502e706e67\" alt=\"\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Connection_TCP.png/220px-Connection_TCP.png\" style=\"max-width:100%;\"></a></p>\n<h2>协议内容</h2>\n<h3>请求（Request）</h3>\n<p>客户端发送一个 HTTP 请求到服务端的格式：</p>\n<ul>\n<li>请求行</li>\n<li>请求头</li>\n<li>请求体</li>\n</ul>\n<p>请求行大概长这样 <code>GET /images/logo.gif HTTP/1.1</code>，基本由请求方法、URL、协议版本组成。</p>\n<p><strong>请求方法</strong></p>\n<ul>\n<li><strong>GET</strong>：向指定的资源发出“显示”请求。该方法应该只用在读取数据，而不应当被用于产生\"副作用”的操作中，例如在网络应用程序中。其中一个原因是 GET 可能会被网络爬虫等随意访问。GET 上要在 url 之外带一些参数就只能依靠 url 上附带 querystring。</li>\n<li><strong>HEAD</strong>：与 GET 方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</li>\n<li><strong>PUT</strong>：向指定资源位置上传其最新内容。PUT 方法是幂等的方法，一般用于整体资源的更新。</li>\n<li><strong>PATCH</strong>：与 PUT 请求类似，同样用于资源的更新。PATCH 一般用于资源的部分更新。当资源不存在时，PATCH 会创建一个新的资源，而 PUT 只会对已经存在的资源更新。</li>\n<li><strong>POST</strong>：向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。每次提交，表单的数据被浏览器用编码到 HTTP 请求的 body 里。浏览器发出的 POST 请求的 body 主要有有两种格式，一种是 <code>application/x-www-form-urlencoded</code> 用来传输简单的数据，大概就是<code>key1=value1&amp;key2=value2</code>这样的格式。另外一种是传文件，会采用 <code>multipart/form-data</code> 格式。采用后者是因为前者对于文件这种二进制的数据非常低效。</li>\n<li><strong>DELETE</strong>：请求服务器删除 Request-URI 所标识的资源</li>\n</ul>\n<p>Post 和 Get 的区别？</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5872309261ff4b005c4580d4#heading-4\" rel=\"nofollow\">面试 -- 网络 HTTP</a></li>\n</ul>\n<p><strong>常见状态码</strong></p>\n<p>状态代码的第一个数字代表当前响应的类型：</p>\n<ul>\n<li>1xx 消息——请求已被服务器接收，继续处理</li>\n<li>2xx 成功——请求已成功被服务器接收、理解、并接受\n<ul>\n<li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li>\n</ul>\n</li>\n<li>3xx 重定向——需要后续操作才能完成这一请求\n<ul>\n<li>302 found，临时性重定向，表示资源临时被分配了新的 URL</li>\n<li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</li>\n</ul>\n</li>\n<li>4xx 请求错误——请求含有词法错误或者无法被执行就、8\n<ul>\n<li>400 bad request，请求报文存在语法错误</li>\n<li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</li>\n<li>403 forbidden，表示对请求资源的访问被服务器拒绝</li>\n<li>404 not found，表示在服务器上没有找到请求的资源</li>\n</ul>\n</li>\n<li>5xx 服务器错误——服务器在处理某个正确请求时发生错误\n<ul>\n<li>500 internal sever error，表示服务器端在执行请求时发生了错误</li>\n<li>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</li>\n<li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li>\n</ul>\n</li>\n</ul>\n<p><strong>通用首部</strong></p>\n<ul>\n<li>Cache-Control 控制缓存的行为</li>\n</ul>\n<p><strong>常见请求头</strong></p>\n<ul>\n<li>Accept-Encoding: gzip, deflate, br 浏览器申明自己接收的编码方法，通常指定压缩方法</li>\n<li>Connection：<code>keep-alive</code>  当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。<code>close</code>  代表一个 Request 完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接会关闭， 当客户端再次发送 Request，需要重新建立 TCP 连接。</li>\n<li>Cookie：是用来存储一些用户信息以便让服务器辨别用户身份的，当用户登录后就会在客户端产生一个 cookie 来存储相关信息，这样浏览器通过读取 cookie 的信息去服务器上验证并通过后会判定你是合法用户，从而允许查看相应网页</li>\n<li>User-Agent：客户端使用的操作系统和浏览器的名称和版本。</li>\n<li>Host：服务器的域名</li>\n<li>If-Modified-Since：本地资源未修改返回 304（比较时间）</li>\n<li>If-None-Match：本地资源未修改返回 304（比较标记</li>\n</ul>\n<p><strong>常见响应头</strong></p>\n<ul>\n<li>ETag: 当前资源的标识</li>\n<li>Last-Modified：该资源最后被修改的时间</li>\n<li>Set-Cookie：设置 Cookie</li>\n<li>Date：服务端发送资源时的服务器时间</li>\n<li>Access-Control-Allow-Origin：指定哪些网站可以跨域资源共享</li>\n</ul>\n<h2>HTTP2</h2>\n<p>HTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能。</p>\n<ul>\n<li>新的二进制格式（Binary Format），HTTP1.x 的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1 的组合。基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮。</li>\n<li>多路复用（MultiPlexing），即连接共享，即每一个 request 都是是用作连接共享机制的。一个 request 对应一个 id，这样一个连接上可以有多个 request，每个连接的 request 可以随机的混杂在一起，接收方可以根据 request 的 id 将 request 再归属到各自不同的服务端请求里面。</li>\n<li>header 压缩，如上文中所言，对前面提到过 HTTP1.x 的 header 带有大量信息，而且每次都要重复发送，HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 header fields 表，既避免了重复 header 的传输，又减小了需要传输的大小。</li>\n<li>服务端推送（server push），同 SPDY 一样，HTTP2.0 也具有 server push 功能。</li>\n</ul>\n<h2>HTTPS</h2>\n<p>HTTPS 的主要作用是在不安全的网络上创建一个安全信道，并可在使用适当的加密包和服务器证书可被验证且可被信任时，对窃听和中间人攻击提供合理的防护。</p>\n<p>HTTP 不是安全的，所有传输的内容都是明文,而且攻击者可以通过监听和中间人攻击等手段，获取网站帐户和敏感信息等。HTTPS 的设计可以防止前述攻击，在正确配置时是安全的。</p>\n<p>HTTPS 是有两部分组成：HTTP + SSL/TLS，也就是在 HTTP 上又加了一层处理加密信息的协议。服务端和客户端的信息传输都会通过 TLS（传输层安全性协议） 进行加密，所以传输的数据都是加密后的数据。默认端口为 443。</p>\n<p>HTTPS 和 HTTP 协议相比提供了：</p>\n<ul>\n<li>数据完整性：内容传输经过完整性校验</li>\n<li>数据隐私性：内容经过对称加密，每个连接生成一个唯一的加密密钥</li>\n<li>身份认证：第三方无法伪造服务端（客户端）身份</li>\n</ul>\n<h2>浏览器缓存</h2>\n<h3>web 缓存</h3>\n<p>在 Web 应用领域，Web 缓存大致可以分为以下几种类型：</p>\n<ul>\n<li>数据库数据缓存</li>\n<li>服务器端缓存</li>\n<li>代理服务器缓存</li>\n<li>CDN 缓存</li>\n<li>浏览器端缓存</li>\n<li>Web 应用层缓存</li>\n</ul>\n<h3>浏览器缓存</h3>\n<p>当一个客户端请求 web 服务器, 请求的内容可以从以下几个地方获取：服务器、浏览器缓存中或缓存服务器中。这取决于服务器端输出的页面信息。</p>\n<p><strong>可以缓存的文件类型</strong></p>\n<p><strong>页面文件有三种缓存状态</strong></p>\n<ul>\n<li>最新的：选择不缓 M 存页面，每次请求时都从服务器获取最新的内容</li>\n<li>未过期的：在给定的时间内缓存文件，如果访问页面时资源过期则去服务器请求，否则将读取本地的缓存，这 o9 样可以提高浏览速度</li>\n<li>过期的：也就是陈旧的页面，当请求这个页面时，必须进行重新获取</li>\n</ul>\n<p><strong>浏览器缓存机制</strong></p>\n<p>很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</p>\n<ol>\n<li>Memory Cache</li>\n<li>Service Worker Cache</li>\n<li>HTTP Cache</li>\n<li>Push Cache</li>\n</ol>\n<p>大家对 HTTP Cache（即 Cache-Control、expires 等字段控制的缓存）应该比较熟悉，如果对其它几种缓存可能还没什么概念，我们可以先来看一张线上网站的 Network 面板截图：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/3d19947b07378f68358646884c4b7293d56a45ed/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f392f32302f313635663731343830306535626534393f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31\"><img src=\"https://camo.githubusercontent.com/3d19947b07378f68358646884c4b7293d56a45ed/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f392f32302f313635663731343830306535626534393f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31\" alt=\"\" data-canonical-src=\"https://user-gold-cdn.xitu.io/2018/9/20/165f714800e5be49?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"max-width:100%;\"></a></p>\n<p>大家注意一下非数字——即形如“（from xxx）”这样的描述——对应的资源，这些资源就是我们通过缓存获取到的。其中，“from memory cache”对标到 Memory Cache 类型，“from ServiceWorker”对标到 Service Worker Cache 类型。至于 Push Cache，这个比较特殊，是 HTTP2 的新特性。HTTP 缓存是最主要、最具有代表性的缓存策略。</p>\n<p><strong>无法被浏览器缓存的请求</strong></p>\n<ul>\n<li>HTTP 信息头中包含 Cache-Control:no-cache，pragma:no-cache（HTTP1.0），或 Cache-Control:max-age=0 等告诉浏览器不用缓存的请求</li>\n<li>需要根据 Cookie，认证信息等决定输入内容的动态请求是不能被缓存的</li>\n<li>经过 HTTPS 安全加密的请求（有人也经过测试发现，ie 其实在头部加入 Cache-Control：max-age 信息，firefox 在头部加入 Cache-Control:Public 之后，能够对 HTTPS 的资源进行缓存，参考《HTTPS 的七个误解》）</li>\n<li>POST 请求无法被缓存</li>\n<li>HTTP 响应头中不包含 Last-Modified/Etag，也不包含 Cache-Control/Expires 的请求无法被缓存</li>\n</ul>\n<p><strong>HTTP 缓存机制</strong></p>\n<p>HTTP 缓存是我们日常开发中最为熟悉的一种缓存机制。它又分为强缓存和协商缓存。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。</p>\n<p><strong>强缓存</strong></p>\n<p>强缓存是利用 http 头中的 Expires 和 Cache-Control 两个字段来控制的。强缓存中，当请求再次发出时，浏览器会根据其中的 expires 和 cache-control 判断目标资源是否“命中”强缓存，若命中则直接从缓存中获取资源，不会再与服务端发生通信。</p>\n<p>其中 Expires 是一个时间戳，当服务器返回响应时，在 Response Headers 中将过期时间写入 expires 字段。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/02396882b564e882a8428bf1c4d9719434bedd73/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f392f32302f313635663532626636653834346238353f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31\"><img src=\"https://camo.githubusercontent.com/02396882b564e882a8428bf1c4d9719434bedd73/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f392f32302f313635663532626636653834346238353f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31\" alt=\"\" data-canonical-src=\"https://user-gold-cdn.xitu.io/2018/9/20/165f52bf6e844b85?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"max-width:100%;\"></a></p>\n<div class=\"highlight highlight-source-js\"><pre>expires<span class=\"pl-k\">:</span> Wed, <span class=\"pl-c1\">11</span> Sep <span class=\"pl-c1\">2019</span> <span class=\"pl-c1\">16</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">12</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">18</span> <span class=\"pl-c1\">GMT</span></pre></div>\n<p>接下来如果我们试图再次向服务器请求资源，浏览器就会先对比本地时间和 expires 的时间戳，如果本地时间小于 expires 设定的过期时间，那么就直接去缓存中取这个资源。</p>\n<p>由于客户端时间与服务器端可能存在的时间差异，HTTP1.1 新增了 Cache-Control 字段来完成 expires 的任务。使用相对时间的方式进行标记。</p>\n<div class=\"highlight highlight-source-js\"><pre>cache<span class=\"pl-k\">-</span>control<span class=\"pl-k\">:</span> max<span class=\"pl-k\">-</span>age<span class=\"pl-k\">=</span><span class=\"pl-c1\">31536000</span></pre></div>\n<p>在 Cache-Control 中，我们通过 max-age 来控制资源的有效期，max-age 是 31536000 秒，它意味着该资源在 31536000 秒以内都是有效的。</p>\n<p><strong>协商缓存</strong></p>\n<p>协商缓存是浏览器与服务器合作之下的缓存策略，是否命中缓存依赖于浏览器与服务器的通信结果。</p>\n<p>协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。</p>\n<p>如果服务端提示缓存资源未改动（Not Modified），资源会被重定向到浏览器缓存，这种情况下网络请求对应的状态码是 304（如下图）。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/0ac1e7b5a6b66e4b4c40e303fcb3fc7cf10b124e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f392f32302f313635663661366436666664346363323f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31\"><img src=\"https://camo.githubusercontent.com/0ac1e7b5a6b66e4b4c40e303fcb3fc7cf10b124e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f392f32302f313635663661366436666664346363323f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31\" alt=\"\" data-canonical-src=\"https://user-gold-cdn.xitu.io/2018/9/20/165f6a6d6ffd4cc2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"max-width:100%;\"></a></p>\n<p>协商缓存的实现：从 Last-Modified 到 Etag</p>\n<p>Last-Modified 是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着 Response Headers 返回：</p>\n<div class=\"highlight highlight-source-js\"><pre>Last<span class=\"pl-k\">-</span>Modified<span class=\"pl-k\">:</span> Fri, <span class=\"pl-c1\">27</span> Oct <span class=\"pl-c1\">2017</span> <span class=\"pl-c1\">06</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">35</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">57</span> <span class=\"pl-c1\">GMT</span></pre></div>\n<p>随后我们每次请求时，会带上一个叫 If-Modified-Since 的时间戳字段，它的值正是上一次 response 返回给它的 last-modified 值：</p>\n<div class=\"highlight highlight-source-js\"><pre>If<span class=\"pl-k\">-</span>Modified<span class=\"pl-k\">-</span>Since<span class=\"pl-k\">:</span> Fri, <span class=\"pl-c1\">27</span> Oct <span class=\"pl-c1\">2017</span> <span class=\"pl-c1\">06</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">35</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">57</span> <span class=\"pl-c1\">GMT</span></pre></div>\n<p>服务器接收到这个时间戳后，会比对该时间戳和资源在服务器上的最后修改时间是否一致，从而判断资源是否发生了变化。如果发生了变化，就会返回一个完整的响应内容，并在 Response Headers 中添加新的 Last-Modified 值；否则，返回如上图的 304 响应，Response Headers 不会再添加 Last-Modified 字段。</p>\n<p>使用 Last-Modified 存在一些弊端，这其中最常见的就是这样两个场景：</p>\n<ul>\n<li>\n<p>我们编辑了文件，但文件的内容没有改变。服务端并不清楚我们是否真正改变了文件，它仍然通过最后编辑时间进行判断。因此这个资源在再次被请求时，会被当做新资源，进而引发一次完整的响应——不该重新请求的时候，也会重新请求。</p>\n</li>\n<li>\n<p>当我们修改文件的速度过快时（比如花了 100ms 完成了改动），由于 If-Modified-Since 只能检查到以秒为最小计量单位的时间差，所以它是感知不到这个改动的——该重新请求的时候，反而没有重新请求了。</p>\n</li>\n</ul>\n<p>这两个场景其实指向了同一个 bug——服务器并没有正确感知文件的变化。为了解决这样的问题，Etag 作为 Last-Modified 的补充出现了。</p>\n<p>Etag 是由服务器为每个资源生成的唯一的标识字符串，这个标识字符串是基于文件内容编码的，只要文件内容不同，它们对应的 Etag 就是不同的，反之亦然。因此 Etag 能够精准地感知文件的变化。</p>\n<p>Etag 和 Last-Modified 类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，举个，它可以是这样的：</p>\n<div class=\"highlight highlight-source-js\"><pre>ETag<span class=\"pl-k\">:</span> <span class=\"pl-c1\">W</span> <span class=\"pl-k\">/</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>2a3b-1602480f459<span class=\"pl-pds\">'</span></span>;</pre></div>\n<p>那么下一次请求时，请求头里就会带上一个值相同的、名为 if-None-Match 的字符串供服务端比对了：</p>\n<div class=\"highlight highlight-source-js\"><pre>If<span class=\"pl-k\">-</span>None<span class=\"pl-k\">-</span>Match<span class=\"pl-k\">:</span> <span class=\"pl-c1\">W</span><span class=\"pl-k\">/</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2a3b-1602480f459<span class=\"pl-pds\">\"</span></span></pre></div>\n<p>Etag 的生成过程需要服务器额外付出开销，会影响服务端的性能，这是它的弊端。因此启用 Etag 需要我们审时度势。正如我们刚刚所提到的——Etag 并不能替代 Last-Modified，它只能作为 Last-Modified 的补充和强化存在。 Etag 在感知文件变化上比 Last-Modified 更加准确，优先级也更高。当 Etag 和 Last-Modified 同时存在时，以 Etag 为准。</p>\n<p><strong>HTTP 缓存流程图</strong></p>\n<p>首次请求：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/96a23d798afd5b60b4b9429cf32465590543e45b/68747470733a2f2f6769746875622d696d676c69622d313235353435393934332e636f732e61702d6368656e6764752e6d7971636c6f75642e636f6d2f3031353334335f707378325f3536383831382e706e67\"><img src=\"https://camo.githubusercontent.com/96a23d798afd5b60b4b9429cf32465590543e45b/68747470733a2f2f6769746875622d696d676c69622d313235353435393934332e636f732e61702d6368656e6764752e6d7971636c6f75642e636f6d2f3031353334335f707378325f3536383831382e706e67\" alt=\"\" data-canonical-src=\"https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/015343_psx2_568818.png\" style=\"max-width:100%;\"></a></p>\n<p>再次请求：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/515f5abc7459e9223d6ef79773c8b25c46c4185c/68747470733a2f2f6769746875622d696d676c69622d313235353435393934332e636f732e61702d6368656e6764752e6d7971636c6f75642e636f6d2f3031353335335f503034775f3536383831382e706e67\"><img src=\"https://camo.githubusercontent.com/515f5abc7459e9223d6ef79773c8b25c46c4185c/68747470733a2f2f6769746875622d696d676c69622d313235353435393934332e636f732e61702d6368656e6764752e6d7971636c6f75642e636f6d2f3031353335335f503034775f3536383831382e706e67\" alt=\"\" data-canonical-src=\"https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/015353_P04w_568818.png\" style=\"max-width:100%;\"></a></p>\n<h3>浏览器的同源策略</h3>\n<ul>\n<li><a href=\"https://github.com/yanyue404/blog/issues/8\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/8/hovercard\">跨域请求数据 </a></li>\n</ul>\n<h4>参考资料</h4>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE\" rel=\"nofollow\">wiki - 超文本传输协议</a></li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\" rel=\"nofollow\">wiki - TCP 传输控制协议</a></li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE\" rel=\"nofollow\">wiki - 超文本传输安全协议</a></li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/HTTP%E7%8A%B6%E6%80%81%E7%A0%81\" rel=\"nofollow\">wiki - HTTP 状态码</a></li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A\" rel=\"nofollow\">wiki - TLS 传输层安全性协议</a></li>\n<li><a href=\"https://www.zhihu.com/question/20391668\" rel=\"nofollow\">前端工程师应该对 HTTP 了解到什么程度？从哪些途径去熟悉更好？</a></li>\n<li><a href=\"https://github.com/skyline75489/what-happens-when-zh_CN\">what-happens-when-zh_CN</a></li>\n<li><a href=\"https://godbasin.github.io/2017/05/20/front-end-notes-7-init-http/\" rel=\"nofollow\">前端阶段性总结之「理解 HTTP 协议」</a></li>\n<li><a href=\"https://juejin.im/book/5b936540f265da0a9624b04b/section/5b9ba651f265da0ac726e5de\" rel=\"nofollow\">前端性能优化原理与实践- 浏览器缓存机制介绍与缓存策略剖析</a></li>\n<li><a href=\"https://juejin.im/post/5a757d2f5188254e5c6c404a\" rel=\"nofollow\">我知道的 HTTP 请求</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\" rel=\"nofollow\">阮一峰 - HTTP 协议入门</a></li>\n<li><a href=\"https://www.zhihu.com/question/67772889\" rel=\"nofollow\">知乎 - 为什么 [TCP]连接创建与连接终止要３次握手与４次挥手？</a></li>\n</ul>"
  },
  {
    "id": 113,
    "title": "正则表达式实践",
    "labels": "开发者笔记",
    "created_at": "2019-12-05T10:42:18Z",
    "updated_at": "2019-12-31T18:25:27Z",
    "body_html": "<h2>前言</h2>\n<p>此贴为盖楼贴（持续更新），纪录正则表达式的学习实践。</p>\n<p>正则常见使用场景：</p>\n<ul>\n<li>数据验证，例如检查时间字符串是否符合格式；</li>\n<li>数据抓取，以特定顺序抓取包含特定文本或内容的网页；</li>\n<li>数据包装，将数据从某种原格式转换为另外一种格式；</li>\n<li>字符串解析，例如捕获所拥有 URL 的 GET 参数，或捕获一组圆括弧内的文本；</li>\n<li>字符串替代，将字符串中的某个字符替换为其它字符。</li>\n</ul>\n<h2>使用规则说明</h2>\n<h3>基本语句</h3>\n<p><strong>修饰符</strong></p>\n<ul>\n<li>g（global）在第一次完成匹配后并不会返回结果，它会继续搜索剩下的文本。</li>\n<li>i（insensitive）令整个表达式不区分大小写（例如/aBc/i 将匹配 AbC）。</li>\n<li>m（multi line）允许使用^和$匹配一行的开始和结尾，而不是整个序列。</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-sr\"><span class=\"pl-pds\">/</span>jing<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 能够匹配 'yanhaijing，不能匹配 'yanhaijing\\n'</span>\n<span class=\"pl-sr\"><span class=\"pl-pds\">/</span>jing<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span>m</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 能够匹配 'yanhaijing， 能够匹配 'yanhaijing\\n'</span>\n\n<span class=\"pl-sr\"><span class=\"pl-pds\">/</span><span class=\"pl-k\">^</span>jing<span class=\"pl-pds\">/</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 能够匹配 'jing'，不能匹配 '\\njing'</span>\n<span class=\"pl-sr\"><span class=\"pl-pds\">/</span><span class=\"pl-k\">^</span>jing<span class=\"pl-pds\">/</span>m</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 能够匹配 'jing'，能够匹配 '\\njing'</span></pre></div>\n<blockquote>\n<p>注意:/xxx/gi // 修饰符可以复用，不区分大小写+全字匹配</p>\n</blockquote>\n<p><strong>锚点：^ 和 $</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>^The        匹配任何以“The”开头的字符串 -<span class=\"pl-k\">&gt;</span> Try it<span class=\"pl-k\">!</span> (https://regex101.com/r/cO8lqs/2)\nend$        匹配以“end”为结尾的字符串\n^The end$   抽取匹配从“The”开始到“end”结束的字符串\nroar        匹配任何带有文本“roar”的字符串</pre></div>\n<p><strong>数量符：*、+、？和 {}</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>abc<span class=\"pl-k\">*</span>        匹配在“ab”后面跟着零个或多个“c”的字符串 -<span class=\"pl-k\">&gt;</span> Try it<span class=\"pl-k\">!</span> (https://regex101.com/r/cO8lqs/1)\nabc+        匹配在“ab”后面跟着一个或多个“c”的字符串\nabc<span class=\"pl-k\">?</span>        匹配在“ab”后面跟着零个或一个“c”的字符串\nabc{2}      匹配在“ab”后面跟着两个“c”的字符串\nabc{2,}     匹配在“ab”后面跟着两个或更多“c”的字符串\nabc{2,5}    匹配在“ab”后面跟着2到5个“c”的字符串\na(bc)<span class=\"pl-k\">*</span>      匹配在“a”后面跟着零个或更多“bc”序列的字符串\na(bc){2,5}  匹配在“a”后面跟着2到5个“bc”序列的字符串</pre></div>\n<p><strong>或运算符：| 、 []</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>a(b<span class=\"pl-k\">|</span>c)     匹配在“a”后面跟着“b”或“c”的字符串 -<span class=\"pl-k\">&gt;</span> Try it<span class=\"pl-k\">!</span> (https://regex101.com/r/cO8lqs/3)\na[bc]      匹配在“a”后面跟着“b”或“c”的字符串</pre></div>\n<p><strong>字符类：\\d、\\d、\\s 和 .</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-cce\">\\d</span>         匹配数字型的单个字符 -<span class=\"pl-k\">&gt;</span> Try it<span class=\"pl-k\">!</span> (https://regex101.com/r/cO8lqs/4)\n<span class=\"pl-cce\">\\w</span>         匹配单个词字（字母加下划线） -<span class=\"pl-k\">&gt;</span> Try it<span class=\"pl-k\">!</span> (https://regex101.com/r/cO8lqs/4)\n<span class=\"pl-cce\">\\s</span>         匹配单个空格字符（包括制表符和换行符）\n<span class=\"pl-c1\">.</span>          匹配任意字符 -<span class=\"pl-k\">&gt;</span> Try it<span class=\"pl-k\">!</span> (https://regex101.com/r/cO8lqs/5)</pre></div>\n<h3>中级语句</h3>\n<p><strong>分组和捕获：()</strong></p>\n<ul>\n<li><code>(x)</code> 圆括弧会创建一个捕获性分组，它会捕获匹配项“x”，并且记住它，以便之后使用</li>\n<li><code>(?:x)</code>—  不捕获括号：匹配 x，并且不记住它。</li>\n<li><code>x(?=y)</code>—  向前看：匹配 x，不过是只在 x 后跟 y 时才匹配。</li>\n</ul>\n<h3>高级语句</h3>\n<p><strong>边界符：\\b 和 \\B</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-cce\">\\b</span>abc<span class=\"pl-cce\">\\b</span>          执行整词匹配搜索 -<span class=\"pl-k\">&gt;</span> Try it<span class=\"pl-k\">!</span> (https://regex101.com/r/cO8lqs/25)</pre></div>\n<p>\\b 如插入符号那样表示一个锚点（它与$和^相同）来匹配位置，其中一边是一个单词符号（如\\w），另一边不是单词符号（例如它可能是字符串的起始点或空格符号）。</p>\n<p>它同样能表达相反的非单词边界「\\B」，它会匹配「\\b」不会匹配的位置，如果我们希望找到被单词字符环绕的搜索模式，就可以使用它。</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-cce\">\\B</span>abc<span class=\"pl-cce\">\\B</span>          只要是被单词字符环绕的模式就会匹配 -<span class=\"pl-k\">&gt;</span> Try it<span class=\"pl-k\">!</span> (https://regex101.com/r/cO8lqs/26)</pre></div>\n<h3>注意事项</h3>\n<p>因为正则表达式是被包含在斜杠中，所以如果想搜索斜杠，则需要使用反斜杠将其转义。 对于具有特殊含义的问号等字符也是如此。以下是一个如何搜索这两个字符的示例：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> slashSearch <span class=\"pl-k\">=</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\/</span><span class=\"pl-pds\">/</span></span>;\n<span class=\"pl-k\">var</span> questionSearch <span class=\"pl-k\">=</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\?</span><span class=\"pl-pds\">/</span></span>;</pre></div>\n<h2>匹配规则解析机制是怎样的？</h2>\n<h2>带着问题去学习</h2>\n<h3>Replace</h3>\n<ol>\n<li>在驼峰命名法格式的字符串中添加空格</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">removeCc</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>camelCase<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; 应该返回 'camel Case'</span></pre></div>\n<p>思路分析：</p>\n<ul>\n<li>1.首先需要搜索匹配大写字母,使用 <code>[A-Z]</code>可以匹配出 <code>C</code></li>\n<li>2.然后在 <code>C</code> 之前加入空格，需要拿到 <code>C</code>做变更</li>\n</ul>\n<p>我们需要用捕获括号！捕获括号允许匹配一个值，并且记住它，这样之后就可以用它！</p>\n<div class=\"highlight highlight-source-shell\"><pre>用捕获括号来记住匹配到的大写字母\n<span class=\"pl-s\"><span class=\"pl-pds\">`</span>/([A-Z])/<span class=\"pl-pds\">`</span></span>\n之后用 <span class=\"pl-smi\">$1</span> 访问捕获到的值</pre></div>\n<p>最后实现捕获括号呢？用字符串的 .replace() 方法！我们插入 '$1' 为第二个参数（注意这里一定要用引号）<br>\n方法 2：replace() 也可以指定一个函数作为第二个参数</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 方法 1</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">removeCc</span>(<span class=\"pl-smi\">str</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">replace</span>(<span class=\"pl-sr\"><span class=\"pl-pds\">/</span>(<span class=\"pl-c1\">[<span class=\"pl-c1\">A-Z</span>]</span>)<span class=\"pl-pds\">/</span>g</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span> $1<span class=\"pl-pds\">'</span></span>);\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 方法 2</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">removeCc</span>(<span class=\"pl-smi\">str</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">replace</span>(<span class=\"pl-sr\"><span class=\"pl-pds\">/</span><span class=\"pl-c1\">[<span class=\"pl-c1\">A-Z</span>]</span><span class=\"pl-pds\">/</span>g</span>, <span class=\"pl-smi\">match</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> match);\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> test</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">removeCc</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>camelCase<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 'camel Case'</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">removeCc</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>helloWorldItIsMe<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 'hello World It Is Me'</span></pre></div>\n<ol start=\"2\">\n<li>大写第一个字母</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">capitalize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>camel case<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; 应该返回 'Camel case'</span></pre></div>\n<p>使用 <code>^</code>去命中首字母，配合 <code>[a-z]</code>选择首字母中小写的情况</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">capitalize</span>(<span class=\"pl-smi\">str</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">replace</span>(<span class=\"pl-sr\"><span class=\"pl-pds\">/</span><span class=\"pl-k\">^</span><span class=\"pl-c1\">[<span class=\"pl-c1\">a-z</span>]</span><span class=\"pl-pds\">/</span>g</span>, <span class=\"pl-smi\">match</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-smi\">match</span>.<span class=\"pl-c1\">toUpperCase</span>());\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> test</span>\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">capitalize</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>camel case<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> Camel case'</span></pre></div>\n<ol start=\"3\">\n<li>大写单词的所有首字母</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">capitalizeAll</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>camel case<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; 应该返回 'Camel Case'</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">capitalizeAll</span>(<span class=\"pl-smi\">str</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">replace</span>(<span class=\"pl-sr\"><span class=\"pl-pds\">/</span><span class=\"pl-k\">\\b</span><span class=\"pl-c1\">[<span class=\"pl-c1\">a-z</span>]</span><span class=\"pl-pds\">/</span>g</span>, <span class=\"pl-smi\">match</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-smi\">match</span>.<span class=\"pl-c1\">toUpperCase</span>());\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> test</span>\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">capitalizeAll</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>camel case<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> Camel Case'</span></pre></div>\n<h3>Test</h3>\n<ol>\n<li>手机号码的验证</li>\n</ol>\n<p>规则指定，手机号码除 <code>12</code>和<code>11</code>开头的 11 位数字视为有效</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">checkType_phone</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>13520646171<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 应该返回 true</span>\n<span class=\"pl-en\">checkType_phone</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>11520646171<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 应该返回 false</span>\n<span class=\"pl-en\">checkType_phone</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123456<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 应该返回 false</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">checkType_phone</span>(<span class=\"pl-smi\">str</span>) {\n  <span class=\"pl-k\">return</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-k\">^</span>1(3<span class=\"pl-k\">|</span>4<span class=\"pl-k\">|</span>5<span class=\"pl-k\">|</span>6<span class=\"pl-k\">|</span>7<span class=\"pl-k\">|</span>8<span class=\"pl-k\">|</span>9)<span class=\"pl-c1\">[<span class=\"pl-c1\">0-9</span>]</span><span class=\"pl-k\">{9}</span><span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>.<span class=\"pl-c1\">test</span>(str);\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> test</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">checkType_phone</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>13520646171<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span>  true</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">checkType_phone</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>11520646171<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span>  false</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">checkType_phone</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123456<span class=\"pl-pds\">'</span></span>)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> false</span></pre></div>\n<h3>Match</h3>\n<p>尽可能的取出乱码字符串中的中文及有效符号</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> str <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>&amp;lt;p class=&amp;quot;MsoNormal&amp;quot;&amp;gt;</span>\n<span class=\"pl-s\">↵\t在3182例接受磁控胶囊胃镜检查的无症状体检人群中&amp;lt;span&amp;gt;，共检出&amp;lt;/span&amp;gt;7例胃癌，这意味着无症状人群的胃癌检出率为2.2‰，其中50岁以上人群胃癌检出率高达7.4‰！这一研究成果刊发于美国消化领域权威学术期刊GIE&amp;lt;span&amp;gt;（&amp;lt;/span&amp;gt;Gastrointestinal Endoscopy，译名《消化内镜》&amp;lt;span&amp;gt;）。&amp;lt;/span&amp;gt;</span>\n<span class=\"pl-s\">↵&amp;lt;/p&amp;gt;<span class=\"pl-pds\">`</span></span>;\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getChineseText</span>(<span class=\"pl-smi\">str</span>) {\n  <span class=\"pl-k\">var</span> reg <span class=\"pl-k\">=</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-c1\">[<span class=\"pl-c1\"><span class=\"pl-c1\">\\u4e00</span>-<span class=\"pl-c1\">\\u9fa5</span></span>|<span class=\"pl-c1\">0-9</span><span class=\"pl-c1\">.</span><span class=\"pl-cce\">\\‰</span>《》]</span><span class=\"pl-k\">+</span><span class=\"pl-pds\">/</span>g</span>;\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">match</span>(reg).<span class=\"pl-c1\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>，<span class=\"pl-pds\">'</span></span>);\n}\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">getChineseText</span>(str)); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 在3182例接受磁控胶囊胃镜检查的无症状体检人群中，共检出，7例胃癌，这意味着无症状人群的胃癌检出率为2.2‰，其中50岁以上人群胃癌检出率高达7.4‰，这一研究成果刊发于美国消化领域权威学术期刊，译名《消化内镜》</span></pre></div>\n<p>匹配出地址：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> str <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>&lt;https://api.github.com/user/24217900/starred?page=2&gt;; rel=\"next\", &lt;https://api.github.com/user/24217900/starred?page=16&gt;; rel=\"last\"<span class=\"pl-pds\">`</span></span>;\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">str</span>.<span class=\"pl-c1\">match</span>(<span class=\"pl-sr\"><span class=\"pl-pds\">/</span>&lt;<span class=\"pl-c1\">.</span><span class=\"pl-k\">+?</span>&gt;<span class=\"pl-pds\">/</span>g</span>));\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> [</span>\n<span class=\"pl-c\">  '&lt;https://api.github.com/user/24217900/starred?page=2&gt;',</span>\n<span class=\"pl-c\">  '&lt;https://api.github.com/user/24217900/starred?page=16&gt;'</span>\n<span class=\"pl-c\">] <span class=\"pl-c\">*/</span></span></pre></div>\n<h2>参考链接</h2>\n<ul>\n<li><a href=\"http://www.xiaojichao.com/post/regex.html\" rel=\"nofollow\">JavaScript: 为初学者介绍正则表达式</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/46354534\" rel=\"nofollow\">正则表达式的功法大全，做 NLP 再也不怕搞不定字符串了</a></li>\n<li><a href=\"https://dailc.github.io/2017/07/06/regularExpressionGreedyAndLazy.html\" rel=\"nofollow\">【正则表达式系列】贪婪与非贪婪模式</a>，by <a href=\"https://github.com/dailc\">dailc</a></li>\n<li><a href=\"https://www.cnblogs.com/hustskyking/p/principle-of-javascript-template.html\" rel=\"nofollow\">JavaScript 模板引擎原理，几行代码的事儿</a></li>\n<li><a href=\"http://www.alloyteam.com/2016/10/implement-a-simple-template-engine/\" rel=\"nofollow\">实现一个简单的模板引擎</a></li>\n</ul>"
  },
  {
    "id": 112,
    "title": "圣经中的教导 —— 当孝敬父母",
    "labels": "光与盐",
    "created_at": "2019-12-01T15:57:09Z",
    "updated_at": "2019-12-07T01:26:48Z",
    "body_html": "<h2>前言</h2>\n<p>在社会上我们的教育教导我们孝敬父母，但是宽泛的一句话孝敬父母当如何行出来呢？</p>\n<p>特别是现今比较常见的<code>代沟</code>一词，父母子女之间差距随着教育水平、认知能力，很可能就一个问题有不同的看法，而且在这种场景下儿女也很容易存在轻视父母，不尊重父母等等情形。诚然，我发现自己身上就有这样的问题，对于父亲苦口婆心的劝诫不能够充分的理解，只是了解一点点，自以为尊敬，其实这个程度是不足够的。</p>\n<p>但其实我们另有一个方向不容忽视就是“可怜天下父母心”，基本上父母亲做事说话都是为着我们来考虑的，父母亲对于子女的爱是值得我们尊敬的。</p>\n<p>那么圣经中的教导，子女该如何回应父母呢？</p>\n<h2>参考经文</h2>\n<ul>\n<li>你们作儿女的，要凡事听从父母，因为这是主所喜悦的。【西 3:20】</li>\n<li>“当孝敬父母，使你的日子在耶和华你神所赐你的地上得以长久”。【出 20:12】</li>\n<li>他父母看见就很希奇。他母亲对他说：“我儿，为什么向我们这样行呢？看哪，你父亲和我伤心来找你！”耶稣说：“为什么找我呢？岂不知我应当以我父的事为念吗？（” 他所说的这话，他们不明白。 他就同他们下去，回到拿撒勒，并且顺从他们。他母亲把这一切的事都存在心里。【路 2:48-51】</li>\n</ul>\n<h2>正文</h2>\n<h3>为何要顺服父母？</h3>\n<ol>\n<li>神的创造计划，秩序令神喜悦。（孝敬父母是一条带有应许的诫命，位于十诫当中）</li>\n<li>新的行事为人代表有新的生命。</li>\n<li>学像耶稣基督，对主的尊重与爱慕使得我们情不自禁的模仿。（路 2：51 耶稣顺服父母）</li>\n</ol>\n<h3>怎样顺服父母？</h3>\n<ol>\n<li>\n<p>凡事听从，没有不顺服的情况。所有的父母亲无论如何，都尽量去理解爱与关心，因为实在是关心。有些情况父母给出的建议可能你自己有以为更好的，这里父母给出的建议我们还是需要细细思量，因为他们是不懂而不是不好。</p>\n</li>\n<li>\n<p>尽量顺服，家里动刀剑，价值观冲突时最高效忠的是耶稣。<strong>顺服不应该违背信仰原则</strong>，也不能够去赋予我们的不顺服以正当的合法性与父母争辩。这两点是同等重要的地位，一方面是爱神，遵从神的诫命律例，另一方面不可忽视的，我们又常常欠缺的就是对父母的爱，这其中需要<strong>以爱来调和</strong>。</p>\n</li>\n<li>\n<p>不要过多关注不重要的小细节，如办理丧葬、结婚等的礼节。这里需要明白的是我们的改变，新的行事为人首先是由心而发的，期望去改变别人的时候，从心里改变人，而不是从外面改变。（保罗也因希望得着周围的人而把自己放在他们之下）</p>\n</li>\n</ol>\n<h2>思考</h2>\n<ol>\n<li>\n<p>信仰原则，真理使人得自由。我们需要多读经，建立与神关系。这样才有可能在各样得环境下做出合神心意的，也要照顾别人的感受、益处，不固执的传福音。</p>\n</li>\n<li>\n<p>不管发生了什么，给父母以必须的尊重。</p>\n</li>\n<li>\n<p>对待父母的态度与方式方法，不听从 不等于 不尊重。不能听从父母的时候，不得不反对时候，心态应该是难过的。（我爱你们，也尊重你们）</p>\n</li>\n</ol>\n<h2>总结</h2>\n<p>基督里的顺服，让我们在顺服孝敬父母中得到自由，不被捆锁，以爱心来行事。</p>\n<p>一方面要听从神的教导原则，另一方面是真的爱的心。原来圣经当中的一切教导都包含在爱神与爱人当中了。（爱人如己，父母爱我们如此，我们怎能不爱？那么，其他人呢？）</p>\n<p>用你尊敬顺服父母的方式见证你是基督里有新生命的，并且效法基督。</p>\n<h3>课后作业</h3>\n<p>思考父母亲对于你的劝告以及你当时的回应，预备下一次的对话，希望你存着爱的心行事，使得我们的神得着颂赞与荣耀。</p>"
  },
  {
    "id": 111,
    "title": "优秀的博客文章纪录",
    "labels": "杂物间",
    "created_at": "2019-11-29T16:50:21Z",
    "updated_at": "2019-12-30T04:37:28Z",
    "body_html": "<h2>目录</h2>\n<ul>\n<li><a href=\"https://blog.1stg.me/article/292\" rel=\"nofollow\">一个因抑郁症从阿里离职的前端工程师的自白</a>, by <a href=\"https://github.com/JounQin\">JounQin</a></li>\n<li><a href=\"https://github.com/dt-fe/weekly/blob/v2/131.%E7%B2%BE%E8%AF%BB%E3%80%8A%E4%BB%8E%200%20%E5%88%B0%201%E3%80%8B.md\">精读《从 0 到 1》</a>，by <a href=\"https://github.com/ascoders\">ascoders</a></li>\n<li><a href=\"https://blog.isquaredsoftware.com/2018/11/react-redux-history-implementation/\" rel=\"nofollow\">Idiomatic Redux: The History and Implementation of React-Redux</a> , by <a href=\"https://github.com/markerikson\">markerikson</a></li>\n<li><a href=\"https://pomb.us/build-your-own-react/\" rel=\"nofollow\">如何自己实现一个 React 框架</a>（英文）</li>\n<li><a href=\"https://evanliman.to/2019/10/06/so-youre-a-new-grad-software-engineer.html\" rel=\"nofollow\">So You're A New Grad Software Engineer</a>（英文）</li>\n</ul>"
  },
  {
    "id": 110,
    "title": "前端单元测试",
    "labels": "开发者笔记",
    "created_at": "2019-11-29T06:55:34Z",
    "updated_at": "2019-11-29T08:05:00Z",
    "body_html": "<h2>前言</h2>\n<p>不是为了测试而测试，测试的目的是在于<strong>提高代码质量、降低错误</strong>。</p>\n<p>测试的类型：</p>\n<ul>\n<li>单元测试（unit testing）<strong>Mocha</strong> 关注输入与输出</li>\n<li>功能测试（feature testing）<strong>Nightmare</strong> 关注功能效果</li>\n<li>集成测试（integration testing）<strong>Travis CI</strong> 关注自动化流程</li>\n</ul>\n<h2>单元测试：mocha</h2>\n<p>Demo: <a href=\"https://github.com/yanyue404/addKey\">addKey</a></p>\n<p>为数组类型的每一项添加新的键值对，并过滤子项</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>mocha<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">assert</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>assert<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">addKey</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">let</span> arr <span class=\"pl-k\">=</span> [\n  {\n    id<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n    name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>亚瑟<span class=\"pl-pds\">'</span></span>,\n  },\n  {\n    id<span class=\"pl-k\">:</span> <span class=\"pl-c1\">2</span>,\n    name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>狄仁杰<span class=\"pl-pds\">'</span></span>,\n  },\n  {\n    id<span class=\"pl-k\">:</span> <span class=\"pl-c1\">3</span>,\n    name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>曹操<span class=\"pl-pds\">'</span></span>,\n  },\n];\n<span class=\"pl-en\">describe</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>addKey<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">it</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>should return add custom key:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-en\">addKey</span>(arr, { Address<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Chinese<span class=\"pl-pds\">'</span></span> });\n\n    <span class=\"pl-en\">assert</span>(arr[<span class=\"pl-c1\">0</span>].<span class=\"pl-smi\">Address</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Chinese<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-en\">assert</span>(arr[<span class=\"pl-c1\">1</span>].<span class=\"pl-smi\">Address</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Chinese<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-en\">assert</span>(arr[<span class=\"pl-c1\">2</span>].<span class=\"pl-smi\">Address</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Chinese<span class=\"pl-pds\">'</span></span>);\n  });\n\n  <span class=\"pl-en\">it</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>should return add custom key and filtered correctly:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-en\">addKey</span>(arr, { isShow<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span> }, (<span class=\"pl-smi\">v</span>, <span class=\"pl-smi\">index</span>, <span class=\"pl-smi\">array</span>) <span class=\"pl-k\">=&gt;</span> {\n      index <span class=\"pl-k\">===</span> <span class=\"pl-smi\">array</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">?</span> ((<span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>铠<span class=\"pl-pds\">'</span></span>), (<span class=\"pl-smi\">v</span>.<span class=\"pl-smi\">isShow</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>)) <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>;\n    });\n\n    <span class=\"pl-en\">assert</span>(<span class=\"pl-k\">!</span>arr[<span class=\"pl-c1\">0</span>].<span class=\"pl-smi\">isShow</span>);\n    <span class=\"pl-en\">assert</span>(<span class=\"pl-k\">!</span>arr[<span class=\"pl-c1\">1</span>].<span class=\"pl-smi\">isShow</span>);\n    <span class=\"pl-en\">assert</span>(arr[<span class=\"pl-c1\">2</span>].<span class=\"pl-smi\">isShow</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n  });\n\n  <span class=\"pl-en\">it</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>should return omit custom key and filtered correctly:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-en\">addKey</span>(arr, (<span class=\"pl-smi\">v</span>, <span class=\"pl-smi\">index</span>, <span class=\"pl-smi\">array</span>) <span class=\"pl-k\">=&gt;</span> {\n      index <span class=\"pl-k\">===</span> <span class=\"pl-smi\">array</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">?</span> ((<span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>曹操<span class=\"pl-pds\">'</span></span>), (<span class=\"pl-smi\">v</span>.<span class=\"pl-smi\">isShow</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>)) <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>;\n    });\n\n    <span class=\"pl-en\">assert</span>(<span class=\"pl-k\">!</span>arr[<span class=\"pl-c1\">0</span>].<span class=\"pl-smi\">isShow</span>);\n    <span class=\"pl-en\">assert</span>(<span class=\"pl-k\">!</span>arr[<span class=\"pl-c1\">1</span>].<span class=\"pl-smi\">isShow</span>);\n    <span class=\"pl-en\">assert</span>(arr[<span class=\"pl-c1\">2</span>].<span class=\"pl-smi\">isShow</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n  });\n});</pre></div>\n<h2>功能测试：mocha+nightmare</h2>\n<p>进行完整的页面级别功能测试，需要使用 <a href=\"https://github.com/segmentio/nightmare\">nightmare</a> , 它依靠 <code>electron</code>作为项目运行的容器进行测试。</p>\n<p>解决国内安装 <code>electron</code> 困难的方法：</p>\n<div class=\"highlight highlight-source-shell\"><pre>ELECTRON_MIRROR=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://npm.taobao.org/mirrors/electron/<span class=\"pl-pds\">\"</span></span> npm install nightmare -D</pre></div>\n<p>其他依赖项:</p>\n<div class=\"highlight highlight-source-shell\"><pre>npm install mocha chai -D</pre></div>\n<ul>\n<li>Demo: <a href=\"https://github.com/yanyue404/csdwheels\">csdwheels</a></li>\n</ul>\n<p>测试一个分页组件是否成功渲染</p>\n<p><strong>scripts</strong> 命令编写</p>\n<pre><code> \"scripts\": {\n    \"demos\": \"node ./test/server.js\",\n    \"test\": \"mocha \\\"./test/**/*.test.js\\\"\",\n    \"dev\": \"webpack-dev-server\",\n    \"prettier\": \"prettier --write \\\"./src/**/*.{js,css,html}\\\"\",\n    \"build\": \"webpack &amp;&amp; gulp mini &amp;&amp; npm run test\"\n  }\n</code></pre>\n<p><strong>启动页面测试的 node 环境入口文件</strong>, <a rel=\"nofollow\" href=\"http://127.0.0.1:3000/pagination\">http://127.0.0.1:3000/pagination</a> 为分页组件渲染结果</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">express</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>express<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">path</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>path<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">app</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">express</span>();\n<span class=\"pl-k\">var</span> port <span class=\"pl-k\">=</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-smi\">env</span>.<span class=\"pl-c1\">PORT</span> <span class=\"pl-k\">||</span> <span class=\"pl-c1\">3000</span>;\n\n<span class=\"pl-smi\">app</span>.<span class=\"pl-en\">use</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/style<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">express</span>.<span class=\"pl-en\">static</span>(<span class=\"pl-smi\">path</span>.<span class=\"pl-en\">resolve</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>../style<span class=\"pl-pds\">'</span></span>)));\n<span class=\"pl-smi\">app</span>.<span class=\"pl-en\">use</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/dist<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">express</span>.<span class=\"pl-en\">static</span>(<span class=\"pl-smi\">path</span>.<span class=\"pl-en\">resolve</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>../dist<span class=\"pl-pds\">'</span></span>)));\n<span class=\"pl-smi\">app</span>.<span class=\"pl-en\">use</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/src<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">express</span>.<span class=\"pl-en\">static</span>(<span class=\"pl-smi\">path</span>.<span class=\"pl-en\">resolve</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>../src<span class=\"pl-pds\">'</span></span>)));\n\n<span class=\"pl-smi\">app</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-smi\">req</span>, <span class=\"pl-smi\">res</span>) <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-smi\">res</span>.<span class=\"pl-en\">sendFile</span>(<span class=\"pl-smi\">path</span>.<span class=\"pl-c1\">join</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>index.html<span class=\"pl-pds\">'</span></span>));\n});\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> List</span>\n<span class=\"pl-smi\">app</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/pagination<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-smi\">req</span>, <span class=\"pl-smi\">res</span>) <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-smi\">res</span>.<span class=\"pl-en\">sendFile</span>(<span class=\"pl-smi\">path</span>.<span class=\"pl-c1\">join</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/pagination/test.html<span class=\"pl-pds\">'</span></span>));\n});\n\n<span class=\"pl-smi\">app</span>.<span class=\"pl-en\">listen</span>(port, <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>app listening on port http://127.0.0.1:<span class=\"pl-s1\"><span class=\"pl-pse\">${</span>port<span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n});</pre></div>\n<p>测试方法，组件是否渲染成功，仅测试 <code>http</code> 连接是否成功</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span>  pagination.test.js</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">Nightmare</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nightmare<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">chai</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>chai<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-smi\">chai</span>.<span class=\"pl-en\">should</span>();\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>初始化Nightmare对象</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">nightmare</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Nightmare</span>({\n  show<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span>是否显示图形化界面</span>\n  openDevTools<span class=\"pl-k\">:</span> {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>配置此项后可显示开发者工具，不配置即不显示</span>\n    mode<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>detach<span class=\"pl-pds\">'</span></span>,\n  },\n});\n\n<span class=\"pl-en\">describe</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>pagination test<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 可以关闭超时事件或者直接设置超时时间，默认为两秒关闭</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">timeout</span>(<span class=\"pl-c1\">5000</span>);\n  <span class=\"pl-en\">it</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>http connection<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">done</span>) {\n    nightmare\n      .<span class=\"pl-en\">goto</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>http://127.0.0.1:3000/pagination<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span>打开某网页</span>\n      .<span class=\"pl-c1\">then</span>(() <span class=\"pl-k\">=&gt;</span> {\n        <span class=\"pl-en\">done</span>();\n      }) <span class=\"pl-c\"><span class=\"pl-c\">//</span>成功后调done执行结果</span>\n      .<span class=\"pl-c1\">catch</span>(<span class=\"pl-smi\">err</span> <span class=\"pl-k\">=&gt;</span> {\n        {\n          <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">warn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>加载出错<span class=\"pl-pds\">'</span></span>, err);\n          <span class=\"pl-en\">done</span>(err);\n        }\n      }); <span class=\"pl-c\"><span class=\"pl-c\">//</span>出错执行什么</span>\n  });\n});</pre></div>\n<p><strong>测试</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 启动 node server</span>\nnpm  run demos\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 运行测试</span>\nnpm <span class=\"pl-c1\">test</span>\n\n<span class=\"pl-k\">&gt;</span> csdwheels@1.3.6 <span class=\"pl-c1\">test</span> F:<span class=\"pl-cce\">\\S</span>ource code<span class=\"pl-cce\">\\c</span>sdwheels\n<span class=\"pl-k\">&gt;</span> mocha <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./test/**/*.test.js<span class=\"pl-pds\">\"</span></span>\n\n  backtop <span class=\"pl-c1\">test</span>\n    √ http connection (1045ms)\n\n  calendar <span class=\"pl-c1\">test</span>\n    √ http connection (1148ms)\n\n  carousel <span class=\"pl-c1\">test</span>\n    √ http connection (2911ms)\n\n  eventemitter <span class=\"pl-c1\">test</span>\n    √ http connection (1037ms)\n\n  magnifier <span class=\"pl-c1\">test</span>\n    √ http connection (3327ms)\n\n  pagination <span class=\"pl-c1\">test</span>\n    √ http connection (1058ms)\n\n\n  6 passing (11s)</pre></div>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://github.com/ruanyf/jstraining/tree/master/demos#nightmare\">jstraining - 前端的功能测试</a></li>\n<li><a href=\"https://1024.page/2016/web/how-to-use-nightmare-for-web-page-test\" rel=\"nofollow\">使用 nightmare 进行页面测试介绍</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/43660578\" rel=\"nofollow\">初识 mocha + nightmare 前端单元测试</a></li>\n</ul>"
  },
  {
    "id": 109,
    "title": "如何学习开源项目甚至发起 PR ？",
    "labels": "开发者笔记",
    "created_at": "2019-11-28T10:10:56Z",
    "updated_at": "2019-12-30T04:37:41Z",
    "body_html": "<h2>源码学习</h2>\n<h3>1. 对项目足够了解</h3>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/350289336\" rel=\"nofollow\">一年内的前端看不懂前端框架源码怎么办？</a></li>\n</ul>\n<h3>2. 查看项目早期代码</h3>\n<p><strong>早期提交日志</strong></p>\n<p>参数说明：</p>\n<ul>\n<li><code>--pretty=format</code>  控制显示的记录格式</li>\n<li><code>--reverse</code> 倒序排列</li>\n<li><code> -n</code> 查看前 <code>n</code>条纪录</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>$ git log --pretty=format:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%h [%an - %ar] : %s<span class=\"pl-pds\">\"</span></span> --reverse\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Vue</span>\n5f19affa [Evan You - 5 years ago] <span class=\"pl-c1\">:</span> init\n706c67d1 [Evan You - 5 years ago] <span class=\"pl-c1\">:</span> restructure\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> checkout 到 commmit id</span>\n$ git  checkout 706c67d1\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 再回来</span>\n$ git checkout master\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> --pretty=format 显示控制参数</span>\n选项\t 说明\n%H\t提交对象（commit）的完整哈希字串\n%h\t提交对象的简短哈希字串\n%T\t树对象（tree）的完整哈希字串\n%t\t树对象的简短哈希字串\n%P\t父对象（parent）的完整哈希字串\n%p\t父对象的简短哈希字串\n%an\t作者（author）的名字\n%ae\t作者的电子邮件地址\n%ad\t作者修订日期（可以用 -date= 选项定制格式）\n%ar\t作者修订日期，按多久以前的方式显示\n%cn\t提交者(committer)的名字\n%ce\t提交者的电子邮件地址\n%cd\t提交日期\n%cr\t提交日期，按多久以前的方式显示</pre></div>\n<p>制作常用命令别名</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ git config --global alias.logs <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>log --pretty=format:'%h [%an - %ar] : %s'<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 使用</span>\n$ git logs --reverse</pre></div>\n<h4>参考资料</h4>\n<ul>\n<li><a href=\"https://blog.csdn.net/sky1203850702/article/details/41007895\" rel=\"nofollow\">git log 常用命令及技巧</a></li>\n<li><a href=\"https://webapps.stackexchange.com/questions/43742/how-do-i-find-the-date-of-the-first-commit-in-a-github-repository/59893\" rel=\"nofollow\">How do I find the date of the first commit in a GitHub repository?</a></li>\n<li><a href=\"http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/\" rel=\"nofollow\">JavaScript实现MVVM之我就是想监测一个普通对象的变化</a></li>\n<li><a href=\"https://github.com/youngwind/blog/issues/84\" data-hovercard-type=\"issue\" data-hovercard-url=\"/youngwind/blog/issues/84/hovercard\">vue早期源码学习系列之一：如何监听一个对象的变化 </a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004384515\" rel=\"nofollow\">vue 源码分析之如何实现 observer 和 watcher</a></li>\n<li><a href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\" rel=\"nofollow\">Vue2.1.7源码学习</a></li>\n</ul>"
  },
  {
    "id": 108,
    "title": "教会信经简史",
    "labels": "光与盐",
    "created_at": "2019-11-24T07:52:50Z",
    "updated_at": "2019-12-30T04:37:55Z",
    "body_html": ""
  },
  {
    "id": 107,
    "title": "我的心你要称颂耶和华 —— 旷野心理十讲",
    "labels": "光与盐",
    "created_at": "2019-11-24T07:16:48Z",
    "updated_at": "2019-12-30T04:38:15Z",
    "body_html": "<h2>目录</h2>\n<ul>\n<li>旷野心理1-我的未来是由过去和现状决定的</li>\n<li>旷野心理2-比我强的替我做吧，我不想负责，因我害怕</li>\n<li>旷野心理3-要求太高了，事情太难了，我承担不起</li>\n<li>旷野心理4-我只会埋怨唠叨</li>\n<li>旷野心理5-不要让我等了，我马上就要</li>\n<li>旷野心理6-也许我做的是不对，但那不是我的错</li>\n<li>旷野心理7-自怜</li>\n<li>旷野心理8-我不配得祝福</li>\n<li>旷野心理9-猜疑和嫉妒</li>\n<li>旷野心理10-我要以我的方式做</li>\n</ul>"
  },
  {
    "id": 106,
    "title": "读经亮光",
    "labels": "光与盐",
    "created_at": "2019-11-21T04:32:26Z",
    "updated_at": "2019-12-30T04:38:31Z",
    "body_html": "<h2>2019</h2>\n<h4>11-20-巴兰的结局 —— 做上帝“允许”的事，最终被杀</h4>\n<p>思考： 巴兰错在哪里？我是巴兰吗？</p>\n<h4>11-28-敬畏耶和华，神真实的同在</h4>\n<blockquote>\n<p>读 约 <code>6-10</code></p>\n</blockquote>\n<p><code>23</code> 因为耶和华你们的神在你们前面使约旦河的水干了，等着你们过来，就如耶和华你们的神从前在我们前面使红海干了，等着我们过来一样，<br>\n<code>24</code> 要使地上万民都知道，耶和华的手大有能力，也要使你们永远敬畏耶和华你们的神。【约 4】</p>\n<p>约书亚的信心之旅 【约 1-10】：</p>\n<p>刚强壮胆(信心) =&gt; 窥探耶利哥 =&gt; 过约旦河 =&gt; 立石为记 =&gt; 割礼+元帅 =&gt; 耶利哥城坍塌 =&gt; 艾城败逃 =&gt; 除罪自洁 =&gt;攻取艾城 =&gt; 宣读律法 =&gt;基遍人欺骗 =&gt; 杀亚摩利五王 =&gt; 攻取迦南诸城</p>\n<h3>参考资料</h3>\n<ul>\n<li><a href=\"http://www.chinesebibleonline.com/\" rel=\"nofollow\">中文圣经在线</a></li>\n<li><a href=\"https://www.jianshu.com/p/d70ef63365c4\" rel=\"nofollow\">巴兰做上帝所“允许”的事，为何犯了罪？</a></li>\n</ul>"
  },
  {
    "id": 105,
    "title": "上帝十诫",
    "labels": "光与盐",
    "created_at": "2019-11-21T04:18:32Z",
    "updated_at": "2019-12-30T04:38:42Z",
    "body_html": "<h2>十诫</h2>\n<ul>\n<li>\n<ol>\n<li>“我是耶和华你的神，曾将你从埃及地为奴之家领出来。除了我以外，你不可有别的神”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>“不可为自己雕刻偶像，也不可作什么形像，仿佛上天，下地和地底下，水中的百物。不可跪拜那些像，也不可事奉它，因为我耶和华你的神是忌邪的神。恨我的，我必追讨他的罪，自父及子，直到三，四代。爱我，守我诫命的，我必向他们发慈爱，直到千代”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>“不可妄称耶和华你神的名。因为妄称耶和华名的，耶和华必不以他为无罪”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>“当照耶和华你神所吩咐的守安息日为圣日。六日要劳碌作你一切的工，但第七日是向耶和华你神当守的安息日。这一日，你和你的儿女，仆婢，牛，驴，牲畜，并在你城里寄居的客旅，无论何工都不可作，使你的仆婢可以和你一样安息。六日之内，耶和华造天、地、海，和其中的万物，第七日便安息，所以耶和华赐福与安息日，定为圣日。你也要记念你在埃及地作过奴仆。耶和华你神用大能的手和伸出来的膀臂将你从那里领出来。因此，耶和华你的神吩咐你守安息日”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>“当照耶和华你神所吩咐的孝敬父母，使你得福，并使你的日子在耶和华你神所赐你的地上得以长久”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"6\">\n<li>“不可杀人”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"7\">\n<li>“不可奸淫”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"8\">\n<li>“不可偷盗”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"9\">\n<li>“不可作假见证陷害人”。</li>\n</ol>\n</li>\n<li>\n<ol start=\"10\">\n<li>“不可贪恋人的妻子。也不可贪图人的房屋，田地，仆婢，牛，驴，并他一切所有的”。</li>\n</ol>\n</li>\n</ul>\n<h2>最大的诫命</h2>\n<ul>\n<li>你要尽心、尽性、尽力爱耶和华你的神</li>\n<li>爱人如己</li>\n</ul>\n<blockquote>\n<p>这两条诫命是律法和先知一切道理的总纲（一个是与神的关系，一个是与人的关系）</p>\n</blockquote>"
  },
  {
    "id": 104,
    "title": "你有用对 async/await 吗？",
    "labels": "JavaScript",
    "created_at": "2019-11-18T12:24:36Z",
    "updated_at": "2019-12-29T18:49:20Z",
    "body_html": "<h2>前言</h2>\n<p>async 函数虽然说可以将异步代码用同步的方式书写，但是如果把可以异步的方法使用同步写了，那可就糟糕了...</p>\n<h2>同步async（串行）</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">fetch</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>node-fetch<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">sleep</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">timeout</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Promise</span>(<span class=\"pl-smi\">resolve</span> <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-c1\">setTimeout</span>(resolve, timeout);\n  });\n};\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getZhihuColumn</span>(<span class=\"pl-smi\">id</span>) {\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span>(<span class=\"pl-c1\">2000</span>);\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">url</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>https://zhuanlan.zhihu.com/api/columns/<span class=\"pl-s1\"><span class=\"pl-pse\">${</span>id<span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>;\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">response</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span>(url);\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">response</span>.<span class=\"pl-en\">json</span>();\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">showColumnInfo</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">async</span> () <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">time</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>showColumnInfo<span class=\"pl-pds\">'</span></span>);\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 串行</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">feweekly</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">getZhihuColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>feweekly<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">toolingtips</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">getZhihuColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>toolingtips<span class=\"pl-pds\">'</span></span>);\n\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>NAME: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">feweekly</span>.<span class=\"pl-c1\">title</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>INTRO: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">feweekly</span>.<span class=\"pl-smi\">intro</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>NAME: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">toolingtips</span>.<span class=\"pl-c1\">title</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>INTRO: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">toolingtips</span>.<span class=\"pl-smi\">intro</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">timeEnd</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>showColumnInfo<span class=\"pl-pds\">'</span></span>);\n};\n<span class=\"pl-en\">showColumnInfo</span>();</pre></div>\n<p><strong>打印结果：</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>NAME: 前端周刊\nINTRO: 在前端领域跟上时代的脚步，广度和深度不断精进\nNAME: tooling bits\nINTRO: 工欲善其事必先利其器\nshowColumnInfo: 4391.631ms</pre></div>\n<h2>异步async （并行）</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">fetch</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>node-fetch<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">sleep</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">timeout</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Promise</span>(<span class=\"pl-smi\">resolve</span> <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-c1\">setTimeout</span>(resolve, timeout);\n  });\n};\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getZhihuColumn</span>(<span class=\"pl-smi\">id</span>) {\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span>(<span class=\"pl-c1\">2000</span>);\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">url</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>https://zhuanlan.zhihu.com/api/columns/<span class=\"pl-s1\"><span class=\"pl-pse\">${</span>id<span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>;\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">response</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span>(url);\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">response</span>.<span class=\"pl-en\">json</span>();\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">showColumnInfo</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">async</span> () <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">time</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>showColumnInfo<span class=\"pl-pds\">'</span></span>);\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 并行</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">feweeklyPromise</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getZhihuColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>feweekly<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">toolingtipsPromise</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">getZhihuColumn</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>toolingtips<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">feweekly</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> feweeklyPromise;\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">toolingtips</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> toolingtipsPromise;\n\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>NAME: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">feweekly</span>.<span class=\"pl-c1\">title</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>INTRO: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">feweekly</span>.<span class=\"pl-smi\">intro</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>NAME: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">toolingtips</span>.<span class=\"pl-c1\">title</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>INTRO: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">toolingtips</span>.<span class=\"pl-smi\">intro</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>);\n\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">timeEnd</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>showColumnInfo<span class=\"pl-pds\">'</span></span>);\n};\n<span class=\"pl-en\">showColumnInfo</span>();</pre></div>\n<p><strong>打印结果：</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>NAME: 前端周刊\nINTRO: 在前端领域跟上时代的脚步，广度和深度不断精进\nNAME: tooling bits\nINTRO: 工欲善其事必先利其器\nshowColumnInfo: 2245.060ms</pre></div>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"http://huihuawk.com/front/async-await/\" rel=\"nofollow\">ASYNC/AWAIT 使用警示</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/avoiding-the-async-await-hell-c77a0fb71c4c/\" rel=\"nofollow\">How to escape async/await hell</a></li>\n<li><a href=\"https://github.com/wangshijun/course-javascript-async-await\">github/course-javascript-async-await</a> - Source code for course \"asynchronous javascript with async/await\"</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/primers/async-functions\" rel=\"nofollow\">https://developers.google.com/web/fundamentals/primers/async-functions</a></li>\n</ul>"
  },
  {
    "id": 103,
    "title": "个人博客 - Todo",
    "labels": "观点与感想",
    "created_at": "2019-11-16T04:31:27Z",
    "updated_at": "2019-11-28T06:33:56Z",
    "body_html": "<h2>Javascript</h2>\n<ul>\n<li>js 的原型链</li>\n<li>Http 网络协议 （可参照 <a href=\"https://www.yuque.com/ysfe/ykx/fedhb#f1537fe0\" rel=\"nofollow\">前端开发者手册</a>）</li>\n<li>一门编程语言的组成</li>\n<li>Promise 对象</li>\n</ul>\n<h2>精读</h2>\n<ul>\n<li><a href=\"https://juejin.im/post/5b592635e51d4533d2043e15\" rel=\"nofollow\">手把手教你用原生JavaScript造轮子（1）——分页器</a></li>\n<li><a href=\"https://github.com/youngwind/blog/issues/84\" data-hovercard-type=\"issue\" data-hovercard-url=\"/youngwind/blog/issues/84/hovercard\">vue早期源码学习系列之一：如何监听一个对象的变化</a> / <a href=\"http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/\" rel=\"nofollow\">JavaScript实现MVVM之我就是想监测一个普通对象的变化</a></li>\n<li><a href=\"http://hcysun.me/2017/03/03/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/\" rel=\"nofollow\">Vue2.1.7源码学习</a></li>\n</ul>\n<h2>做东西</h2>\n<ul>\n<li><a href=\"https://github.com/yanyue404/issues-to-markdown\">issues-to-markdown</a></li>\n<li>贪吃蛇游戏</li>\n</ul>\n<h2>译文</h2>\n<p><strong>选自</strong></p>\n<ul>\n<li>JavaScript Weekly</li>\n<li><a href=\"https://github.com/ruanyf/weekly\">阮一峰 - weekly</a> - 科技爱好者周刊，每周五发布</li>\n</ul>\n<p><strong>Todo</strong></p>\n<ul>\n<li>如何参与开源项目？</li>\n<li>nodejs 设计者的 10个遗憾</li>\n<li>33个js 的重难点</li>\n</ul>"
  },
  {
    "id": 102,
    "title": "jstraining - 全栈工程师培训材料",
    "labels": "精读",
    "created_at": "2019-11-16T04:19:39Z",
    "updated_at": "2019-11-20T10:25:33Z",
    "body_html": "<h2>前言</h2>\n<ul>\n<li><a href=\"https://github.com/ruanyf/jstraining\">ruanyf/jstraining</a>\n<ul>\n<li><a href=\"https://github.com/ruanyf/jstraining/tree/master/demos\">demos - 课堂练习的操作指导</a></li>\n</ul>\n</li>\n</ul>\n<h2>目录</h2>\n<p><strong>第一讲：前端开发的历史和趋势</strong></p>\n<ol>\n<li>前端开发的历史演变</li>\n<li>前端 MVC 框架的兴起</li>\n<li>前后端分离</li>\n<li>全栈工程师</li>\n<li>前端开发的未来</li>\n</ol>\n<p><strong>第二讲：React 技术栈</strong></p>\n<ol>\n<li>React 的基本用法</li>\n<li>React 应用的架构</li>\n</ol>\n<p><strong>第三讲：Node 应用开发</strong></p>\n<ol>\n<li>Node 的基本用法</li>\n<li>Restful API</li>\n<li>Express 框架搭建 Web 应用</li>\n</ol>\n<p><strong>第四讲：前端工程简介</strong></p>\n<ol>\n<li>持续集成</li>\n<li>静态代码检查</li>\n<li>单元测试</li>\n<li>功能测试</li>\n<li>持续集成服务 Travis CI</li>\n</ol>\n<h2>前端开发的历史和趋势</h2>\n<blockquote>\n<p>前端是针对浏览器的开发，代码运行在浏览器</p>\n</blockquote>\n<h3>前后端不分的时代</h3>\n<p>互联网发展的早期，前后端开发是一体的，前端代码是后端代码的一部分。</p>\n<p>前端被称为页面仔，实际上是模板工程师，负责编写页面模板。</p>\n<p>后端采用 MVC 方式开发，前端所控制的的不完全 View 层由后端读取，使用模板方式，动态渲染。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/laravel-mvc.png\"><img src=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/laravel-mvc.png\" alt=\"MVC\" style=\"max-width:100%;\"></a></p>\n<h4><a href=\"https://zh.wikipedia.org/zh-cn/AJAX\" rel=\"nofollow\">Ajax</a></h4>\n<p>Ajax 技术诞生，改变了一切。</p>\n<p>20世纪90年代，几乎所有的网站都由HTML页面实现，服务器处理每一个用户请求都需要重新加载网页。</p>\n<p>Ajax 的最大优点，就是能在不更新整个页面的前提下异步维护数据。</p>\n<p>许多事件使得Ajax被大众所接受：</p>\n<ul>\n<li>2004年：Gmail</li>\n<li>2005年：Google 地图</li>\n</ul>\n<p>前端不再是后端的模板，可以独立得到各种数据。</p>\n<h4><a href=\"https://zh.wikipedia.org/zh-cn/Web_2.0\" rel=\"nofollow\">Web 2.0</a></h4>\n<p>Ajax 技术促成了 Web 2.0 的诞生。</p>\n<ul>\n<li>Web 1.0：静态网页，纯内容展示</li>\n<li>Web 2.0：动态网页，富交互，前端数据处理</li>\n</ul>\n<p>从那时起，前端变得复杂了，对前端工程师的要求越来越高。</p>\n<p>产品例子:</p>\n<ul>\n<li>全球： 维基百科, Twitter, Facebook, YouTube</li>\n<li>中国： 豆瓣网，百度贴吧, 新浪微博,优酷网, QQ群</li>\n</ul>\n<h3>前后端分离</h3>\n<ul>\n<li>Ajax -&gt; 前端应用兴起</li>\n<li>智能手机 -&gt; 多终端支持<br>\n这两个原因，导致前端开发方式发生根本的变化。</li>\n</ul>\n<p>前端不再是后端 MVC 中的 V，而是单独的一层。</p>\n<p><strong>REST 接口</strong></p>\n<p>前后端分离以后，它们之间通过接口通信。</p>\n<p>后端暴露出接口，前端消费后端提供的数据。</p>\n<p>后端接口一般是 REST 形式，前后端的通信协议一般是 HTTP。</p>\n<h4>前端 MVC 框架</h4>\n<p>前端通过 Ajax 得到数据，因此也有了处理数据的需求。</p>\n<p>前端代码变得也需要保存数据、处理数据、生成视图，这导致了前<br>\n端 MVC 框架的诞生</p>\n<p><strong>Backbone.js</strong></p>\n<blockquote>\n<p>2010 年</p>\n</blockquote>\n<p>Backbone 将前端代码分成两个基本部分。</p>\n<ul>\n<li>Model：管理数据</li>\n<li>View：数据的展现</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/backbone-model-view.png\"><img src=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/backbone-model-view.png\" alt=\"img\" style=\"max-width:100%;\"></a></p>\n<p>Backbone  只有 M 和 V，没有 C。因为，前端 Controller 与后端不同。</p>\n<ul>\n<li>不需要，也不应该处理业务逻辑</li>\n<li>只需要处理 UI 逻辑，响应用户的一举一动</li>\n</ul>\n<p>所以，前端 Controller 相对比较简单。Backbone 没有 C，只用事件来处理 UI 逻辑。</p>\n<h3>MVVM 模式</h3>\n<p>另一些框架提出 MVVM 模式，用 View Model 代替 Controller。</p>\n<ul>\n<li>Model</li>\n<li>View</li>\n<li>View-Model：简化的 Controller，唯一作用就是为 View 提供处理好的数据，不含其他逻辑。</li>\n</ul>\n<p>本质：view 绑定 view-model，视图与数据模型强耦合。数据的变化实时反映在 view 上，不需要手动处理。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/mvvm.png\"><img src=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/mvvm.png\" alt=\"\" style=\"max-width:100%;\"></a></p>\n<p><strong>Angular</strong></p>\n<p>Google 公司推出的 Angular 是最流行的 MVVM 前端框架。</p>\n<p>它的风格属于 HTML 语言的增强，核心概念是双向绑定。</p>\n<p><strong>Vue</strong></p>\n<p>Vue.js 是现在很热门的一种前端 MVVM 框架。</p>\n<p>它的基本思想与 Angular 类似，但是用法更简单，而且引入了响应式编程的概念。</p>\n<h3>SPA</h3>\n<blockquote>\n<p>SPA = Single-page application</p>\n</blockquote>\n<p>单页面应用，就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。</p>\n<p>2010年后，前端工程师从开发页面，变成了开发“前端应用”（跑在浏览器里面的应用程序）。</p>\n<h3>Node</h3>\n<p>2009年，Node 项目诞生，它是服务器上的 JavaScript 运行环境。</p>\n<p>Node = JavaScript + 操作系统 API</p>\n<p><strong>意义</strong></p>\n<ul>\n<li>JavaScript 成为服务器脚本语言，与 Python 和 Ruby 一样</li>\n<li>JavaScript 成为唯一的浏览器和服务器都支持的语言</li>\n<li>前端工程师可以编写后端程序了</li>\n</ul>\n<h3>前端开发模式的根本改变</h3>\n<ul>\n<li>Node 环境下开发</li>\n<li>大量使用服务器端工具</li>\n<li>引入持续集成等软件工程的标准流程</li>\n<li>开发完成后，编译成浏览器可以运行的脚本，放上 CDN</li>\n</ul>\n<h3>全栈工程师</h3>\n<p>前端工程师正在转变为全栈工程师</p>\n<ul>\n<li>一个人负责开发前端和后端</li>\n<li>从数据库到 UI 的所有开发</li>\n</ul>\n<p><strong>全栈技能</strong></p>\n<p>怎样才能称为全栈工程师？</p>\n<ul>\n<li>传统前端技能：HTML、JavaScript、CSS</li>\n<li>一门后端语言</li>\n<li>移动端开发：iOS / Android / HTML5</li>\n<li>其他技能：数据库、HTTP 等等</li>\n</ul>\n<h3>软件行业的发展动力</h3>\n<p>历史演变：前后端不分 -&gt; 前后端分离 -&gt; 全栈工程师</p>\n<p>动力：更加产业化、大规模地生产软件</p>\n<ul>\n<li>效率更高</li>\n<li>成本更低</li>\n<li>通用性好、能够快速产出的技术最终会赢，单个程序员的生产力要求越来越高。</li>\n</ul>\n<p><strong>H5 就是一个最好的例子</strong></p>\n<p>为什么 H5 技术会赢得移动端？</p>\n<ul>\n<li>开发速度快：Native 需要重新编译才能看到结果，H5 是即时输出</li>\n<li>开发成本低：Native 需要两个开发团队，H5 只要一个</li>\n<li>快速发布：安卓 Native 新版本需要24小时，iOS 需要 3 ～ 4 天，H5 可以随时更新</li>\n</ul>\n<h3>前端开发的未来</h3>\n<p><strong>软件的特点</strong></p>\n<ul>\n<li>联网</li>\n<li>高并发</li>\n<li>分布式</li>\n<li>跨终端</li>\n</ul>\n<p>现在基于 Web 的前端技术，将演变为未来所有软件的通用的 GUI（图形使用界面） 解决方案。</p>\n<p><strong>只有两种软件工程师</strong></p>\n<ul>\n<li>端工程师\n<ul>\n<li>手机端</li>\n<li>PC 端</li>\n<li>TV 端</li>\n<li>VR 端</li>\n<li>……</li>\n</ul>\n</li>\n<li>云工程师</li>\n</ul>\n<h2>React 技术栈</h2>\n<p>Facebook 公司2013年推出，现在最好的社区支持和生态圈，大量的第三方工具</p>\n<p><strong>React 的优点</strong></p>\n<ul>\n<li>组件模式：代码复用和团队分工</li>\n<li>虚拟 DOM：性能优势</li>\n<li>移动端支持：跨终端</li>\n</ul>\n<h3>React 的基本用法</h3>\n<ul>\n<li>JSX语法与Babel 转码器</li>\n<li>React 组件语法</li>\n<li>React 组件的参数（使用 Props 获取）</li>\n<li>React 组件的状态（使用<code>setState</code>更新受控组件的内部状态）</li>\n<li>React 组件实战（学写简单的 React 组件）</li>\n<li>React 组件的生命周期（Ajax使用）</li>\n<li>React 组件库（了解使用 <a href=\"https://react%C2%ADbootstrap.github.io/\" rel=\"nofollow\">React­Bootstrap</a>，<a href=\"http://recharts.org/\" rel=\"nofollow\">ReCharts</a>)）</li>\n</ul>\n<h3>React 的核心思想</h3>\n<p>View 是 State 的输出。</p>\n<p><code>view = f(state)</code></p>\n<p>上式中，f表示函数关系。只要 State 发生变化，View 也要随之变化。</p>\n<p>React 的本质是将图形界面（GUI）函数化。</p>\n<h3>React 没有解决的问题</h3>\n<p>React 本身只是一个 DOM 的抽象层，使用组件构建虚拟 DOM。</p>\n<p>如果开发大应用，还需要解决两个问题。</p>\n<ul>\n<li>架构：大型应用程序应该如何组织代码？</li>\n<li>通信：组件之间如何通信？</li>\n</ul>\n<h3>React 应用的架构</h3>\n<p>React 架构的最重要作用：管理 Store 与 View 之间的关系。</p>\n<p>Facebook 提出 Flux 架构的概念，被认为是 React 应用的标准架构。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/flow.png\"><img src=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/flow.png\" alt=\"\" style=\"max-width:100%;\"></a></p>\n<p>最大特点：数据单向流动。与 MVVM 的数据双向绑定，形成鲜明对比。</p>\n<p>目前最流行的两个 React 架构</p>\n<ul>\n<li>MobX：采用观察者模式，自动响应数据变化，state 是可变对象，适合中小型项目</li>\n<li>Redux：Flux 的函数式实现，state 是不可变对象，适合大型项目</li>\n</ul>\n<h4>MobX 架构</h4>\n<p>MobX 的核心概念，就是组件是观察者，一旦  Store  有变化，会立<br>\n刻被组件观察到，从而引发重新渲染。</p>\n<div class=\"highlight highlight-source-js\"><pre>@observer\n<span class=\"pl-k\">class</span> App <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> ...</span>\n  }\n}</pre></div>\n<p>UI 层是观察者，Store 是被观察者。</p>\n<p>Store 所有的属性，分成两大类：直接被观察的属性和自动计算出来<br>\n的属性。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> Store {\n  @observable name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Bartek<span class=\"pl-pds\">'</span></span>;\n  @computed get <span class=\"pl-en\">decorated</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span><span class=\"pl-pse\">}</span></span> is awesome!<span class=\"pl-pds\">`</span></span>;\n  }\n}</pre></div>\n<p>UI 会观察到 Store 的变化，自动重新渲染。</p>\n<h4>Redux 架构</h4>\n<p>Redux 的核心概念</p>\n<ul>\n<li>所有的状态存放在Store。组件每次重新渲染，都必须由状态变化引起。<br>\n用户在 UI 上发出action。</li>\n<li>reducer函数接收action，然后根据当前的state，计算出新的state。</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/redux-architecture.png\"><img src=\"https://github.com/ruanyf/jstraining/raw/master/docs/images/redux-architecture.png\" alt=\"img\" style=\"max-width:100%;\"></a></p>\n<h2>Node 开发</h2>\n<p>Node 是服务器的 JavaScript 运行环境，提供 API 与操作系统互动。</p>\n<p>主要用途：</p>\n<ul>\n<li>开发前端应用</li>\n<li>快速搭建服务</li>\n<li>架设网站</li>\n</ul>\n<h3>Node 的基本用法</h3>\n<p><strong>npm</strong></p>\n<p>安装 Node 的时候，会同时安装 npm。</p>\n<p><code>$ npm -v</code></p>\n<p>它是 Node 的模块管理器，开发 Node 项目的必备工具。</p>\n<p><strong>Node 开发前端脚本的好处</strong></p>\n<p>1. 模块机制</p>\n<p>2. 版本管理</p>\n<p>3. 对外发布</p>\n<p>4. 持续集成的标准开发流程</p>\n<h3>Restful API</h3>\n<p>REST 是浏览器与服务器通信方式的一种设计风格。</p>\n<p>它的全称是“REpresentational State Transfer”，中文意为“表现层状态转换”。</p>\n<ul>\n<li>Resource：资源</li>\n<li>Representation：表现层</li>\n<li>State：状态</li>\n<li>Transfer：转换</li>\n</ul>\n<p><strong>核心概念</strong></p>\n<ul>\n<li>互联网上所有可以访问的内容，都是资源。</li>\n<li>服务器保存资源，客户端请求资源。</li>\n<li>同一个资源，有多种表现形式。</li>\n<li>协议本身不带有状态，通信时客户端必须通过参数，表示请求不同状态的资源。</li>\n<li>状态转换通过HTTP动词表示。</li>\n</ul>\n<p><strong>HTTP 动词</strong></p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>SQL方法</th>\n<th>HTTP动词</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CREATE</td>\n<td>INSERT</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>READ</td>\n<td>SELECT</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>UPDATE</td>\n<td>PUT/PATCH</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>DELETE</td>\n<td>DELETE</td>\n</tr>\n</tbody>\n</table>\n<div class=\"highlight highlight-source-shell\"><pre>POST /v1/stores\nGET /v1/stores/1234\nPUT /v1/stores/1234\nDELETE /v1/stores/1234</pre></div>\n<h3>Express 框架搭建 Web 应用</h3>\n<p><strong>动态端口设定</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> express    <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>express<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> app        <span class=\"pl-k\">=</span> <span class=\"pl-en\">express</span>();\n<span class=\"pl-k\">var</span> port <span class=\"pl-k\">=</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-smi\">env</span>.<span class=\"pl-c1\">PORT</span> <span class=\"pl-k\">||</span> <span class=\"pl-c1\">8080</span>;\n\n<span class=\"pl-k\">var</span> router <span class=\"pl-k\">=</span> <span class=\"pl-smi\">express</span>.<span class=\"pl-en\">Router</span>();\n\n<span class=\"pl-smi\">router</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">req</span>, <span class=\"pl-smi\">res</span>) {\n  <span class=\"pl-smi\">res</span>.<span class=\"pl-c1\">send</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>&lt;h1&gt;Hello World&lt;/h1&gt;<span class=\"pl-pds\">'</span></span>);\n});\n\n<span class=\"pl-smi\">app</span>.<span class=\"pl-en\">use</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/home<span class=\"pl-pds\">'</span></span>, router);\n<span class=\"pl-smi\">app</span>.<span class=\"pl-en\">listen</span>(port);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Magic happens on port <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> port);</pre></div>\n<p>上面代码指定了外部访问的端口，如果环境变量没有指定，则端口默认为8080。最后两行是启动应用，并输出一行提示文字。</p>\n<p>通过环境变量，自定义启动端口。</p>\n<p>假定我们指定必须启动在7070端口，命令行可以这样操作。</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Linux &amp; Mac</span>\n$ PORT=7070 node app1.js\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> windows cmd / (git cmd)</span>\n$ <span class=\"pl-c1\">set</span> PORT=7070\n$ node app1.js\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> windows powershell</span>\n$ <span class=\"pl-smi\">$env</span>:PORT=7070\n$ node app1.js</pre></div>\n<p><strong>传递参数的方式</strong></p>\n<ol>\n<li>路由路径传参，浏览器访问<code>localhost:8080/home/张三</code>，输出<code>Hello 张三</code>。</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">router</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/:name<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">req</span>, <span class=\"pl-smi\">res</span>) {\n  <span class=\"pl-smi\">res</span>.<span class=\"pl-c1\">send</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;h1&gt;Hello <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">req</span>.<span class=\"pl-smi\">params</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;/h1&gt;<span class=\"pl-pds\">\"</span></span>);\n});</pre></div>\n<ol start=\"2\">\n<li>Http POST 方法传参</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> bodyParser <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>body-parser<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-smi\">app</span>.<span class=\"pl-en\">use</span>(<span class=\"pl-smi\">bodyParser</span>.<span class=\"pl-en\">urlencoded</span>({ extended<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span> }));\n\n<span class=\"pl-smi\">router</span>.<span class=\"pl-en\">post</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">req</span>, <span class=\"pl-smi\">res</span>) {\n  <span class=\"pl-k\">var</span> name <span class=\"pl-k\">=</span> <span class=\"pl-smi\">req</span>.<span class=\"pl-c1\">body</span>.<span class=\"pl-c1\">name</span>;\n  <span class=\"pl-smi\">res</span>.<span class=\"pl-en\">json</span>({ message<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> name });\n});</pre></div>\n<p>使用 Postman  模拟发出 POST 请求：</p>\n<div class=\"highlight highlight-source-shell\"><pre>POST /home HTTP/1.1\nHost: 127.0.0.1:8080\nContent-Type: application/x-www-form-urlencoded\n\nname=Alice</pre></div>\n<ol start=\"3\">\n<li>浏览器地址添加 query 参数,访问 <code>http://localhost:8080/home?name=Rainbow</code>返回 <code>Hello Rainbow</code></li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">router</span>.<span class=\"pl-c1\">get</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">req</span>, <span class=\"pl-smi\">res</span>) {\n  <span class=\"pl-smi\">res</span>.<span class=\"pl-c1\">send</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;h1&gt;Hello <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">req</span>.<span class=\"pl-smi\">query</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;/h1&gt;<span class=\"pl-pds\">\"</span></span>);\n});</pre></div>\n<p><strong>中间件</strong></p>\n<p>对 HTTP 请求进行加工。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">router</span>.<span class=\"pl-en\">use</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">req</span>, <span class=\"pl-smi\">res</span>, <span class=\"pl-smi\">next</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>There is a requesting.<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-en\">next</span>();\n});</pre></div>\n<h2>前端工程 - 流程篇</h2>\n<h3>持续集成</h3>\n<p><strong>概念</strong></p>\n<p>Continuous integration（简称 CI）</p>\n<p>开发代码频繁地合并进主干，始终保持可发布状态的这个过程。</p>\n<p>优点</p>\n<ul>\n<li>快速发现错误</li>\n<li>防止分支大幅偏离主干</li>\n<li>让产品可以快速迭代，同时还能保持高质量</li>\n</ul>\n<h3>流程</h3>\n<p>前端开发转移到后端环境，意味着可以适用标准的软件工程流程。</p>\n<p>1. 本地开发（developing）</p>\n<p>2. 静态代码检查（linting）</p>\n<p>3. 单元测试（testing）</p>\n<p>4. 合并进入主干（merging）</p>\n<p>5. 自动构建（building）</p>\n<p>6. 自动发布（publishing）</p>\n<h3>静态代码检查工具</h3>\n<p>ESLint：</p>\n<ul>\n<li>发现语法错误</li>\n<li>发现风格错误</li>\n<li>自动纠正错误</li>\n</ul>\n<p>安装相关模块，设置代码检查的风格, 这里使用的是 Airbnb 公司的规则</p>\n<div class=\"highlight highlight-source-shell\"><pre>npm install eslint eslint-plugin-import eslint-config-airbnb-base --save-dev</pre></div>\n<p>项目更目录添加配置文件 <code>eslintrc.json</code>，指定检验规则</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>extends<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>airbnb-base<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p>项目的<code>package.json</code>文件</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-ii\">//</span> <span class=\"pl-ii\">...</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scripts<span class=\"pl-pds\">\"</span></span> : {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lint<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eslint **/*.js<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lint-html<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eslint **/*.js -f html -o ./reports/lint-results.html<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lint-fix<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eslint --fix **/*.js<span class=\"pl-pds\">\"</span></span>\n  },\n  <span class=\"pl-ii\">//</span> <span class=\"pl-ii\">...</span>\n}</pre></div>\n<p>上面代码新定义了三个脚本，运行方式 <code>npm run lint | yarn lint</code>, 它们的作用如下:</p>\n<ul>\n<li><code>lint</code>：检查所有js文件的代码</li>\n<li><code>lint-html</code>：将检查结果写入一个网页文件./reports/lint-results.html</li>\n<li><code>lint-fix</code>：自动修正某些不规范的代码</li>\n</ul>\n<h3>单元测试</h3>\n<p><strong>为什么写测试？</strong></p>\n<p>Web 应用越来越复杂，意味着更可能出错。测试是提高代码质量、降低错误的最好方法之一。</p>\n<ul>\n<li>测试可以确保得到预期结果。</li>\n<li>加快开发速度。</li>\n<li>方便维护。</li>\n<li>提供用法的文档。</li>\n<li>对于长期维护的项目，测试可以减少投入时间，减轻维护难度。</li>\n</ul>\n<p><strong>测试的类型</strong></p>\n<ul>\n<li>单元测试（unit testing）</li>\n<li>功能测试（feature testing）</li>\n<li>集成测试（integration testing）</li>\n<li>端对端测试 (End-to-End testing）</li>\n</ul>\n<p><strong>使用 Mocha 进行单元测试</strong></p>\n<blockquote>\n<p>test:  1 + 1 = 2</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/ruanyf/jstraining/tree/master/demos/mocha-demo\">mocha-demo</a></li>\n</ul>\n<p><strong>使用 Nightmare 进行功能测试</strong></p>\n<blockquote>\n<p>test: 首先打开网页，点击h1元素，然后等待 1 秒钟，判断获取h1元素的文本内容与期望值是否一致。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/ruanyf/jstraining/tree/master/demos/nightmare-demo\">nightmare-demo</a></li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">it</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>点击后标题改变<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">done</span>) {\n    <span class=\"pl-k\">var</span> nightmare <span class=\"pl-k\">=</span> <span class=\"pl-en\">Nightmare</span>({ show<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span> });\n    nightmare\n      .<span class=\"pl-en\">goto</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>http://127.0.0.1:8080/index.html<span class=\"pl-pds\">'</span></span>)\n      .<span class=\"pl-c1\">click</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>h1<span class=\"pl-pds\">'</span></span>)\n      .<span class=\"pl-en\">wait</span>(<span class=\"pl-c1\">1000</span>)\n      .<span class=\"pl-c1\">evaluate</span>(<span class=\"pl-k\">function</span> () {\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>h1<span class=\"pl-pds\">'</span></span>).<span class=\"pl-smi\">textContent</span>;\n      })\n      .<span class=\"pl-en\">end</span>()\n      .<span class=\"pl-c1\">then</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">text</span>) {\n        <span class=\"pl-en\">expect</span>(text).<span class=\"pl-smi\">to</span>.<span class=\"pl-en\">equal</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello Clicked<span class=\"pl-pds\">'</span></span>);\n        <span class=\"pl-en\">done</span>();\n      })\n  });</pre></div>\n<h3>持续集成服务平台</h3>\n<p>代码合并进主干以后，就可以进行自动构建和发布了。</p>\n<p>Travis CI 提供持续集成服务。它可以根据你提供的脚本，自动完成构建和发布。</p>\n<p>添加<code>.travis.yml</code>配置文件,构建时默认依次执行以下九个脚本。</p>\n<ul>\n<li><code>before_install</code></li>\n<li><code>install</code></li>\n<li><code>before_script</code></li>\n<li><code>script</code></li>\n<li><code>after_success</code> 或者 <code>after_failure</code></li>\n<li><code>after_script</code></li>\n<li><code>before_deploy</code>（可选）</li>\n<li><code>deploy</code>（可选）</li>\n<li><code>after_deploy</code>（可选）</li>\n</ul>\n<p>在 before_install、before_script之前，或者after_script之后，都可以运行自定义命令，详细资料可参考官方文档：Job Lifecycle</p>\n<p>完整的配置文件</p>\n<div class=\"highlight highlight-source-shell\"><pre>language: node_js\nnode_js: stable\n\ncache:\n  directories:\n    - node_modules\n\ninstall:\n  - npm install\n\nscript:\n  - hexo g\n\nafter_script:\n  - <span class=\"pl-c1\">cd</span> ./public\n  - git init\n  - git config user.name <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>your-git-name<span class=\"pl-pds\">\"</span></span>\n  - git config user.email <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>your-email-address<span class=\"pl-pds\">\"</span></span>\n  - git add <span class=\"pl-c1\">.</span>\n  - git commit -m <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Update blog content by Travis CI<span class=\"pl-pds\">\"</span></span>\n  - git push --force --quiet <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://<span class=\"pl-smi\">${GH_TOKEN}</span>@<span class=\"pl-smi\">${GH_REF}</span><span class=\"pl-pds\">\"</span></span> master:master\n\nbranches:\n  only:\n    - master</pre></div>\n<h4>拓展链接</h4>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html\" rel=\"nofollow\">阮一峰 - 持续集成是什么？</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/10\" data-hovercard-type=\"issue\" data-hovercard-url=\"/fouber/blog/issues/10/hovercard\">前端工程——基础篇 </a></li>\n<li><a href=\"https://xirikm.net/2019/826-2\" rel=\"nofollow\">使用 Travis CI 实现 Hexo 博客自动部署</a></li>\n</ul>"
  },
  {
    "id": 101,
    "title": "2019前端工具调查-结果（译文）",
    "labels": "译文集",
    "created_at": "2019-11-16T04:15:02Z",
    "updated_at": "2019-12-21T15:35:14Z",
    "body_html": "<blockquote>\n<p>原文地址：<a href=\"https://ashleynolan.co.uk/blog/frontend-tooling-survey-2019-results\" rel=\"nofollow\">frontend-tooling-survey-2019-results</a></p>\n</blockquote>\n<p>到现在已经有一段时间了，但是 2019 年 前端工具调查的结果就在这里！</p>\n<p>今年，3005 名开发人员回答了 27 个问题，涉及范围广泛的前端工具和方法学。 像往常一样，我衷心感谢每一位花时间填写这封信的人。 组织和撰写这项调查今年特别具有挑战性，因为我们家又多了一个女婴(因此这些调查结果被推迟了!)。</p>\n<p>像往常一样，查看前端工具在过去 12 个月中发生了什么变化，看看我们的想法和观点是否得到业内其他开发人员的赞同，这是很有趣的。</p>\n<p>这些结果（希望）有助于洞悉前端工具的当前使用趋势和知识水平，并通过查看<a href=\"https://ashleynolan.co.uk/blog/frontend-tooling-survey-2018-results\" rel=\"nofollow\">先前调查的数据</a>来显示这些趋势随着时间的变化。</p>\n<h2>快速感谢</h2>\n<p>这项调查每年都要花费大量时间，而且得到了 Wes Bos (通过参与调查)和我的雇主 Just Eat 的支持。</p>\n<h2>结果</h2>\n<p>那么，让我们开始吧！ 自己拿一杯茶 / 咖啡 / 饮料，让我们来看看结果...</p>\n<h2>前言免责声明</h2>\n<p>这些结果代表了在该行业工作的前端开发人员的一个样本。 因此，他们不应该被当作福音书，仅仅指出一个粗略的趋势。</p>\n<h2>回应</h2>\n<p>如上所述，今年的调查收到了 3,005 份回复。与去年的调查（5,461 份）相比略有下降。</p>\n<p>我发现今年宣传这个调查有点困难，可能是因为网络开发调查的数量在不断增加，但也可能是因为我可以花费大量的个人时间来宣传这个词。 综合考虑，超过 3000 个回复仍然是难以置信的。</p>\n<p>至于今年的回复来自哪里，该调查的链接发布在 Twitter、 Reddit、 HackerNews、 designnernews、 Echo.js、 LinkedIn 和 Frontendfront 上。许多新闻通讯（包括 FrontEnd Focus 和 CSS Weekly 等）也有用到。</p>\n<p>在可能的情况下，您会看到我已将 2018 年调查的百分比变化与今年的数字一起包括在内。</p>\n<h2>问题索引</h2>\n<ol>\n<li><a href=\"#Q1---%E4%B8%80%E8%88%AC%E5%89%8D%E7%AB%AF%E7%BB%8F%E9%AA%8C\">一般前端经验</a></li>\n<li><a href=\"#Q2---CSS-%E7%9F%A5%E8%AF%86%E6%B0%B4%E5%B9%B3\">CSS 知识水平</a></li>\n<li><a href=\"#Q3---%E4%BD%BF%E7%94%A8-CSS-%E5%A4%84%E7%90%86%E5%99%A8\">使用 CSS 处理器</a></li>\n<li><a href=\"#Q4---CSS-%E5%A4%84%E7%90%86%E5%99%A8%E7%BB%8F%E9%AA%8C\">CSS 处理器经验</a></li>\n<li><a href=\"#Q5---%E4%BD%BF%E7%94%A8-CSS-%E6%A1%86%E6%9E%B6\">使用 CSS 框架</a></li>\n<li><a href=\"#Q6---CSS-%E5%91%BD%E5%90%8D%E6%A8%A1%E5%BC%8F\">CSS 命名模式</a></li>\n<li><a href=\"#Q7---CSS-Linting\">CSS Linting</a></li>\n<li><a href=\"#Q8---CSS-%E5%B7%A5%E5%85%B7%E4%BD%93%E9%AA%8C\">CSS 工具体验</a></li>\n<li><a href=\"#Q9---CSS-%E6%96%B9%E6%B3%95%E5%92%8C%E5%91%BD%E5%90%8D%E4%BD%93%E9%AA%8C\">Css 方法和命名体验</a></li>\n<li><a href=\"#Q10---%E4%BD%BF%E7%94%A8-CSS-%E5%B7%A5%E5%85%B7\">使用 CSS 工具</a></li>\n<li><a href=\"#Q11---CSS-in-JS-%E7%94%A8%E6%B3%95\">CSS-in-JS 用法</a></li>\n<li><a href=\"#Q12---%E4%BD%BF%E7%94%A8-CSS-%E5%8A%9F%E8%83%BD\">使用 CSS 功能</a></li>\n<li><a href=\"#Q13---JavaScript-%E7%9F%A5%E8%AF%86%E6%B0%B4%E5%B9%B3\">JavaScript 知识水平</a></li>\n<li><a href=\"#Q14---%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E8%80%85\">任务执行者</a></li>\n<li><a href=\"#Q15---%E4%BA%86%E8%A7%A3-JavaScript-%E5%BA%93%E5%92%8C%E6%A1%86%E6%9E%B6\">了解 JavaScript 库和框架</a></li>\n<li><a href=\"#Q16---%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84-JS-%E6%A1%86%E6%9E%B6-/-%E5%BA%93\">最常用的 JS 框架 / 库</a></li>\n<li><a href=\"#Q17---%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84-JS-%E6%A1%86%E6%9E%B6-/-%E5%BA%93\">最基本的 JS 框架 / 库</a></li>\n<li><a href=\"#Q18---%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8\">模块打包器的使用</a></li>\n<li><a href=\"#Q19---%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85%E5%99%A8%E5%92%8C%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E7%BB%8F%E9%AA%8C\">模块打包器和任务管理器的经验</a></li>\n<li><a href=\"#Q20---JavaScript-%E8%BD%AC%E6%8D%A2%E5%99%A8\">JavaScript 转换器</a></li>\n<li><a href=\"#Q21---JavaScript-%E6%89%A9%E5%B1%95%E8%AF%AD%E8%A8%80\">JavaScript 扩展语言</a></li>\n<li><a href=\"#Q22---JavaScript-%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5\">JavaScript 静态代码检查</a></li>\n<li><a href=\"#Q23---JavaScript-%E6%B5%8B%E8%AF%95\">JavaScript 测试</a></li>\n<li><a href=\"#Q24---%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7%E5%8F%8A%E7%89%B9%E7%82%B9\">性能工具及特点</a></li>\n<li><a href=\"#Q25---%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7\">辅助工具</a></li>\n<li><a href=\"#Q26---JavaScript-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8\">JavaScript 包管理器</a></li>\n<li><a href=\"#Q27---%E6%9D%82%E9%A1%B9%E5%B7%A5%E5%85%B7\">杂项工具</a></li>\n</ol>\n<h2>Q1 - 一般前端经验</h2>\n<p>调查的第一个问题是用来找出每个受访者的前端经验的数量。</p>\n<p>问题是-大概有多长时间，你一直与前端技术？</p>\n<p>以下是调查结果:</p>\n<table>\n<thead>\n<tr>\n<th>回答</th>\n<th>投票数</th>\n<th>百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0-1 年</td>\n<td>91</td>\n<td>3.03%</td>\n</tr>\n<tr>\n<td>1-2 年</td>\n<td>279</td>\n<td>9.28%</td>\n</tr>\n<tr>\n<td>2-5 年</td>\n<td>859</td>\n<td>28.59%</td>\n</tr>\n<tr>\n<td>5-10 年</td>\n<td>860</td>\n<td>28.62%</td>\n</tr>\n<tr>\n<td>10-15 年</td>\n<td>503</td>\n<td>16.74%</td>\n</tr>\n<tr>\n<td>超过 15 年</td>\n<td>413</td>\n<td>13.74%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/fa57493d809ec9cf65897af8e27e07e0aa94595c/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71312e6a7067\"><img src=\"https://camo.githubusercontent.com/fa57493d809ec9cf65897af8e27e07e0aa94595c/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71312e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q1.jpg\" style=\"max-width:100%;\"></a></p>\n<p>59.1% 的受访者从事前端技术工作超过 5 年。 这比去年(54.18%)略有上升，所以今年的受访者对前端技术有更多的经验。 然而，值得注意的是，这可能部分是由于一些参与了去年调查的受访者，现在(自然)将有更多的经验。</p>\n<p>只有 12.31% 的受访者表示他们的工作经验少于两年。</p>\n<p>与以前的调查一样，绝大多数调查对象在前端技术方面具有相当高的经验。 在考虑其他调查结果时，这一点是值得考虑的。</p>\n<h2>Q2 - CSS 知识水平</h2>\n<p>第二个问题是看受访者如何评价他们自己对 CSS 的知识，问: 你如何评价你自己对 CSS 及其相关工具和方法的知识？</p>\n<p>以下是他们的回答:</p>\n<table>\n<thead>\n<tr>\n<th>水平</th>\n<th>投票数</th>\n<th>百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初学者</td>\n<td>35</td>\n<td>1.16%</td>\n</tr>\n<tr>\n<td>初学者(初级和中级之间)</td>\n<td>243</td>\n<td>8.09%</td>\n</tr>\n<tr>\n<td>中级</td>\n<td>815</td>\n<td>27.12%</td>\n</tr>\n<tr>\n<td>高级(介于中级和专家之间)</td>\n<td>1452</td>\n<td>48.32%</td>\n</tr>\n<tr>\n<td>专家</td>\n<td>460</td>\n<td>15.31%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/6c9eec32aedb2f9f2dd48a5f29ec00b46cc445c8/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71322e6a7067\"><img src=\"https://camo.githubusercontent.com/6c9eec32aedb2f9f2dd48a5f29ec00b46cc445c8/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71322e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q2.jpg\" style=\"max-width:100%;\"></a></p>\n<p>90.75% 的受访者表示，他们对社会服务方面的知识处于中等或以上水平，大多数(63.63%)认为自己是高级或专家。</p>\n<p>正如我每年提到的，任何关于广泛知识水平的问题，这是非常主观的答复。 一个人对于如何成为 CSS 专家的想法可能与另一个人的想法有很大的不同。</p>\n<p>尽管如此，能够将这些知识水平与调查中其他问题的结果进行过滤是很有用的——例如，看看经验更丰富的开发人员是否更喜欢某些工具，而不是那些初学者可能使用的工具。 在以后的问题中，我将在适当的地方回顾这些结果。</p>\n<h2>Q3 - 使用 CSS 处理器</h2>\n<p>我们关于 CSS 工具的第一个问题是关于 CSS 处理工具的。</p>\n<p>在前几年，这个问题要求受访者选择他们喜欢的 CSS 预处理工具。 今年，这个问题稍微改变了一下，允许受访者选择多个工具，问哪个是你经常使用的 CSS 处理器？</p>\n<p>自 2016 年调查开始以来，Sass 一直是这个领域的主要工具，那么今年有什么变化吗？</p>\n<p>注意: 我已经将这些数据与去年的数据进行了比较，但重要的是要考虑到受访者现在可以选择多个答案，而不仅仅是一个。 因此，结果很可能显示，所有工具的使用率至少有小幅上升。</p>\n<table>\n<thead>\n<tr>\n<th>预处理器</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>差异百分比（至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sass</td>\n<td>2,322</td>\n<td>77.27%</td>\n<td>+11.88% + 11.88%</td>\n</tr>\n<tr>\n<td>PostCSS</td>\n<td>863</td>\n<td>28.72%</td>\n<td>+20.06% + 20.06%</td>\n</tr>\n<tr>\n<td>Less</td>\n<td>422</td>\n<td>14.04%</td>\n<td>+7.52% + 7.52%</td>\n</tr>\n<tr>\n<td>没有预处理器</td>\n<td>395</td>\n<td>13.14%</td>\n<td>-1.44% - 1.44%</td>\n</tr>\n<tr>\n<td>Stylus</td>\n<td>98</td>\n<td>3.26%</td>\n<td>+1.08% + 1.08%</td>\n</tr>\n<tr>\n<td>Other</td>\n<td>80</td>\n<td>2.66%</td>\n<td>-0.01% - 0.01%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/e0d16a62fa22e2b274f42653f48458d36e79b22e/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71332e6a7067\"><img src=\"https://camo.githubusercontent.com/e0d16a62fa22e2b274f42653f48458d36e79b22e/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71332e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q3.jpg\" style=\"max-width:100%;\"></a></p>\n<p>和前几年一样，Sass 仍然是开发人员使用的主要 CSS 处理工具，77.27% 的受访者表示他们使用了它。</p>\n<p>有趣的是，PostCSS 现在是第二常用的工具，有 28.72% 的受访者使用它。 受访者现在可以选择多种工具，这显然有助于更准确地表示 PostCSS 的使用情况，除了使用像 Sass 这样的工具之外，还经常使用 PostCSS。</p>\n<h2>Q4 - CSS 处理器经验</h2>\n<p>下一个问题是继上一个问题之后的又一个问题，受访者被要求说明他们在 CSS 处理工具方面的经验水平。</p>\n<p>以下是调查结果:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>从没听说过</th>\n<th>听说过 / 了解过</th>\n<th>用了一点</th>\n<th>使用时感觉舒适</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sass 或 SCSS 语法</td>\n<td>0.33% (10)</td>\n<td>6.82% (205)</td>\n<td>15.34% (461)</td>\n<td>77.50% (2,329)</td>\n</tr>\n<tr>\n<td>Less</td>\n<td>1.40% (42))</td>\n<td>35.81% (1,076)</td>\n<td>35.34% (1,062)</td>\n<td>27.45% (825)</td>\n</tr>\n<tr>\n<td>Stylus</td>\n<td>21.06% (633)</td>\n<td>61.93% (1,861)</td>\n<td>11.35% (341)</td>\n<td>5.66% (170)</td>\n</tr>\n<tr>\n<td>PostCSS</td>\n<td>15.44% (464)</td>\n<td>41.30% (1,241)</td>\n<td>22.73% (683)</td>\n<td>20.53% (617)</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/2df8e50f4d9e0e1661bfb34a008917db769ea449/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71342e6a7067\"><img src=\"https://camo.githubusercontent.com/2df8e50f4d9e0e1661bfb34a008917db769ea449/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71342e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q4.jpg\" style=\"max-width:100%;\"></a></p>\n<p>这些结果与前一个问题的结果一致，超过四分之三的受访者(77.50%)说他们觉得使用 Sass 很舒服，而只有 7.15% 的人说他们从未使用过 Sass。</p>\n<p>PostCSS 知识水平相对于去年的结果有所提高，因为 20.53％的受访者表示他们对使用该工具感到满意。</p>\n<p>与去年的结果相比，Less 和 Stylus 的知识水平看起来相当停滞。</p>\n<p>从问题 3 和 4 的结果来看，很明显 Sass 仍然是 CSS 处理的主要工具。</p>\n<h2>Q5 - 使用 CSS 框架</h2>\n<p>下一个问题是关于 CSS 框架的使用情况，回答者要求说明下列哪个 CSS 框架是您在项目中使用最频繁的(如果有的话)。</p>\n<p>去年我们看到 Bootstrap 在这个领域处于领先地位，但是 12 个月过去了，情况有所改变吗？</p>\n<p>让我们来看看结果:</p>\n<table>\n<thead>\n<tr>\n<th>回答</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>差异百分比（至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>没有框架</td>\n<td>1,054</td>\n<td>35.07%</td>\n<td>+2.15% + 2.15%</td>\n</tr>\n<tr>\n<td>Bootstrap</td>\n<td>840</td>\n<td>27.95%</td>\n<td>-7.01% - 7.01%</td>\n</tr>\n<tr>\n<td>自定义框架</td>\n<td>497</td>\n<td>16.54%</td>\n<td>+1.29% + 1.29%</td>\n</tr>\n<tr>\n<td>Tailwind CSS</td>\n<td>129</td>\n<td>4.29%</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>Bulma</td>\n<td>96</td>\n<td>3.19%</td>\n<td>+0.75% + 0.75%</td>\n</tr>\n<tr>\n<td>Foundation</td>\n<td>79</td>\n<td>2.63%</td>\n<td>-1.31% - 1.31%</td>\n</tr>\n<tr>\n<td>Materialize</td>\n<td>72</td>\n<td>2.40%</td>\n<td>-0.24% - 0.24%</td>\n</tr>\n<tr>\n<td>Semantic UI</td>\n<td>63</td>\n<td>2.10%</td>\n<td>+0.16% + 0.16%</td>\n</tr>\n<tr>\n<td>Tachyons</td>\n<td>25</td>\n<td>0.83%</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>PureCSS</td>\n<td>18</td>\n<td>0.60%</td>\n<td>-0.10% - 0.10%</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>132</td>\n<td>4.39%</td>\n<td>-0.83% - 0.83%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/8bf1fb61bb6d8ad433f98fbd401048a426c92f22/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71352e6a7067\"><img src=\"https://camo.githubusercontent.com/8bf1fb61bb6d8ad433f98fbd401048a426c92f22/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71352e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q5.jpg\" style=\"max-width:100%;\"></a></p>\n<p>与去年的结果相比，最流行的答案——只有三分之一多一点(35.07%)——是来自那些声称他们没有使用任何框架的开发人员。</p>\n<p>虽然不再是这个问题的首选，Bootstrap 仍然是最流行的 CSS 框架，有 27.95% 的受访者使用它。 与去年相比，下降了 7.01% 。</p>\n<p>在 Bootstrap 之后，第二流行的 CSS 框架是 Tailwind CSS。</p>\n<p>与去年的结果显示了类似的趋势，当观察 CSS 框架对 CSS 知识水平的使用时，有一个明显的区别。 例如，声称自己是初学者或初学者级别的开发人员比声称自己是高级或专家级别开发人员的开发人员更有可能使用 Bootstrap (43.17%)。</p>\n<p>在研究自定义 CSS 框架的使用时，还发现了知识水平之间的明显差异(但可以说是预料到的)。 总体而言，16.54% 的受访者表示他们使用了定制框架。 在调查那些声称自己是 CSS 初学者或初学者的受访者时，这一比例下降到了 8.63% ，而在调查拥有 CSS 高级或专家知识的开发者时，这一比例上升到了 20.35% 。</p>\n<p>不过总体而言，与去年的结果相比，现成的 CSS 框架的使用似乎略有下降。</p>\n<h2>Q6 - CSS 命名模式</h2>\n<p>调查中的下一个问题是: 你在编写 CSS 时使用 CSS 命名方案吗? 比如 BEM 或者 SUIT？</p>\n<p>答复如下:</p>\n<table>\n<thead>\n<tr>\n<th>回答</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>差异百分比（至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是的</td>\n<td>1,565</td>\n<td>52.08%</td>\n<td>+3.15% + 3.15%</td>\n</tr>\n<tr>\n<td>没有-我听说过 CSS 命名方案，但没有使用</td>\n<td>1,153</td>\n<td>38.37%</td>\n<td>-0.76% - 0.76%</td>\n</tr>\n<tr>\n<td>没有-我从来没有听说过 CSS 命名方案</td>\n<td>287</td>\n<td>9.55%</td>\n<td>-2.39% - 2.39%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/d755d47c4586604becf8d1030712c39a70ccf6c8/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71362e6a7067\"><img src=\"https://camo.githubusercontent.com/d755d47c4586604becf8d1030712c39a70ccf6c8/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71362e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q6.jpg\" style=\"max-width:100%;\"></a></p>\n<p>自从 2016 年调查开始询问开发者关于 CSS 命名方案以来，大多数人(52.08%)回答说他们使用了 CSS 命名方案，比去年的结果增加了 3.15% 。</p>\n<p>从未听说过 CSS 命名方案的开发人员也下降到了 9.55% ，比去年同期下降了 2.39% 。</p>\n<p>从这些结果可以清楚地看出，这个工具领域的使用水平仍在上升，目前少数开发人员没有使用 CSS 命名方案。</p>\n<h2>Q7 - CSS Linting</h2>\n<p>自从我们在 2016 年开始询问受访者关于这个主题的意见以来，CSS Linting 的使用量一直在逐渐增加。</p>\n<p>去年，大多数开发人员(50.56%)仍然选择不使用他们的 CSS 代码风格检查工具，所以看看一年后这种动态是否发生了变化是很有趣的。</p>\n<p>问题是——你用工具来格式化你的 CSS 吗？</p>\n<p>以下是调查结果:</p>\n<table>\n<thead>\n<tr>\n<th>回答</th>\n<th>投票数</th>\n<th>百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是的</td>\n<td>1,599</td>\n<td>53.21%</td>\n</tr>\n<tr>\n<td>不-我不 lint 我的 CSS</td>\n<td>1,406</td>\n<td>46.79% -3.77% - 3.77%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/b019feef9a77b966e08070700eeae78de0d27320/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71372e6a7067\"><img src=\"https://camo.githubusercontent.com/b019feef9a77b966e08070700eeae78de0d27320/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71372e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q7.jpg\" style=\"max-width:100%;\"></a></p>\n<p>与 CSS 命名方案一样，结果显示，大多数受访者(53.21%)首次选择 lint 他们的 CSS，比去年的调查结果相同的人数增加了 3.77% 。</p>\n<p>从结果中也可以清楚地看出，更高级的 CSS 开发人员更有可能 lint 他们的 CSS 嵌入其中。 只有 28.42% 的拥有初学者或初学者 CSS 知识的人说他们使用 CSS 连接器，而拥有高级 CSS 知识或更高级 CSS 知识的人只有 60.15% 。</p>\n<p>从结果中还可以清楚地看到，更高级的 CSS 开发人员更有可能 lint 他们的 CSS。初学者或新手 CSS 知识的人中只有 28.42％的人说他们使用 CSS linter，而具有高级 CSS 知识或更高水平的人中有 60.15％。</p>\n<p>随着 Stylelint 这样伟大的工具变得越来越广为人知(我们将在下一个问题中看到) ，CSS lint 在开发人员中稳步上升。</p>\n<h2>Q8 - CSS 工具体验</h2>\n<p>接下来的四个问题涉及许多不同的 CSS 方法和帮助工具的知识和使用级别。</p>\n<p>首先，问题 8 要求被调查者陈述他们使用 Autoprefixer、 Modernizr 和 Stylelint 的经验。</p>\n<p>结果如下:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>从没听说过</th>\n<th>听说过 / 了解过</th>\n<th>用了一点</th>\n<th>使用时感觉舒适</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Autoprefixer</td>\n<td>16.71% (502)</td>\n<td>15.17% (456)</td>\n<td>17.60% (529)</td>\n<td>50.52% (1,518)</td>\n</tr>\n<tr>\n<td>Modernizr</td>\n<td>12.51% (376)</td>\n<td>28.99% (871)</td>\n<td>34.48% (1,036)</td>\n<td>24.03% (722)</td>\n</tr>\n<tr>\n<td>Stylelint</td>\n<td>37.74% (1,134)</td>\n<td>24.86% (747)</td>\n<td>14.38% (432)</td>\n<td>23.03% (692)</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/9f8b89586f799221acdd4e91dad2e587f8752301/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71382e6a7067\"><img src=\"https://camo.githubusercontent.com/9f8b89586f799221acdd4e91dad2e587f8752301/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71382e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q8.jpg\" style=\"max-width:100%;\"></a></p>\n<p>在这三个工具中，Autoprefixer 是最著名的，有 50.52% 的开发者回复说他们觉得使用它很舒服。</p>\n<p>在过去的 12 个月中，Stylelint 知识水平增长最快，有 23.03% 的开发者现在对使用该工具感到满意——增长了 5.16% 。</p>\n<p>Modernizr 略有下降，表示从未听说过它的受访者数量有所上升，表示使用它感到舒适的受访者数量有所下降(下降了 3.49% ，降至 24.03%)。</p>\n<h2>Q9 - CSS 方法和命名体验</h2>\n<p>继上一个问题之后，调查对象被问到-请说明你使用以下 CSS 方法的经验。</p>\n<p>结果如下:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>从没听说过</th>\n<th>听说过 / 了解过</th>\n<th>用了一点</th>\n<th>使用时感觉舒适</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CSS-in-JS</td>\n<td>7.72% (232)</td>\n<td>39.43% (1,185)</td>\n<td>25.32% (761)</td>\n<td>27.52% (827</td>\n</tr>\n<tr>\n<td>SMACSS</td>\n<td>40.27% (1,210)</td>\n<td>39.13% (1,176)</td>\n<td>12.71% (382)</td>\n<td>7.89% (237)</td>\n</tr>\n<tr>\n<td>面向对象 CSS (OOCSS)</td>\n<td>30.22% (908)</td>\n<td>47.29% (1,421)</td>\n<td>14.18% (426)</td>\n<td>8.32% (250)</td>\n</tr>\n<tr>\n<td>Atomic Design</td>\n<td>27.99% (841)</td>\n<td>40.60% (1,220)</td>\n<td>16.87% (507)</td>\n<td>14.54% (437)</td>\n</tr>\n<tr>\n<td>ITCSS</td>\n<td>63.89% (1,920)</td>\n<td>24.29% (730)</td>\n<td>5.56% (167)</td>\n<td>6.26% (188)</td>\n</tr>\n<tr>\n<td>BEM</td>\n<td>13.48% (405)</td>\n<td>22.16% (666)</td>\n<td>20.83% (626)</td>\n<td>43.53% (1,308)</td>\n</tr>\n<tr>\n<td>SUIT CSS</td>\n<td>68.92% (2,071)</td>\n<td>24.96% (750)</td>\n<td>3.73% (112)</td>\n<td>2.40% (72)</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/f732e8cd5c4c2cc9af72de8a0f1be98a49f4730f/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71392e6a7067\"><img src=\"https://camo.githubusercontent.com/f732e8cd5c4c2cc9af72de8a0f1be98a49f4730f/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f71392e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q9.jpg\" style=\"max-width:100%;\"></a></p>\n<p>与去年的结果稍有不同，大多数 CSS 方法在知识水平方面都有所提高。</p>\n<p>BEM 仍然是大多数受访者(43.53%)表示他们感到舒适的使用方法，比去年的结果上升了 5.37% 。</p>\n<p>12 个月增幅最大的是 CSS-in-JS，开发人员表示，他们对使用该软件感到满意的比例上升了 7.6% ，达到 27.52% 。</p>\n<p>与去年相比，SMACSS、 OOCSS、 Atomic Design 和 ITCSS 的受访者中至少听说过它们或者稍微使用过它们的人数都有所增加，其中 Atomic Design 和 ITCSS 的受访者增加最为显著。</p>\n<p>具体而言，纵观上述 CSS 架构方法，即 SMACSS、 OOCSS、 Atomic Design、 ITCSS 和 CSS-in-js，认为使用其中至少一种方法感到舒适的受访者比例，从去年的 34.90% 上升至 2019 年的 42.26% 。 上升了 7.36% 。 当看到那些至少有一点点使用这些 CSS 方法的受访者时，这个数字从 2018 年的 66.49% 上升到了 70.75%</p>\n<p>这些结果表明跨 CSS 方法和命名模式的知识水平正在上升，BEM、 CSS in-js 和 Atomic Design 是这一领域最著名的。</p>\n<h2>Q10 - 使用 CSS 工具</h2>\n<p>继续关注 CSS 方法，问题 10-这些 CSS 方法或工具你目前在你的项目中使用？</p>\n<p>让我们来看看结果。</p>\n<p>在下面的可用答案中省略了 n.b.CSS-in-JS，因为问题 11 只关注 CSS-in-JS 的用法。</p>\n<table>\n<thead>\n<tr>\n<th>工具 / 方法</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分百变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Autoprefixer</td>\n<td>1708</td>\n<td>56.84%</td>\n<td>+0.13% + 0.13%</td>\n</tr>\n<tr>\n<td>BEM</td>\n<td>1368</td>\n<td>45.52%</td>\n<td>+2.01% + 2.01%</td>\n</tr>\n<tr>\n<td>Stylelint</td>\n<td>826</td>\n<td>27.49%</td>\n<td>+4.71% + 4.71%</td>\n</tr>\n<tr>\n<td>Modernizr</td>\n<td>634</td>\n<td>21.10%</td>\n<td>-8.24% - 8.24%</td>\n</tr>\n<tr>\n<td>Atomic Design</td>\n<td>463</td>\n<td>15.41%</td>\n<td>+0.19% + 0.19%</td>\n</tr>\n<tr>\n<td>面向对象 CSS (OOCSS)</td>\n<td>218</td>\n<td>7.25%</td>\n<td>-1.98% - 1.98%</td>\n</tr>\n<tr>\n<td>SMACSS</td>\n<td>173</td>\n<td>5.76%</td>\n<td>-0.89% - 0.89%</td>\n</tr>\n<tr>\n<td>ITCSS</td>\n<td>155</td>\n<td>5.16%</td>\n<td>+0.36% + 0.36%</td>\n</tr>\n<tr>\n<td>SUIT CSS</td>\n<td>46</td>\n<td>1.53%</td>\n<td>+0.03% + 0.03%</td>\n</tr>\n<tr>\n<td>我不使用任何这些方法或工具</td>\n<td>664</td>\n<td>22.10%</td>\n<td>+5.18% + 5.18%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/3d0b92990b8c79cec31d7af67d4cc054ccb1748a/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131302e6a7067\"><img src=\"https://camo.githubusercontent.com/3d0b92990b8c79cec31d7af67d4cc054ccb1748a/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131302e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q10.jpg\" style=\"max-width:100%;\"></a></p>\n<p>Autoprefixer 在这些工具和方法中使用最多(56.84%) ，其次是 BEM (45.52%)和 Stylelint (27.49%)。 这些数据都比 2018 年略有增长，其中 Stylelint 的增幅最大，达到 4.71% 。</p>\n<p>在过去的 12 个月里，Modernizr 的使用率下降了 8.24% ，至 21.10% ，延续了去年观察到的使用率下降的趋势。</p>\n<p>虽然 CSS 方法的知识水平似乎略有增长，但它们的使用水平与 2018 年的水平相当接近。 Atomic Design 仍然是最流行的 CSS 设计方法，有 15.41% 的开发者使用它。</p>\n<p>总体而言，这些数字表明，自 2018 年以来，这一领域已经进入了整合的一年。</p>\n<h2>Q11 - CSS-in-JS 用法</h2>\n<p>下一个问题是今年调查的一个新问题，它询问了一个最近很受关注的领域—— css in-js。</p>\n<p>使用 CSS-in-JS 工具的开发人员数量已经增长到了这样一个程度，看看哪些工具在这个领域是最流行的会很有趣。</p>\n<p>所以问题是-你更喜欢哪个 CSS-in-JS 工具？</p>\n<table>\n<thead>\n<tr>\n<th>工具 / 方法</th>\n<th>投票数</th>\n<th>百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>我不在我的项目中使用 css in-js</td>\n<td>1,662</td>\n<td>55.31%</td>\n</tr>\n<tr>\n<td>Styled Components</td>\n<td>812</td>\n<td>27.02%</td>\n</tr>\n<tr>\n<td>CSS Modules</td>\n<td>292</td>\n<td>9.72%</td>\n</tr>\n<tr>\n<td>Emotion</td>\n<td>119</td>\n<td>3.96%</td>\n</tr>\n<tr>\n<td>JSS</td>\n<td>50</td>\n<td>1.66%</td>\n</tr>\n<tr>\n<td>Aphrodite</td>\n<td>10</td>\n<td>0.33%</td>\n</tr>\n<tr>\n<td>Radium</td>\n<td>1</td>\n<td>0.03%</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>59</td>\n<td>1.96%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/d844071ce37350886ebd38863760447f12cf1a21/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131312e6a7067\"><img src=\"https://camo.githubusercontent.com/d844071ce37350886ebd38863760447f12cf1a21/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131312e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q11.jpg\" style=\"max-width:100%;\"></a></p>\n<p>44.69% 的受访者表示，他们现在使用 css in-js 工具，其中最流行的选项是 Styled Components (27.02%)。 CSS Modules(9.72%)和 Emotion (3.96%)是开发人员接下来最流行的工具。</p>\n<p>大多数开发人员(55.31%)回答说他们不使用 css in-js 工具。 这仍然是一个相对较新的工具领域，并且考虑到它是专门用于某些用例的，因此看到这种情况并不令人惊讶。</p>\n<p>正如您可能预期的那样，当声称拥有高级或专业 JS 技能的开发人员进行过滤时，使用 css in-JS 工具的受访者比例上升到了 51.38% 。 这也许并不奇怪，因为 CSS-in-JS 通常与 JavaScript 框架结合使用。</p>\n<p>总的来说，很明显 css in-js 正在成为许多开发人员工具包的重要组成部分。 看看这些数字在未来会有什么变化是很有趣的。</p>\n<h2>Q12 - 使用 CSS 功能</h2>\n<p>最后一个与 CSS 相关的问题集中在受访者对最近 CSS 特性的了解上。</p>\n<p>关于最新的 CSS 特性，有这么多的文章和讨论，了解有多少开发人员已经开始将这些特性付诸实践，并获得了使用它们的经验，总是很有趣。</p>\n<p>因此，受访者被要求-请说明您的经验，以下 CSS 功能。</p>\n<p>以下是调查结果:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>从没听说过</th>\n<th>听说过 / 了解过</th>\n<th>用了一点</th>\n<th>使用时感觉舒适</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CSS Grid</td>\n<td>0.90% (27)</td>\n<td>21.90% (658)</td>\n<td>48.62% (1,461)</td>\n<td>28.59% (859)</td>\n</tr>\n<tr>\n<td>Flexbox</td>\n<td>0.43% (13)</td>\n<td>2.50% (75)</td>\n<td>16.67% (501)</td>\n<td>80.40% (2,416)</td>\n</tr>\n<tr>\n<td>CSS 自定义属性</td>\n<td>8.95% (269)</td>\n<td>30.58% (919）</td>\n<td>32.58% (979)</td>\n<td>27.89% (838)</td>\n</tr>\n<tr>\n<td>CSS Houdini</td>\n<td>51.75% (1,555)</td>\n<td>46.46% (1,396)</td>\n<td>1.56% (47)</td>\n<td>0.23% (7)</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/454b8109994767416339ca7a231680baa03972ff/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131322e6a7067\"><img src=\"https://camo.githubusercontent.com/454b8109994767416339ca7a231680baa03972ff/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131322e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q12.jpg\" style=\"max-width:100%;\"></a></p>\n<p>Flexbox (上涨 12.81% 至 80.40%)、 CSS Grid (上涨 10.11% 至 28.59%)和 CSS 自定义属性(上涨 8.86% 至 27.89%)的开发人员数量都有所上升，他们现在觉得使用它们很舒服。</p>\n<p>几乎所有受访的开发者都使用过 Flexbox，97.07% 的受访者表示他们至少使用过一点(2018 年这一数字为 93.53%)。 可以肯定地说，现在所有前端开发人员都期望拥有 Flexbox 的知识。</p>\n<p>CSS Grid 和 CSS 自定义属性都发现，从听说过或读到过它们到至少使用过一点这个功能的受访者数量有很大的变化。 对这些功能的了解似乎仍在增长，更多的受访者表示他们已经使用了一些这些功能，而不是那些觉得使用它们很舒服的人。</p>\n<p>Css Houdini ——一组帮助开发人员本地扩展 CSS 的 api ——今年第一次被问及。 46.46% 的受访者表示他们听说过或读过该功能，但只有 1.79% 的人至少使用过一点。 这个特性仍然是最前沿的，所以目前很少有开发人员使用它也许并不奇怪。</p>\n<h2>Q13 - JavaScript 知识水平</h2>\n<p>接下来是调查的第二部分，问题集中在 JavaScript 和它的工具生态系统上。</p>\n<p>首先，我问了受访者-你如何评价自己对 JavaScript 及其相关工具和方法的知识？</p>\n<p>以下是结果:</p>\n<table>\n<thead>\n<tr>\n<th>知识</th>\n<th>投票数</th>\n<th>百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初学者</td>\n<td>70</td>\n<td>2.33%</td>\n</tr>\n<tr>\n<td>初学者(初级和中级之间)</td>\n<td>261</td>\n<td>8.69%</td>\n</tr>\n<tr>\n<td>中级</td>\n<td>901</td>\n<td>29.98%</td>\n</tr>\n<tr>\n<td>中级</td>\n<td>901</td>\n<td>29.98%</td>\n</tr>\n<tr>\n<td>高级(介于中级和专家之间)</td>\n<td>1,237</td>\n<td>41.16%</td>\n</tr>\n<tr>\n<td>专家</td>\n<td>536</td>\n<td>17.84%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/faa02669833c0529600a98745dbe3490cb2c543a/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131332e6a7067\"><img src=\"https://camo.githubusercontent.com/faa02669833c0529600a98745dbe3490cb2c543a/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131332e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q13.jpg\" style=\"max-width:100%;\"></a></p>\n<p>绝大部分受访者认为自己至少达到中级或中级以上水平(88.98%) ，大多数受访者认为自己是高级或专家(59.0%)。</p>\n<p>如果说这反映了我们整个行业的知识水平，那就错了——更有可能的是，这只反映了参加这样一个调查的人的知识水平。 正如您在此上下文中可能期望的那样，权重更倾向于高级端。</p>\n<h2>Q14 - 任务执行者</h2>\n<p>去年我们看到 NPM Scripts 的使用在一定程度上领先于 Gulp。 他们在 12 个月内巩固了他们的地位吗？</p>\n<p>受访者被问到的问题是: 在典型的项目工作流程中，您更喜欢使用哪个任务运行器？</p>\n<table>\n<thead>\n<tr>\n<th>任务执行者</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分比变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NPM Scripts</td>\n<td>1,933</td>\n<td>64.33%</td>\n<td>+16.44% + 16.44%</td>\n</tr>\n<tr>\n<td>Gulp</td>\n<td>557</td>\n<td>18.54%</td>\n<td>-11.02% - 11.02%</td>\n</tr>\n<tr>\n<td>没有使用</td>\n<td>273</td>\n<td>9.08%</td>\n<td>-1.61% - 1.61%</td>\n</tr>\n<tr>\n<td>Grunt</td>\n<td>76</td>\n<td>2.53%</td>\n<td>-3.26% - 3.26%</td>\n</tr>\n<tr>\n<td>图形用户界面应用程序(即 Codekit)</td>\n<td>30</td>\n<td>1.00%</td>\n<td>-0.04% - 0.04%</td>\n</tr>\n<tr>\n<td>Make</td>\n<td>21</td>\n<td>0.70%</td>\n<td>+0.06% + 0.06%</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>115</td>\n<td>3.83%</td>\n<td>-0.56% - 0.56%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/1f22e5c0885e725b19e716d6c56648840928aeda/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131342e6a7067\"><img src=\"https://camo.githubusercontent.com/1f22e5c0885e725b19e716d6c56648840928aeda/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131342e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q14.jpg\" style=\"max-width:100%;\"></a></p>\n<p>从这些结果可以清楚地看出，NPM 脚本已经稳固地巩固了它在这一类别中的地位。 64.33% 的受访者表示他们现在它，比去年增加了 16.44% 。</p>\n<p>几乎所有这类工具的使用率都有所下降，18.54% 的开发人员使用 Gulp (下降了-11.02%) ，只有 2.53% 的开发人员使用 Grunt (下降了-3.26%)。</p>\n<p>9.08% 的受访者表示他们没有使用任务运行器，尽管这一比例比去年的结果下降了 1.61% 。</p>\n<p>因此，这种趋势似乎继承了去年的结果，开发人员稳步地从 Gulp 和 Grunt 迁移到 NPM Scripts。</p>\n<h2>Q15 - 了解 JavaScript 库和框架</h2>\n<p>在以下三个问题中，我们询问了受访者对 JavaScript 库和框架的知识和使用水平。</p>\n<p>去年，React，Vue 和 Angular 2 + 在知识水平上获得了最大的收益。 仍然是大多数开发人员感到舒适的工具，但它的实际使用水平大幅下降。</p>\n<p>这个问题着眼于各种工具的知识水平，要求受访者指出他们在哪些 JavaScript 库和框架中有经验。</p>\n<p>以下是调查结果:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>从没听说过</th>\n<th>听说过 / 了解过</th>\n<th>用了一点</th>\n<th>使用时感觉舒适</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jQuery</td>\n<td>0.03% (1)</td>\n<td>2.80% (84)</td>\n<td>21.80%</td>\n<td>75.37% (2,265)</td>\n</tr>\n<tr>\n<td>Lodash</td>\n<td>8.09% (243</td>\n<td>22.50% (676)</td>\n<td>28.75% (864)</td>\n<td>40.67% (1,222)</td>\n</tr>\n<tr>\n<td>Underscore</td>\n<td>12.58% (378)</td>\n<td>32.58% (979)</td>\n<td>26.39% (793)</td>\n<td>28.45% (855)</td>\n</tr>\n<tr>\n<td>React</td>\n<td>0.27% (8)</td>\n<td>24.53% (737)</td>\n<td>26.86% (807)</td>\n<td>48.35% (1,453)</td>\n</tr>\n<tr>\n<td>Vue.js</td>\n<td>0.43% (13)</td>\n<td>50.18% (1,508)</td>\n<td>26.19% (787)</td>\n<td>23.19% (697)</td>\n</tr>\n<tr>\n<td>Angular 1</td>\n<td>0.57% (17)</td>\n<td>50.75% (1,525)</td>\n<td>29.85% (897)</td>\n<td>29.85% (897)</td>\n</tr>\n<tr>\n<td>Angular 2+</td>\n<td>0.40% (12)</td>\n<td>63.73% (1,915)</td>\n<td>20.07% (603)</td>\n<td>15.81% (475)</td>\n</tr>\n<tr>\n<td>Ember</td>\n<td>5.49% (165)</td>\n<td>79.03% (2,375)</td>\n<td>8.22% (247)</td>\n<td>7.25% (218)</td>\n</tr>\n<tr>\n<td>Preact</td>\n<td>21.30% (640)</td>\n<td>65.02% (1,954)</td>\n<td>9.08% (273)</td>\n<td>4.59% (138)</td>\n</tr>\n<tr>\n<td>Backbone</td>\n<td>8.55% (257)</td>\n<td>65.69% (1,974)</td>\n<td>18.20% (547)</td>\n<td>7.55% (227)</td>\n</tr>\n<tr>\n<td>Knockout</td>\n<td>23.43% (704)</td>\n<td>62.53% (1,879)</td>\n<td>10.88% (327)</td>\n<td>3.16% (95)</td>\n</tr>\n<tr>\n<td>Aurelia</td>\n<td>44.79% (1,346)</td>\n<td>51.48% (1,547)</td>\n<td>2.73% (82)</td>\n<td>1.00% (30)</td>\n</tr>\n<tr>\n<td>MeteorJS</td>\n<td>18.24% (548)</td>\n<td>71.45% (2,147)</td>\n<td>8.95% (269)</td>\n<td>1.36% (41)</td>\n</tr>\n<tr>\n<td>Polymer</td>\n<td>18.64% (560)</td>\n<td>71.48% (2,148)</td>\n<td>8.39% (252)</td>\n<td>1.50% (45)</td>\n</tr>\n<tr>\n<td>D3.js</td>\n<td>13.48% (405)</td>\n<td>49.68% (1,493)</td>\n<td>29.55% (888)</td>\n<td>7.29% (219)</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/49f9802289dc73932cfc17274032275a5899f0b7/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131352e6a7067\"><img src=\"https://camo.githubusercontent.com/49f9802289dc73932cfc17274032275a5899f0b7/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131352e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q15.jpg\" style=\"max-width:100%;\"></a></p>\n<p>调查结果显示，使用 jQuery (75.37%)、 React (48.35%)、 Lodash (40.67%)、 underline (28.45%)和 Vue.js (23.19%)的调查对象中，使用效果最好的工具是 jQuery (75.37%)。</p>\n<p>使用 React 和 Vue 的开发人员数量增长最快，48.35% 的开发人员说他们现在使用 React 感到很舒服(比 2018 年增加了 7.92%) ，23.19% 的开发人员说 Vue 也是如此(增加了 6.12%)。</p>\n<p>对 jQuery 持相同观点的受访者数量略有下降，为 75.37% (比 2018 年下降了 4.36%)。</p>\n<p>Lodash 的知识水平也有所提高，使用该知识的人稍微增加了（28.75％），使用它的人感到舒适（40.67％）分别增加了+ 3.15％和+ 3.70％。</p>\n<p>今年，D3.js 首次成为这个问题的一个选项，7.29% 的开发者表示他们觉得使用 D3.js 很舒服。</p>\n<p>查看所有 JavaScript MV * 框架的知识水平——因此列表中除了 jQuery、Underscore、 Lodash 和 D3.js 之外的所有框架——78.54% 的受访者表示，他们觉得至少可以使用其中一个框架。 这个数字比去年增长了 8.04% ，自 2016 年以来增长了 28% ，表明了前端开发者至少了解其中一个工具的重要性。</p>\n<h2>Q16 - 最常用的 JS 框架 / 库</h2>\n<p>接下来的问题是: 您目前在项目中使用最频繁的 JavaScript 库和 / 或框架是什么？</p>\n<p>受访者被要求选择他们在项目中使用的所有(或者没有)工具。</p>\n<p>答复如下:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分比变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>React</td>\n<td>1,569</td>\n<td>52.21% 5.21%</td>\n<td>+4.82% + 4.82%</td>\n</tr>\n<tr>\n<td>jQuery</td>\n<td>1,106</td>\n<td>36.81%</td>\n<td>-14.24% - 14.24%</td>\n</tr>\n<tr>\n<td>Lodash</td>\n<td>986</td>\n<td>32.81%</td>\n<td>-1.01% - 1.01%</td>\n</tr>\n<tr>\n<td>Vue.js</td>\n<td>816</td>\n<td>27.15% 2.15%</td>\n<td>+4.21% + 4.21%</td>\n</tr>\n<tr>\n<td>Angular (v2+)</td>\n<td>472</td>\n<td>15.71%</td>\n<td>+1.59% + 1.59%</td>\n</tr>\n<tr>\n<td>D3.js</td>\n<td>267</td>\n<td>8.89%</td>\n<td>N/A 不适用</td>\n</tr>\n<tr>\n<td>Ember</td>\n<td>201</td>\n<td>6.69%</td>\n<td>+0.68% + 0.68%</td>\n</tr>\n<tr>\n<td>Underscore</td>\n<td>199</td>\n<td>6.62%</td>\n<td>-1.22% - 1.22%</td>\n</tr>\n<tr>\n<td>AngularJS</td>\n<td>191</td>\n<td>6.36%</td>\n<td>-4.06% - 4.06%</td>\n</tr>\n<tr>\n<td>Preact</td>\n<td>75</td>\n<td>2.50%</td>\n<td>-0.48% - 0.48%</td>\n</tr>\n<tr>\n<td>Backbone</td>\n<td>55</td>\n<td>1.83%</td>\n<td>-0.72% - 0.72%</td>\n</tr>\n<tr>\n<td>Polymer</td>\n<td>35</td>\n<td>1.16%</td>\n<td>-0.58% - 0.58%</td>\n</tr>\n<tr>\n<td>Knockout</td>\n<td>30</td>\n<td>1.00%</td>\n<td>-0.83% - 0.83%</td>\n</tr>\n<tr>\n<td>Aurelia</td>\n<td>26</td>\n<td>0.87%</td>\n<td>-0.25% - 0.25%</td>\n</tr>\n<tr>\n<td>MeteorJS</td>\n<td>24</td>\n<td>0.80%</td>\n<td>-0.57% - 0.57%</td>\n</tr>\n<tr>\n<td>我不使用任何这些方法或工具</td>\n<td>120</td>\n<td>3.99%</td>\n<td>+0.38% + 0.38%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/7021ba182ff278ca95481bddb67a9cc01b0fcffe/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131362e6a7067\"><img src=\"https://camo.githubusercontent.com/7021ba182ff278ca95481bddb67a9cc01b0fcffe/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131362e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q16.jpg\" style=\"max-width:100%;\"></a></p>\n<p>自 2015 年调查开始以来，jQuery 第一次不再是最常用的 JS 工具，React 现在占据了这个位置。</p>\n<p>52.21% 的开发者说他们经常使用 React 在他们的项目，比去年增加了 4.82% 。 36.81% 的受访者表示他们经常使用 jQuery，比去年下降了 14.24% 。</p>\n<p>其次是 Lodash (32.81%)、 Vue.js (27.15%)和 Angular v2 + (15.71%) ，与 2018 年相比分别有 -1.01% 、 + 4.21% 和 + 1.59% 的变化。</p>\n<h2>Q17 - 最基本的 JS 框架 / 库</h2>\n<p>最后一个关于 JS 框架的问题是: 在你的大多数项目中，你认为哪个 JavaScript 库或框架对你来说是必不可少的？</p>\n<p>去年，React 获得了来自开发者的最大份额的回复，但是 12 个月以来有什么变化吗？</p>\n<p>让我们来看看:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分比变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>React</td>\n<td>985</td>\n<td>32.78%</td>\n<td>+4.31% + 4.31%</td>\n</tr>\n<tr>\n<td>它们都不是必不可少的——我只是在我的项目中使用本地 JavaScript 就感到很舒服</td>\n<td>651</td>\n<td>21.66%</td>\n<td>+0.05% + 0.05%</td>\n</tr>\n<tr>\n<td>Vue.js</td>\n<td>404</td>\n<td>13.44%</td>\n<td>+3.22% + 3.22%</td>\n</tr>\n<tr>\n<td>jQuery</td>\n<td>335</td>\n<td>11.15%</td>\n<td>-8.59% - 8.59%</td>\n</tr>\n<tr>\n<td>Angular (v2+)</td>\n<td>255</td>\n<td>8.49%</td>\n<td>+2.30% + 2.30%</td>\n</tr>\n<tr>\n<td>Ember</td>\n<td>167</td>\n<td>5.56%</td>\n<td>+1.17% + 1.17%</td>\n</tr>\n<tr>\n<td>Lodash</td>\n<td>73</td>\n<td>2.43%</td>\n<td>-0.99% - 0.99%</td>\n</tr>\n<tr>\n<td>AngularJS</td>\n<td>22</td>\n<td>0.73%</td>\n<td>-0.97% - 0.97%</td>\n</tr>\n<tr>\n<td>Aurelia</td>\n<td>18</td>\n<td>0.60%</td>\n<td>0%</td>\n</tr>\n<tr>\n<td>Backbone</td>\n<td>11</td>\n<td>0.37%</td>\n<td>+0.08% + 0.08%</td>\n</tr>\n<tr>\n<td>Preact</td>\n<td>8</td>\n<td>0.27%</td>\n<td>0%</td>\n</tr>\n<tr>\n<td>Underscore</td>\n<td>7</td>\n<td>0.23%</td>\n<td>-0.19% - 0.19%</td>\n</tr>\n<tr>\n<td>Polymer</td>\n<td>7</td>\n<td>0.23%</td>\n<td>-0.28% - 0.28%</td>\n</tr>\n<tr>\n<td>MeteorJS</td>\n<td>4</td>\n<td>0.13%</td>\n<td>-0.05% - 0.05%</td>\n</tr>\n<tr>\n<td>Knockout</td>\n<td>1</td>\n<td>0.03%</td>\n<td>-0.13% - 0.13%</td>\n</tr>\n<tr>\n<td>D3.js</td>\n<td>1</td>\n<td>0.03%</td>\n<td>N/A 不适用</td>\n</tr>\n<tr>\n<td>其他(请注明)</td>\n<td>56</td>\n<td>1.86%</td>\n<td>+0.07% + 0.07%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/5a80add3ea48189ab9e72dad570bdf16a70707ce/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131372e6a7067\"><img src=\"https://camo.githubusercontent.com/5a80add3ea48189ab9e72dad570bdf16a70707ce/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131372e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q17.jpg\" style=\"max-width:100%;\"></a></p>\n<p>在 32.78％的受访者中，React 巩固了其在今年业绩中的地位，他们认为这是最重要的 JavaScript 库或框架。这个数字比去年的调查增长了+ 4.31％。</p>\n<p>21.66% 的开发者表示，他们认为在这个类别中没有必要的工具。</p>\n<p>其次是 Vue.js，增长了 13.44% (比去年增长了 3.22%) ，jQuery 增长了 11.15% (下降了 8.59%) ，Angular v2 + 增长了 8.49% (上升了 2.3%)。</p>\n<p>当按经验水平过滤时，结果会更加明显。 具有 0-2 年前端开发经验的开发人员中，有 45.14％的人表示 React 对他们至关重要。 当查看那些具有 10 年以上经验的开发人员时，这一数字下降到了 24.02％。 具有该经验水平的开发人员中，有 28.06％的人还说，没有库或工具对他们来说是必不可少的。</p>\n<p>总的来说，从与 JS 库和框架相关的所有三个问题的结果来看，React 的知识水平和使用率仍在增长，而 vue.JS 显然是第二受欢迎的 JavaScript 框架(尽管仍然落后于 React 的受欢迎程度)。</p>\n<p>jQuery 的使用率虽然稳步下降，但仍然很高——比起 Lodash，它仍然被更多的受访者频繁使用。</p>\n<h2>Q18 - 模块打包器的使用</h2>\n<p>在过去的几次调查中，Webpack 在这类工具中占据了主导地位。 那么，是否有工具开始削弱它的统治地位呢？</p>\n<p>问题是——您是否在工作流程中使用了 JavaScript 模块打包器？</p>\n<p>以下是调查结果:</p>\n<table>\n<thead>\n<tr>\n<th>模块打包器</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分比变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Webpack</td>\n<td>2,204</td>\n<td>73.34%</td>\n<td>+7.66% + 7.66%</td>\n</tr>\n<tr>\n<td>我不使用模块打包器</td>\n<td>440</td>\n<td>14.64%</td>\n<td>-5.91% - 5.91%</td>\n</tr>\n<tr>\n<td>Parcel</td>\n<td>85</td>\n<td>2.83%</td>\n<td>+1.79% + 1.79%</td>\n</tr>\n<tr>\n<td>Rollup</td>\n<td>62</td>\n<td>2.06%</td>\n<td>-0.12% - 0.12%</td>\n</tr>\n<tr>\n<td>Browserify</td>\n<td>49</td>\n<td>1.63%</td>\n<td>-2.09% - 2.09%</td>\n</tr>\n<tr>\n<td>RequireJS</td>\n<td>37</td>\n<td>1.23%</td>\n<td>-1.32% - 1.32%</td>\n</tr>\n<tr>\n<td>SystemJS</td>\n<td>3</td>\n<td>0.10%</td>\n<td>N/A 不适用</td>\n</tr>\n<tr>\n<td>其他(请注明)</td>\n<td>125</td>\n<td>4.16%</td>\n<td>+0.15% + 0.15%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/40b6115820515da540ffe7632d9bd4a7757d0e91/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131382e6a7067\"><img src=\"https://camo.githubusercontent.com/40b6115820515da540ffe7632d9bd4a7757d0e91/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131382e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q18.jpg\" style=\"max-width:100%;\"></a></p>\n<p>在过去的 12 个月里，Webpack 持续增长，73.34% 的受访者表示他们把 Webpack 作为他们的模块捆绑器。 这比去年增长了 7.66% 。</p>\n<p>其次是 Parcel and Rollup，分别占 2.83% 和 2.06% 。</p>\n<p>声称自己没有使用模块打包器的开发人员数量也下降了 5.91% ，降至 14.64% 。 这意味着 85.36% 的受访者正在使用模块打包器。</p>\n<h2>Q19 - 模块打包器和任务管理器的经验</h2>\n<p>下一个问题是询问被调查者关于他们在前面提到的模块打包机和任务管理器中的经验水平。</p>\n<p>结果如下:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>从没听说过</th>\n<th>听说过 / 了解过</th>\n<th>用了一点</th>\n<th>使用时感觉舒适</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Gulp</td>\n<td>1.66% (50)</td>\n<td>+0.21%</td>\n<td>20.33% (611)</td>\n<td>+1.34%</td>\n</tr>\n<tr>\n<td>NPM Scripts</td>\n<td>3.13% (94)</td>\n<td>- 1.23%</td>\n<td>9.15% (275)</td>\n<td>- 3.59%</td>\n</tr>\n<tr>\n<td>Grunt</td>\n<td>2.93% (88)</td>\n<td>+ 0.68%</td>\n<td>34.51% (1,037)</td>\n<td>+1.37%</td>\n</tr>\n<tr>\n<td>Webpack</td>\n<td>2.03% (61)</td>\n<td>-0.61%</td>\n<td>13.28% (399)</td>\n<td>-6.02%</td>\n</tr>\n<tr>\n<td>Browserify</td>\n<td>11.91% (358)</td>\n<td>+2.33%</td>\n<td>52.95% (1,591)</td>\n<td>+0.84%</td>\n</tr>\n<tr>\n<td>Parcel</td>\n<td>30.18% (907)</td>\n<td>-15.14%</td>\n<td>49.78% (1,496)</td>\n<td>+3.34%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/c5df24fc59d7fa514f482ad92ed40d7bb121fadd/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131392e6a7067\"><img src=\"https://camo.githubusercontent.com/c5df24fc59d7fa514f482ad92ed40d7bb121fadd/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7131392e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q19.jpg\" style=\"max-width:100%;\"></a></p>\n<p>结果显示，大部分受访者认为最适合使用的工具是 NPM Scripts (64.39%)、 Webpack (52.38%)和 Gulp (45.79%)。</p>\n<p>Npm Scripts 和 Webpack 发现，使用它们的开发人员数量增长最快。</p>\n<p>使用 Parcel 的人数也出现了不错的增长，使用过至少一点 Parcel 的受访者(12.98% ，上升了 7.47%)和使用得心应手的受访者(7.05% ，上升了 4.32%)均比 2018 年有所上升。</p>\n<h2>Q20 - JavaScript-转换器</h2>\n<p>在最近的两次调查中，Javascript 的转换器已经发展到一个水平，以至于现在绝大多数开发人员现在都在其工作流程中使用它。</p>\n<p>虽然我不认为 JavaScript 的使用在过去的 12 个月里有所下降，但是看看它的使用水平以及它仍在增长的程度还是很有趣的。</p>\n<p>问题是-您是否使用工具将您的 JavaScript 从 ES6 转移到 ES5？ (即 Babel)</p>\n<p>研究结果如下:</p>\n<table>\n<thead>\n<tr>\n<th>回答</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分比变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是的</td>\n<td>2,451</td>\n<td>81.56%</td>\n<td>+ 4.80%</td>\n</tr>\n<tr>\n<td>不，我听说过这些工具，但没用过</td>\n<td>466</td>\n<td>15.51%</td>\n<td>- 4.01%</td>\n</tr>\n<tr>\n<td>没有我从没听说过 JavaScript 转换器</td>\n<td>88</td>\n<td>2.93%</td>\n<td>- 0.79%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/286b1e1d4f4c726bb346e0914a7e05f7b3821faa/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132302e6a7067\"><img src=\"https://camo.githubusercontent.com/286b1e1d4f4c726bb346e0914a7e05f7b3821faa/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132302e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q20.jpg\" style=\"max-width:100%;\"></a></p>\n<p>编译器的使用持续增长，目前有 81.56％的受访者在其工作流程中使用，增长了 4.8％。</p>\n<p>如您所料，在前端开发方面经验较少的开发人员不太可能使用编译器，有 0-2 年经验的受访者中有 70％表示这样做。</p>\n<h2>Q21 - JavaScript 扩展语言</h2>\n<p>下一个问题是去年增加的一个新问题，关注扩展语言，比如 TypeScript 和 Flow。</p>\n<p>TypeScript 是当时大多数受访者都习惯使用的工具，但是这种情况在 12 个月后发生了变化吗？</p>\n<p>问题是-请说明您使用以下 JavaScript 扩展的经验。</p>\n<p>以下是今年的调查结果:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>从没听说过</th>\n<th>听说过 / 了解过</th>\n<th>用了一点</th>\n<th>使用时感觉舒适</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TypeScript</td>\n<td>1.16% (35)</td>\n<td>- 1.07%</td>\n<td>36.74% (1,104)</td>\n<td>- 11.31%</td>\n</tr>\n<tr>\n<td>Flow</td>\n<td>27.92% (839)</td>\n<td>- 5.99%</td>\n<td>55.97% (1,682)</td>\n<td>+ 5.50%</td>\n</tr>\n<tr>\n<td>Elm</td>\n<td>29.42% (884)</td>\n<td>+ 0.10%</td>\n<td>63.93% (1,921)</td>\n<td>- 0.47%</td>\n</tr>\n<tr>\n<td>ClojureScript</td>\n<td>32.31% (971)</td>\n<td>- 1.24%</td>\n<td>65.69% (1974)</td>\n<td>+ 2.09%</td>\n</tr>\n<tr>\n<td>Dart</td>\n<td>27.75% (834)</td>\n<td>N/A 不适用</td>\n<td>67.62% (2032)</td>\n<td>N/A 不适用</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/f6e1dece97e58b95a6dc8feb485980b30d702dd6/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132312e6a7067\"><img src=\"https://camo.githubusercontent.com/f6e1dece97e58b95a6dc8feb485980b30d702dd6/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132312e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q21.jpg\" style=\"max-width:100%;\"></a></p>\n<p>TypeScript 仍然是大多数受访者感到舒服的工具，其使用率为 31.91% ，比去年增长了 10.03% 。</p>\n<p>这一类别中的其他工具的数据没有真正的变化，没有真正的增长或下降。</p>\n<p>这些结果似乎表明，当涉及到这类工具时，TypeScript 是大多数开发人员正在寻找的工具。 虽然大多数开发人员还不知道，但是它正在逐年稳步增长，看看这种情况在未来是否会继续下去是很有趣的。</p>\n<h2>Q22 - JavaScript 静态代码检查</h2>\n<p>当涉及到 JS 工作流时，JavaScript lint 工具实际上是组成的一部分，去年，ESL​​int 显然是大多数开发人员所使用的工具。</p>\n<p>我问的问题是——你用什么工具来编译你的 JavaScript？ (如有的话)</p>\n<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分比变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ESLint</td>\n<td>2,286</td>\n<td>76.07%</td>\n<td>+15.39%</td>\n</tr>\n<tr>\n<td>我不使用 JavaScript linter</td>\n<td>360</td>\n<td>11.98%</td>\n<td>-3.42%</td>\n</tr>\n<tr>\n<td>JSLint</td>\n<td>143</td>\n<td>4.76%</td>\n<td>-2.44%</td>\n</tr>\n<tr>\n<td>JSHint</td>\n<td>67</td>\n<td>2.23%</td>\n<td>-1.74%</td>\n</tr>\n<tr>\n<td>StandardJS</td>\n<td>43</td>\n<td>1.43%</td>\n<td>-0.16%</td>\n</tr>\n<tr>\n<td>其他(请注明)</td>\n<td>106</td>\n<td>3.53%</td>\n<td>+2.54%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/1a46b30bef57e61bc70282de9a52d81eff877789/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132322e6a7067\"><img src=\"https://camo.githubusercontent.com/1a46b30bef57e61bc70282de9a52d81eff877789/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132322e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q22.jpg\" style=\"max-width:100%;\"></a></p>\n<p>结果显示了一个非常明显的趋势，ESLint 的使用量仍然在上升，而所有其他临时工具的使用量似乎都在下降。 76.07% 的受访者表示他们使用 ESLint，比去年增加了 15.39% 。</p>\n<p>ESLint 使用率的提高可能要归功于 TSLint 团队在 2 月份决定弃用 TSLint，并将精力集中在<a href=\"https://medium.com/palantir/tslint-in-2019-1a144c2317a9\" rel=\"nofollow\">改善 ESLint 的 TypeScript 支持</a>上。</p>\n<p>表示不使用 JavaScript linter 的受访者比例今年也下降到了 11.98% 。 这意味着 88.02% 的开发者正在使用一个工具来帮助他们在这个领域工作，这比 12 个月前的 84.6% 的调查对象增加了 3.42% 。</p>\n<p>因此，没有真正的惊喜，但进一步巩固与 ESLint 非常认为是该类别的首选工具。</p>\n<h2>Q23 - JavaScript 测试</h2>\n<p>下一个问题是关于 JavaScript 测试工具的使用。</p>\n<p>今年，这个问题的格式略有改变，因为受访者的反馈显示，许多开发人员使用了多种工具，而不仅仅是一种。 因此，受访者可以选择多个答案，而不是只选择一个来反映这种行为。</p>\n<p>我在去年的结果中加入了百分比差异作为参考，但是由于这种格式上的改变，所有的工具的使用率都可能至少会有一个小小的增长。</p>\n<p>问题是-这些工具中的哪一个是你用来测试你的 JavaScript 的？ (如有的话)</p>\n<p>以下是调查结果:</p>\n<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分比变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Jest</td>\n<td>1,348</td>\n<td>44.86%</td>\n<td>+22.83%</td>\n</tr>\n<tr>\n<td>我不使用工具来测试我的 JS</td>\n<td>1,071</td>\n<td>35.64%</td>\n<td>-7.98%</td>\n</tr>\n<tr>\n<td>Mocha</td>\n<td>785</td>\n<td>26.12%</td>\n<td>+12.17%</td>\n</tr>\n<tr>\n<td>Jasmine</td>\n<td>585</td>\n<td>19.47%</td>\n<td>+8.52%</td>\n</tr>\n<tr>\n<td>Enzyme</td>\n<td>560</td>\n<td>18.64%</td>\n<td>+16.86%</td>\n</tr>\n<tr>\n<td>Cypress</td>\n<td>378</td>\n<td>12.58%</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>QUnit</td>\n<td>184</td>\n<td>6.12%</td>\n<td>+1.94%</td>\n</tr>\n<tr>\n<td>Ava</td>\n<td>102</td>\n<td>3.39%</td>\n<td>+2.25%</td>\n</tr>\n<tr>\n<td>Tape</td>\n<td>57</td>\n<td>1.90%</td>\n<td>+0.98%</td>\n</tr>\n<tr>\n<td>其他(请注明)</td>\n<td>109</td>\n<td>3.63%</td>\n<td>+3.63%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/3c50268cd9941e8dd2807ecf2a899f0b89926956/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132332e6a7067\"><img src=\"https://camo.githubusercontent.com/3c50268cd9941e8dd2807ecf2a899f0b89926956/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132332e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q23.jpg\" style=\"max-width:100%;\"></a></p>\n<p>和 2018 年一样，Jest 仍然是大多数受访者使用的工具，占 44.86% 。 其次是 Mocha(26.12%)、Jasmine(19.47%)和 Enzyme(18.64%)。</p>\n<p>使用任何工具测试 JavaScript 的开发者比例上升到 64.36% ，比去年增加了 7.98% 。</p>\n<p>我认为今年的结果表明，现在有非常广泛的工具可用来进行 JavaScript 测试。 尽管 Jest 是目前最流行的工具，但在这个领域还有很多其他值得探索的流行选项。</p>\n<h2>Q24 - 性能工具及特点</h2>\n<p>下一个问题是关于开发人员如何在构建项目时考虑性能的新增问题。</p>\n<p>现在有这么多的工具和原生特性，当提到页面性能时，我很好奇哪些工具在整个社区中使用最多。</p>\n<p>我问的问题是，这些工具、库或语言特性中，哪些是你用来帮助提高性能的？ (如有的话)。 受访者可以选择一个或多个选项列出。</p>\n<p>让我们来看看结果:</p>\n<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>投票数</th>\n<th>百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Lighthouse</td>\n<td>1,566</td>\n<td>52.11%</td>\n</tr>\n<tr>\n<td>这些工具都没有</td>\n<td>952</td>\n<td>31.68%</td>\n</tr>\n<tr>\n<td>WebPageTest</td>\n<td>730</td>\n<td>24.29%</td>\n</tr>\n<tr>\n<td>Service Workers</td>\n<td>695</td>\n<td>23.13%</td>\n</tr>\n<tr>\n<td>Pingdom</td>\n<td>317</td>\n<td>10.55%</td>\n</tr>\n<tr>\n<td>AMP (Accelerated Mobile Pages)</td>\n<td>174</td>\n<td>5.79%</td>\n</tr>\n<tr>\n<td>其他(请注明)</td>\n<td>109</td>\n<td>3.63%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/bfefab42a6f226ec27e5ee66b7319c071f6af1b9/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132342e6a7067\"><img src=\"https://camo.githubusercontent.com/bfefab42a6f226ec27e5ee66b7319c071f6af1b9/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132342e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q24.jpg\" style=\"max-width:100%;\"></a></p>\n<p>Lighthouse 是最受受访者欢迎的选择，有 52.11％的人说他们在进行性能测试时使用了它。</p>\n<p>令人惊讶的是，第二受欢迎的选项是“这些工具都没有 ，31.68% 的受访者说他们没有使用任何提到的工具或特性。</p>\n<p>在其他可用的选项中，24.29% 的开发者说他们使用 WebPageTest，23.13% 的开发者说他们在他们的项目中使用了 Service Workers。</p>\n<p>有趣的是，只有 5.79% 的开发者说他们在他们的项目中实现了 AMP (加速移动页面)。 考虑到谷歌在过去几年里为 AMP 的实施所付出的努力，似乎在受访者的使用水平方面仍然是相当小众的。</p>\n<h2>Q25 - 辅助工具</h2>\n<p>今年调查的另一个新问题是，调查受访者对可访问性测试工具的使用水平。</p>\n<p>问题是这些可访问性工具中哪些是你用来测试你的网站 / 应用程序的？ 受访者可以选择指定的一个或多个选项。</p>\n<p>以下是调查结果:</p>\n<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>投票数</th>\n<th>百分比</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>我不使用任何工具来测试我的网站 / 应用程序的可访问性</td>\n<td>1,897</td>\n<td>63.13%</td>\n</tr>\n<tr>\n<td>Colour Contrast Checker (i.e. contrastchecker.com)</td>\n<td>667</td>\n<td>22.20%</td>\n</tr>\n<tr>\n<td>Screenreader (i.e. JAWS, Voiceover)</td>\n<td>464</td>\n<td>15.44%</td>\n</tr>\n<tr>\n<td>WAVE</td>\n<td>285</td>\n<td>9.48%</td>\n</tr>\n<tr>\n<td>其他(请注明)</td>\n<td>282</td>\n<td>9.38%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/06891a367031c6d069fd4cb2bf6b07b496b273e0/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132352e6a7067\"><img src=\"https://camo.githubusercontent.com/06891a367031c6d069fd4cb2bf6b07b496b273e0/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132352e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q25.jpg\" style=\"max-width:100%;\"></a></p>\n<p>令人惊讶的是，63.13% 的受访者表示他们没有使用任何工具来测试他们的项目的可访问性。</p>\n<p>22.20% 的受访者表示他们使用了颜色对比度检查器，只有 15.44% 的人表示他们使用了屏幕阅读器进行可访问性测试。</p>\n<p>我不得不说，这些数字读起来非常令人沮丧。</p>\n<p>看看这些原始数据，你就会发现为什么人们不使用这些工具，但是作为一个相信每个人都有权访问我们正在建设的网站的人，看到几乎三分之二的开发者没有使用工具来测试他们的项目的可访问性是令人失望的。</p>\n<p>像 Wave 和 Axe 这样的工具(很多受访者在“其他工具”下提到过)非常容易使用，如果你还没有使用过，我强烈建议你试试看。</p>\n<p>希望我们能够更多地展示这些工具的价值和易用性，这些使用数字在开发人员中可能会增加更多。</p>\n<h2>Q26 - JavaScript 包管理器</h2>\n<p>今年调查的倒数第二个问题是关于 JS 包管理器的，问题是——您在工作流中主要使用哪个 JavaScript 包管理器？</p>\n<p>去年，NPM 是最受欢迎的软件包管理器，但是 Yarn 在过去的 12 个月里有什么进展吗？</p>\n<p>大家是这样回应的:</p>\n<table>\n<thead>\n<tr>\n<th>回答</th>\n<th>投票数</th>\n<th>百分比</th>\n<th>百分比变化(截至 2018 年)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NPM</td>\n<td>1,965</td>\n<td>65.39%</td>\n<td>+2.00%</td>\n</tr>\n<tr>\n<td>Yarn</td>\n<td>895</td>\n<td>29.78%</td>\n<td>-0.36%</td>\n</tr>\n<tr>\n<td>我不使用包管理器</td>\n<td>135</td>\n<td>4.49%</td>\n<td>-1.24%</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>10</td>\n<td>0.33%</td>\n<td>-0.40%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ad309f834b0e34e004cc66421ca41b68b1c7b78e/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132362e6a7067\"><img src=\"https://camo.githubusercontent.com/ad309f834b0e34e004cc66421ca41b68b1c7b78e/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132362e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q26.jpg\" style=\"max-width:100%;\"></a></p>\n<p>查看调查结果，NPM 的使用率略有增长，65.39% 的受访者说他们现在使用它。</p>\n<p>Yarn 使用率保持相当稳定，下降了一小部分，为 29.78% 。</p>\n<p>总的来说，大多数人似乎很高兴使用 NPM 作为他们的软件包管理器，与去年的数据相比，在这个类别中没有观察到真正的变化。</p>\n<h2>Q27 - 杂项工具</h2>\n<p>最后一个问题考察了各种前端工具的知识水平(其中一些工具不完全适合前面提到的任何类别)。</p>\n<p>被调查者被要求-请说明您使用以下前端工具的经验。</p>\n<p>以下是人们的反应:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>从没听说过</th>\n<th>听说过 / 了解过</th>\n<th>用了一点</th>\n<th>使用时感觉舒适</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NPM</td>\n<td>0.43% (13)</td>\n<td>-0.41%</td>\n<td>1.80% (54)</td>\n<td>-0.69%</td>\n</tr>\n<tr>\n<td>Yarn</td>\n<td>3.29% (99)</td>\n<td>-2.95%</td>\n<td>22.30% (670)</td>\n<td>-4.21%</td>\n</tr>\n<tr>\n<td>Babel</td>\n<td>2.70% (81)</td>\n<td>-1.07%</td>\n<td>16.71% (502)</td>\n<td>-4.22%</td>\n</tr>\n<tr>\n<td>Prettier</td>\n<td>15.67% (471)</td>\n<td>-14.76%</td>\n<td>21.60% (649)</td>\n<td>-8.03%</td>\n</tr>\n<tr>\n<td>Yeoman</td>\n<td>24.76% (744)</td>\n<td>+5.63%</td>\n<td>40.67% (1,222)</td>\n<td>-1.18%</td>\n</tr>\n</tbody>\n</table>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/69945f80770f9d0db3bcb1443954c59a7ea7cea1/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132372e6a7067\"><img src=\"https://camo.githubusercontent.com/69945f80770f9d0db3bcb1443954c59a7ea7cea1/68747470733a2f2f6173686c65796e6f6c616e2e636f2e756b2f6173736574732f696d672f626c6f672f746f6f6c696e672d7375727665792f323031392f7132372e6a7067\" alt=\"\" data-canonical-src=\"https://ashleynolan.co.uk/assets/img/blog/tooling-survey/2019/q27.jpg\" style=\"max-width:100%;\"></a></p>\n<p>在这些工具中，NPM 是大多数受访者认为他们感觉舒服的工具(87.02%)， 和 Babel，分别占 50.62% 和 49.62% ，是开发人员第二熟悉的工具，在过去的 12 个月里，这两个工具的开发人员知识水平都有小幅提升。</p>\n<p>与去年的调查结果相比，最大的变化是现在使用 Prettier 的受访者数量增加了 16.53% ，达到 40.43% 。</p>\n<p>自由开发者的知识水平略有下降，去年也出现了这一趋势。</p>\n<h2>总结</h2>\n<p>这样我们就可以了–在工具方面又是有趣的一年！</p>\n<p>在工具的某些领域，开发人员显然是在围绕一个工具进行整合。 例如，ESLint、 NPM Scripts 和 Webpack 分别用于 JavaScript 的 lint、任务运行和模块打包。</p>\n<p>看看 JavaScript 框架和库，React 保持了它作为受访者中最重要的框架的地位，受访者将 Vue.JS 列为第二重要的 JS 框架 / 库。 很大比例的开发人员(21.66%)仍然认为没有单一的框架或库是必不可少的，原生 JS 每年都在变得更加强大。</p>\n<p>今年调查结果中最令人震惊的数字来自无障碍测试，63.13% 的受访者表示他们没有使用任何工具来测试他们的项目。 作为一个行业，我们必须做得更好——不仅仅是因为这是道德上应该做的正确事情，还因为从法律的角度来看，<a href=\"https://www.zdnet.com/article/supreme-court-lets-blind-man-sue-dominos-over-website-accessibility/\" rel=\"nofollow\">无障碍诉讼正变得越来越普遍</a>。</p>\n<p>在 CSS 工具方面，Sass 仍然是最流行的 CSS 处理器，但是 Bootstrap 的流行度略有下降，因为大多数开发者现在选择不在他们的项目中使用任何 CSS 框架。</p>\n<p>现在有 53.21% 的开发者使用 CSS linter，52.08% 的开发者使用 CSS 命名方案。</p>\n<p>Css in-js 也在以稳定的速度增长，44.69% 的开发人员表示他们使用了 css in-js 工具。</p>\n<p>总的来说，我认为随着我们的前端工具变得更加成熟，整合似乎正在发生，这是令人鼓舞的。 随着更强大的工具的出现，取代这些工具的需求不再那么普遍，我认为我们正在这些结果中看到这一点的证据。</p>\n<p>在大多数工具类别中，现在都有明确的领导者-几年前还没有做到这一点。 这有助于减少知识流失，可能使所有级别的开发人员都可以更轻松地知道在选择新工具时最好在哪里花时间，这只是一件好事。</p>\n<p>再次感谢参加今年活动的每一个人。</p>\n<p>如果任何人对任何结果有任何疑问，请在 <a href=\"https://twitter.com/WelshAsh_\" rel=\"nofollow\">Twitter</a> 上与我联系，我会尽我所能提供帮助。</p>"
  },
  {
    "id": 100,
    "title": "前端开发技术之路",
    "labels": "工具集",
    "created_at": "2019-11-16T04:03:58Z",
    "updated_at": "2019-12-07T16:19:26Z",
    "body_html": "<h2>文章</h2>\n<ul>\n<li><a href=\"https://github.com/hylerrix/fsd-debris/issues/52\" data-hovercard-type=\"issue\" data-hovercard-url=\"/hylerrix-archive/fsd-debris/issues/52/hovercard\">从软件工程专业思考到的大前端技术栈-详情篇</a></li>\n</ul>\n<h2>资源</h2>\n<ul>\n<li><a href=\"https://github.com/webzhao/fe-camp\">fe-camp</a> - 75team front-end camp</li>\n<li><a href=\"https://github.com/wangdoc/javascript-tutorial\">javascript-tutorial</a> - 阮一峰 JavaScript 教程 <a href=\"https://wangdoc.com/javascript\" rel=\"nofollow\">https://wangdoc.com/javascript</a></li>\n<li><a href=\"https://github.com/ruanyf/jstraining\">jstraining</a> 全栈工程师培训材料</li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312\" rel=\"nofollow\">JavaScript 全栈教程</a> - 廖雪峰</li>\n<li><a href=\"https://github.com/veedrin/horseshoe\">horseshoe</a> 代号马蹄铁。以专题为单位的学习。目前已发布 { Async 专题 } { Grid 专题 } { Flex 专题 } { Git 专题 } { Regex 专题 } { Redux 专题 } { React 专题 }</li>\n<li>The Modern JavaScript Tutorial（<a href=\"https://zh.javascript.info/\" rel=\"nofollow\">中文</a>，<a href=\"https://javascript.info/\" rel=\"nofollow\">英文</a>）</li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a></li>\n<li>React\n<ul>\n<li><a href=\"https://github.com/huzidaha/react-naive-book\">react-naive-book</a> - <a href=\"http://huziketang.mangojuice.top/books/react/\" rel=\"nofollow\">React.js 小书</a></li>\n<li>react-bits （<a href=\"https://github.com/hateonion/react-bits-CN\">中文</a>， <a href=\"https://github.com/vasanthk/react-bits\">英文</a>）</li>\n<li><a href=\"https://github.com/krasimir/\">react-in-patterns</a> - React 编程模式</li>\n<li><a href=\"https://github.com/tyroprogrammer/learn-react-app/tree/master/src/tutorial\">learn-react-app</a> - React 应用开发教程</li>\n</ul>\n</li>\n<li>Redux\n<ul>\n<li>redux-tutorial（<a href=\"https://github.com/react-guide/redux-tutorial-cn\">中文</a>，<a href=\"https://github.com/happypoulp/redux-tutorial/\">英文</a>）- Learn how to use redux step by step</li>\n<li><a href=\"https://github.com/kenberkeley/redux-simple-tutorial\">redux-simple-tutorial</a> - Redux 莞式教程</li>\n</ul>\n</li>\n<li><a href=\"http://es6.ruanyifeng.com/\" rel=\"nofollow\">ECMAScript 6 入门</a></li>\n<li><a href=\"https://github.com/nzakas/understandinges6/tree/master/manuscript\">understandinges6</a> - 理解 ES6</li>\n<li>探索 ES 标准 系列\n<ul>\n<li><a href=\"https://exploringjs.com/es6/\" rel=\"nofollow\">探索 ES6</a></li>\n<li><a href=\"https://exploringjs.com/es2016-es2017.html\" rel=\"nofollow\">探索 ES2016 和 ES2017</a></li>\n<li><a href=\"https://exploringjs.com/es2018-es2019/toc.html\" rel=\"nofollow\">探索 ES2018 和 ES2019</a></li>\n</ul>\n</li>\n<li><a href=\"https://fullstackopen.com/en\" rel=\"nofollow\">现代 Web 开发</a> - Nodejs + React 的在线互动教程。</li>\n<li><a href=\"https://github.com/nswbmw/node-in-debugging\">node-in-debugging</a> - Node.js 调试指南</li>\n<li><a href=\"https://www.netlify.com/oreilly-jamstack/\" rel=\"nofollow\">JAMstack Web 开发</a></li>\n<li><a href=\"https://github.com/danistefanovic/build-your-own-x\">build-your-own-x</a> <g-emoji class=\"g-emoji\" alias=\"nerd_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f913.png\">🤓</g-emoji> Build your own (insert technology here)</li>\n<li><a href=\"https://github.com/FrontendMasters/front-end-handbook-2019\">front-end-handbook-2019</a> / <a href=\"https://www.yuque.com/ysfe/ykx/fedhb#c9cee830\" rel=\"nofollow\"> 中文</a></li>\n</ul>\n<h2>知乎</h2>\n<p><strong>提问</strong></p>\n<blockquote>\n<p>不适合关注问题，适合收藏</p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/350289336\" rel=\"nofollow\">一年内的前端看不懂前端框架源码怎么办？</a></li>\n<li><a href=\"https://www.zhihu.com/question/61283395\" rel=\"nofollow\">Git commits历史是如何做到如此清爽的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/29940477\" rel=\"nofollow\">可以通过什么途径了解前端研发的最新资讯？</a></li>\n<li><a href=\"https://www.zhihu.com/question/21176891\" rel=\"nofollow\">node.js能开发大型网站吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/286700472\" rel=\"nofollow\">前端未来几年的发展方向是什么？</a></li>\n<li><a href=\"https://www.zhihu.com/question/277068649\" rel=\"nofollow\">前端界有哪些值得一读的中大型轮子？</a></li>\n<li><a href=\"https://www.zhihu.com/question/268677313\" rel=\"nofollow\">从事前端真的没有后端工资高？</a></li>\n<li><a href=\"https://www.zhihu.com/question/22508677\" rel=\"nofollow\">编程到底难在哪里？</a> / <a href=\"https://www.zhihu.com/question/311432227\" rel=\"nofollow\">编程究竟难在哪？</a></li>\n<li><a href=\"https://www.zhihu.com/question/58731753\" rel=\"nofollow\">Web Component 和类 React、Angular、Vue 组件化技术谁会成为未来？</a></li>\n<li><a href=\"https://www.zhihu.com/question/23148377\" rel=\"nofollow\">程序员必须掌握哪些算法？</a></li>\n</ul>\n<p><strong>Live</strong></p>\n<ul>\n<li><a href=\"https://github.com/hylerrix/fsd-debris/issues/49\" data-hovercard-type=\"issue\" data-hovercard-url=\"/hylerrix-archive/fsd-debris/issues/49/hovercard\">尤雨溪 - 不吹不黑聊聊前端框架</a></li>\n</ul>\n<h2>其他资源</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/\" rel=\"nofollow\">MDN</a>\n<ul>\n<li><a href=\"http://code.ciaoca.com/style/css-cheat-sheet/\" rel=\"nofollow\">Css 速查表</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ruanyf/weekly\">weekly</a> , by <a href=\"https://github.com/ruanyf/weekly\">ruanyifeng</a></li>\n<li><a href=\"https://github.com/dt-fe/weekly\">weekly</a> 前端精读周刊</li>\n<li><a href=\"https://github.com/521xueweihan/HelloGitHub\">HelloGitHub</a> - <a href=\"https://hellogithub.com\" rel=\"nofollow\">分享 GitHub 上有趣、入门级的开源项目</a></li>\n<li><a href=\"https://github.com/jaywcjlove/github-rank\">github-rank</a> - <a href=\"https://github.com/jaywcjlove/github-rank\">Github Users Ranking</a></li>\n</ul>\n<h2>风向标</h2>\n<ul>\n<li><a href=\"https://2018.stateofjs.com/\" rel=\"nofollow\">The State of JavaScript 2018</a></li>\n<li><a href=\"https://bestofjs.org/\" rel=\"nofollow\">bestofjs</a></li>\n<li><a href=\"https://ashleynolan.co.uk/blog/frontend-tooling-survey-2019-results\" rel=\"nofollow\">frontend-tooling-survey-2019-results</a></li>\n</ul>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://github.com/ruanyf/free-books\">https://github.com/ruanyf/free-books</a></li>\n<li><a href=\"https://github.com/FrontendMasters/front-end-handbook-2019\">https://github.com/FrontendMasters/front-end-handbook-2019</a></li>\n</ul>"
  },
  {
    "id": 99,
    "title": "手把手教你用原生JavaScript造轮子——分页器",
    "labels": "精读",
    "created_at": "2019-11-16T03:48:26Z",
    "updated_at": "2019-12-30T04:38:58Z",
    "body_html": "<h2>前言</h2>\n<p>学习制造可以在生产环境使用的轮子，Start ！</p>\n<ul>\n<li><a href=\"\">csdoker</a>\n<ul>\n<li><a href=\"https://juejin.im/post/5b592635e51d4533d2043e15\" rel=\"nofollow\">原文</a></li>\n<li><a href=\"https://github.com/csdoker/csdwheels\">source code</a> / <a href=\"https://github.com/csdoker/csdwheels/blob/master/src/es5/pagination/pagination.js\">pagination</a></li>\n<li><a href=\"https://csdoker.github.io/csdemos/pagination/\" rel=\"nofollow\">Demo-pagination</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/FrankFang/\">FrankFang</a>\n<ul>\n<li><a href=\"https://github.com/FrankFang/wheels/blob/master/lib/pager/index.js\">source code</a> / <a href=\"https://fangyinghang.com/wheels/demos/pager.html\" rel=\"nofollow\">Demo</a></li>\n</ul>\n</li>\n</ul>\n<h2>插件设计分析</h2>\n<p>开发插件最重要的一点，就是插件的兼容性，一个插件至少要能同时在几种不同的环境中运行（<strong>UMD 模块机制</strong>）。</p>\n<p>其次，它还需要满足以下几种功能及条件：</p>\n<ol>\n<li>插件自身的作用域与用户当前的作用域相互独立，也就是插件内部的私有变量不能影响使用者的环境变量；（<strong>IIFE</strong>）</li>\n<li>插件需具备默认设置参数；插件除了具备已实现的基本功能外，需提供部分 API，使用者可以通过该 API 修改插件功能的默认参数，从而实现用户自定义插件效果；（<strong>默认参数设计 + exend 扩展接口</strong>）</li>\n<li>插件支持链式调用；（<strong>不做考虑</strong>）</li>\n<li>插件需提供监听入口，及针对指定元素进行监听，使得该元素与插件响应达到插件效果。（<strong>添加事件相关辅助函数</strong>）</li>\n</ol>\n<p>基础模板：</p>\n<div class=\"highlight highlight-source-js\"><pre>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">root</span>, <span class=\"pl-smi\">factory</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">typeof</span> define <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>function<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-smi\">define</span>.<span class=\"pl-smi\">amd</span>) {\n    <span class=\"pl-en\">define</span>([], factory);\n  } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-k\">typeof</span> <span class=\"pl-c1\">module</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>object<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span>) {\n    <span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">factory</span>();\n  } <span class=\"pl-k\">else</span> {\n    <span class=\"pl-smi\">root</span>.<span class=\"pl-smi\">Plugin</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">factory</span>();\n  }\n})(<span class=\"pl-k\">typeof</span> self <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>undefined<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">?</span> self <span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>, <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>use strict<span class=\"pl-pds\">\"</span></span>;\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> tool</span>\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">extend</span>(<span class=\"pl-smi\">o</span>, <span class=\"pl-smi\">n</span>, <span class=\"pl-smi\">override</span>) {\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> p <span class=\"pl-k\">in</span> n) {\n      <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">n</span>.<span class=\"pl-en\">hasOwnProperty</span>(p) <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">o</span>.<span class=\"pl-en\">hasOwnProperty</span>(p) <span class=\"pl-k\">||</span> override))\n        o[p] <span class=\"pl-k\">=</span> n[p];\n    }\n  }\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> polyfill</span>\n  <span class=\"pl-k\">var</span> EventUtil <span class=\"pl-k\">=</span> {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>  https://www.cnblogs.com/hykun/p/EventUtil.html</span>\n  };\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> plugin construct function</span>\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">Plugin</span>(<span class=\"pl-smi\">selector</span>, <span class=\"pl-smi\">userOptions</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Plugin() or new Plugin()</span>\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>(<span class=\"pl-c1\">this</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Plugin</span>)) <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Plugin</span>(selector, userOptions);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">init</span>(selector, userOptions);\n  }\n  <span class=\"pl-c1\">Plugin</span>.<span class=\"pl-c1\">prototype</span> <span class=\"pl-k\">=</span> {\n    <span class=\"pl-en\">constructor</span>: Plugin,\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> default option</span>\n    options: {},\n    init: <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">selector</span>, <span class=\"pl-smi\">userOptions</span>) {\n      <span class=\"pl-en\">extend</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>, userOptions, <span class=\"pl-c1\">true</span>);\n    }\n  };\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Plugin</span>;\n});</pre></div>\n<h2>思路分析</h2>\n<p>要实现的分页效果是什么样的，分成两种情况，显示和不显示省略号的</p>\n<p><strong>第一种： 不显示省略号</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 总共30页</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 第一种情况：不显示省略号，当前页码前后最多显示2个页码</span>\n当前页码为 <span class=\"pl-c1\">1</span>，那么显示 <span class=\"pl-c1\">1</span> <span class=\"pl-c1\">2</span> <span class=\"pl-c1\">3</span> <span class=\"pl-c1\">4</span> <span class=\"pl-c1\">5</span>\n当前页码为 <span class=\"pl-c1\">2</span>，那么显示 <span class=\"pl-c1\">1</span> <span class=\"pl-c1\">2</span> <span class=\"pl-c1\">3</span> <span class=\"pl-c1\">4</span> <span class=\"pl-c1\">5</span>\n当前页码为 <span class=\"pl-c1\">3</span>，那么显示 <span class=\"pl-c1\">1</span> <span class=\"pl-c1\">2</span> <span class=\"pl-c1\">3</span> <span class=\"pl-c1\">4</span> <span class=\"pl-c1\">5</span>\n当前页码为 <span class=\"pl-c1\">4</span>，那么显示 <span class=\"pl-c1\">2</span> <span class=\"pl-c1\">3</span> <span class=\"pl-c1\">4</span> <span class=\"pl-c1\">5</span> <span class=\"pl-c1\">6</span>\n<span class=\"pl-k\">...</span>\n当前页码为 <span class=\"pl-c1\">15</span>，那么显示 <span class=\"pl-c1\">13</span> <span class=\"pl-c1\">14</span> <span class=\"pl-c1\">15</span> <span class=\"pl-c1\">16</span> <span class=\"pl-c1\">17</span>\n<span class=\"pl-k\">...</span>\n当前页码为 <span class=\"pl-c1\">27</span>，那么显示 <span class=\"pl-c1\">25</span> <span class=\"pl-c1\">26</span> <span class=\"pl-c1\">27</span> <span class=\"pl-c1\">28</span> <span class=\"pl-c1\">29</span>\n当前页码为 <span class=\"pl-c1\">28</span>，那么显示 <span class=\"pl-c1\">26</span> <span class=\"pl-c1\">27</span> <span class=\"pl-c1\">28</span> <span class=\"pl-c1\">29</span> <span class=\"pl-c1\">30</span>\n当前页码为 <span class=\"pl-c1\">29</span>，那么显示 <span class=\"pl-c1\">26</span> <span class=\"pl-c1\">27</span> <span class=\"pl-c1\">28</span> <span class=\"pl-c1\">29</span> <span class=\"pl-c1\">30</span>\n当前页码为 <span class=\"pl-c1\">30</span>，那么显示 <span class=\"pl-c1\">26</span> <span class=\"pl-c1\">27</span> <span class=\"pl-c1\">28</span> <span class=\"pl-c1\">29</span> <span class=\"pl-c1\">30</span></pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> total <span class=\"pl-k\">=</span> <span class=\"pl-c1\">30</span>;\n<span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>; i <span class=\"pl-k\">&lt;=</span> total; i<span class=\"pl-k\">++</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">showPages</span>(i, total, <span class=\"pl-c1\">2</span>));\n}\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">showPages</span>(<span class=\"pl-smi\">page</span>, <span class=\"pl-smi\">total</span>, <span class=\"pl-smi\">show</span>) {\n  <span class=\"pl-k\">var</span> str <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>;\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页前无空余页数，不需要位移 1，2 ，3，4，5</span>\n  <span class=\"pl-k\">if</span> (page <span class=\"pl-k\">&lt;</span> show <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>) {\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>; i <span class=\"pl-k\">&lt;=</span> show <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>; i<span class=\"pl-k\">++</span>) {\n      str <span class=\"pl-k\">=</span> str <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> i;\n    }\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页后无空余页数，不需要位移 26 27 28 29 30</span>\n  } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (page <span class=\"pl-k\">&gt;</span> total <span class=\"pl-k\">-</span> show) {\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> total <span class=\"pl-k\">-</span> show <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>; i <span class=\"pl-k\">&lt;=</span> total; i<span class=\"pl-k\">++</span>) {\n      str <span class=\"pl-k\">=</span> str <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> i;\n    }\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页有空余页数，拥有位移</span>\n  } <span class=\"pl-k\">else</span> {\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> page <span class=\"pl-k\">-</span> show; i <span class=\"pl-k\">&lt;=</span> page <span class=\"pl-k\">+</span> show; i<span class=\"pl-k\">++</span>) {\n      str <span class=\"pl-k\">=</span> str <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> i;\n    }\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">str</span>.<span class=\"pl-en\">trim</span>();\n}</pre></div>\n<p>打印结果：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ca911ae5f7668ddac384ba8b411f34965d587c75/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643433643764613963363330393f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31\"><img src=\"https://camo.githubusercontent.com/ca911ae5f7668ddac384ba8b411f34965d587c75/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f372f32362f313634643433643764613963363330393f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31\" alt=\"\" data-canonical-src=\"https://user-gold-cdn.xitu.io/2018/7/26/164d43d7da9c6309?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" style=\"max-width:100%;\"></a></p>\n<p><strong>第二种： 显示省略号</strong></p>\n<p>待分析...</p>\n<h2>基本架构</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 模仿jQuery $()</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">$</span>(<span class=\"pl-smi\">selector</span>, <span class=\"pl-smi\">context</span>) {\n  context <span class=\"pl-k\">=</span> <span class=\"pl-c1\">arguments</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">?</span> context <span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>;\n  <span class=\"pl-k\">return</span> context <span class=\"pl-k\">?</span> <span class=\"pl-smi\">context</span>.<span class=\"pl-c1\">querySelectorAll</span>(selector) <span class=\"pl-k\">:</span> <span class=\"pl-c1\">null</span>;\n}\n<span class=\"pl-k\">var</span> <span class=\"pl-en\">Pagination</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">selector</span>, <span class=\"pl-smi\">pageOption</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 默认配置</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span> <span class=\"pl-k\">=</span> {\n    curr<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页码</span>\n    pageShow<span class=\"pl-k\">:</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页前后两边可显示的页码个数（选填，默认为2）</span>\n    ellipsis<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 是否显示省略号</span>\n    hash<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>\n  };\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 合并配置</span>\n  <span class=\"pl-en\">extend</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>, pageOption, <span class=\"pl-c1\">true</span>);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 分页器元素</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageElement</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">$</span>(selector)[<span class=\"pl-c1\">0</span>];\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 数据总数</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">dataCount</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">count</span>;\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页码</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">curr</span>;\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 总页数</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageCount</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">ceil</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">limit</span>);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 渲染</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">renderPages</span>();\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 执行回调函数</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">callback</span> <span class=\"pl-k\">&amp;&amp;</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-en\">callback</span>({\n      curr<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span>,\n      limit<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">limit</span>,\n      isFirst<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n    });\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 改变页数并触发事件</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">changePage</span>();\n};\n\n<span class=\"pl-smi\">Pagination</span>.<span class=\"pl-c1\">prototype</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">constructor</span>: Pagination,\n  changePage: <span class=\"pl-k\">function</span>() {}\n};\n\n<span class=\"pl-k\">return</span> Pagination;</pre></div>\n<p><strong>基本参数</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 分页元素ID（必填）</span>\n<span class=\"pl-k\">var</span> selector <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#pagelist<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 分页配置</span>\n<span class=\"pl-k\">var</span> pageOption <span class=\"pl-k\">=</span> {\n  limit<span class=\"pl-k\">:</span> <span class=\"pl-c1\">5</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 每页显示数据条数（必填）</span>\n  count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">162</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 数据总数（一般通过后端获取，必填）</span>\n  curr<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页码（选填，默认为1）</span>\n  ellipsis<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 是否显示省略号（选填，默认显示）</span>\n  pageShow<span class=\"pl-k\">:</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页前后两边可显示的页码个数（选填，默认为2）</span>\n  hash<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 开启location.hash，并自定义hash值对追加 #!hash值={curr} （默认关闭）</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 页面加载后默认执行一次，然后当分页被切换时再次触发</span>\n  <span class=\"pl-en\">callback</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">obj</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> obj.curr：获取当前页码</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> obj.limit：获取每页显示数据条数</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> obj.isFirst：是否首次加载页面，一般用于初始加载的判断</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 首次不执行</span>\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">obj</span>.<span class=\"pl-smi\">isFirst</span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> do something</span>\n    }\n  }\n};\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 初始化分页器</span>\n<span class=\"pl-k\">new</span> <span class=\"pl-en\">Pagination</span>(selector, pageOption);</pre></div>\n<h2>事件绑定</h2>\n<p>对分页器进行点击事件的绑定，<code>changePage()</code>方法，对各项点击事件的监听重新渲染 <code>renderPages</code></p>\n<h2>渲染 DOM</h2>\n<p>期望渲染效果：</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">ol</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagelist<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-item<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>page<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-link current<span class=\"pl-pds\">\"</span></span>&gt;1&lt;/<span class=\"pl-ent\">a</span>&gt;\n  &lt;/<span class=\"pl-ent\">li</span>&gt;\n  &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-item<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>page<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-link<span class=\"pl-pds\">\"</span></span>&gt;2&lt;/<span class=\"pl-ent\">a</span>&gt;\n  &lt;/<span class=\"pl-ent\">li</span>&gt;\n  &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-item<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>page<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-link<span class=\"pl-pds\">\"</span></span>&gt;3&lt;/<span class=\"pl-ent\">a</span>&gt;\n  &lt;/<span class=\"pl-ent\">li</span>&gt;\n  &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-item<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>page<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-link<span class=\"pl-pds\">\"</span></span>&gt;4&lt;/<span class=\"pl-ent\">a</span>&gt;\n  &lt;/<span class=\"pl-ent\">li</span>&gt;\n  &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-item<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>page<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-link<span class=\"pl-pds\">\"</span></span>&gt;5&lt;/<span class=\"pl-ent\">a</span>&gt;\n  &lt;/<span class=\"pl-ent\">li</span>&gt;\n  &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-item<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>next<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-link<span class=\"pl-pds\">\"</span></span>&gt;后一页&lt;/<span class=\"pl-ent\">a</span>&gt;\n  &lt;/<span class=\"pl-ent\">li</span>&gt;\n  &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-item<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>last<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pagination-link<span class=\"pl-pds\">\"</span></span>&gt;尾页&lt;/<span class=\"pl-ent\">a</span>&gt;\n  &lt;/<span class=\"pl-ent\">li</span>&gt;\n&lt;/<span class=\"pl-ent\">ol</span>&gt;</pre></div>\n<p>在这里仅分析下没有省略号的情况,<code>renderPages</code>渲染页面实际执行下面的 <code>renderNoEllipsis</code>方法</p>\n<div class=\"highlight highlight-source-js\"><pre> <span class=\"pl-en\">renderNoEllipsis</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-k\">var</span> fragment <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createDocumentFragment</span>();\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 处理当前 pageNumber 刚开始，没有位移的情况</span>\n      <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">pageShow</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>) {\n        <span class=\"pl-smi\">fragment</span>.<span class=\"pl-c1\">appendChild</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-en\">renderDom</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">pageShow</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>));\n     <span class=\"pl-c\"><span class=\"pl-c\">//</span> 处理当前 pageNumber 快结束，没有位移的情况</span>\n      } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageCount</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">pageShow</span>) {\n        <span class=\"pl-smi\">fragment</span>.<span class=\"pl-c1\">appendChild</span>(\n          <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">renderDom</span>(\n            <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageCount</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">pageShow</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>,\n            <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageCount</span>\n          )\n        );\n      } <span class=\"pl-k\">else</span> {\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 有位移</span>\n        <span class=\"pl-smi\">fragment</span>.<span class=\"pl-c1\">appendChild</span>(\n          <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">renderDom</span>(\n            <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">pageShow</span>,\n            <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">pageShow</span>\n          )\n        );\n      }\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 加首页以及前一页</span>\n      <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1</span>) {\n        <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">addFragmentBefore</span>(fragment, [\n          <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageInfos</span>[<span class=\"pl-c1\">0</span>],\n          <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageInfos</span>[<span class=\"pl-c1\">1</span>]\n        ]);\n      }\n       <span class=\"pl-c\"><span class=\"pl-c\">//</span> 加后一页和尾页</span>\n      <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageCount</span>) {\n        <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">addFragmentAfter</span>(fragment, [<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageInfos</span>[<span class=\"pl-c1\">2</span>], <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageInfos</span>[<span class=\"pl-c1\">3</span>]]);\n      }\n      <span class=\"pl-k\">return</span> fragment;\n    },</pre></div>\n<p><strong>核心工具函数</strong></p>\n<ul>\n<li><code>renderDom</code>,DOM 操作实现 <strong>思路分析</strong>中的<code>for</code>循环：</li>\n<li><code>addFragmentAfter</code>DOM 结构向后插入，向前插入 <code>addFragmentBefore</code></li>\n<li><code>createHtml</code> 生成单个渲染页码 <code>html</code>结构\n<ul>\n<li><code>&lt;li class=\"pagination-item\"&gt;&lt;a href=\"javascript:;\" id=\"page\" class=\"pagination-link\"&gt;5&lt;/a&gt; &lt;/li&gt;</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">renderDom</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">begin</span>, <span class=\"pl-smi\">end</span>) {\n  <span class=\"pl-k\">var</span> fragment <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createDocumentFragment</span>();\n  <span class=\"pl-k\">var</span> str <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>;\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> begin; i <span class=\"pl-k\">&lt;=</span> end; i<span class=\"pl-k\">++</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> str 为 clasName</span>\n    str <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">===</span> i <span class=\"pl-k\">?</span> <span class=\"pl-c1\">CLASS_NAME</span>.<span class=\"pl-c1\">LINK</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> current<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-c1\">CLASS_NAME</span>.<span class=\"pl-c1\">LINK</span>;\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">addFragmentAfter</span>(fragment, [<span class=\"pl-c1\">this</span>.<span class=\"pl-en\">getPageInfos</span>(str, i)]);\n  }\n  <span class=\"pl-k\">return</span> fragment;\n}\n\n<span class=\"pl-en\">addFragmentBefore</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">fragment</span>, <span class=\"pl-smi\">datas</span>) {\n  <span class=\"pl-smi\">fragment</span>.<span class=\"pl-c1\">insertBefore</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-en\">createHtml</span>(datas), <span class=\"pl-smi\">fragment</span>.<span class=\"pl-c1\">firstChild</span>);\n}\n\n<span class=\"pl-en\">addFragmentAfter</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">fragment</span>, <span class=\"pl-smi\">datas</span>) {\n  <span class=\"pl-smi\">fragment</span>.<span class=\"pl-c1\">appendChild</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-en\">createHtml</span>(datas));\n}\n<span class=\"pl-en\">createHtml</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">elemDatas</span>) {\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   [ { className: \"pagination-link current\", content: 1, id: \"page\" } ];</span>\n  <span class=\"pl-k\">var</span> self <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n  <span class=\"pl-k\">var</span> fragment <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createDocumentFragment</span>();\n  <span class=\"pl-k\">var</span> liEle <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>li<span class=\"pl-pds\">\"</span></span>);\n  <span class=\"pl-k\">var</span> aEle <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>);\n  <span class=\"pl-smi\">elemDatas</span>.<span class=\"pl-c1\">forEach</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">v</span>, <span class=\"pl-smi\">index</span>) {\n    <span class=\"pl-smi\">liEle</span>.<span class=\"pl-c1\">setAttribute</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>class<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">CLASS_NAME</span>.<span class=\"pl-c1\">ITEM</span>);\n    <span class=\"pl-smi\">aEle</span>.<span class=\"pl-c1\">setAttribute</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>href<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span>);\n    <span class=\"pl-smi\">aEle</span>.<span class=\"pl-c1\">setAttribute</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">id</span>);\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">id</span> <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>page<span class=\"pl-pds\">'</span></span>) {\n      <span class=\"pl-smi\">aEle</span>.<span class=\"pl-c1\">setAttribute</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>class<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">CLASS_NAME</span>.<span class=\"pl-c1\">LINK</span>);\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-smi\">aEle</span>.<span class=\"pl-c1\">setAttribute</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>class<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">className</span>);\n    }\n    <span class=\"pl-smi\">aEle</span>.<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">v</span>.<span class=\"pl-c1\">content</span>;\n    <span class=\"pl-smi\">liEle</span>.<span class=\"pl-c1\">appendChild</span>(aEle);\n    <span class=\"pl-smi\">fragment</span>.<span class=\"pl-c1\">appendChild</span>(liEle);\n  });\n  <span class=\"pl-k\">return</span> fragment;\n}</pre></div>\n<blockquote>\n<p>细节优化：<code>document.createDocumentFragment</code> API, 创建一个临时占位符再插入 DOM，避免 DOM 操作时的重绘和回流，提高页面性能</p>\n</blockquote>\n<h2>ES6 升级</h2>\n<p><strong>环境配置</strong></p>\n<p>采用 <code>webpack</code>打包构建流程：</p>\n<ol>\n<li>寻找到<code>./src/es6/</code>目录下面的 <code>index.js</code> 项目入口文件</li>\n<li>使用 <code>Babel</code> 编译它及它所引用的所有依赖（如 Scss、css 文件等）</li>\n<li>压缩编译完成后的 js 文件，配置为 <strong>umd</strong> 规范，重命名为 csdwheels.min.js</li>\n<li>清空 dist-es6 目录</li>\n<li>输出至 dist-es6 目录下</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> webpack.config.js</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">path</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">UglifyJsPlugin</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>uglifyjs-webpack-plugin<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">CleanWebpackPlugin</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>clean-webpack-plugin<span class=\"pl-pds\">\"</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>每次构建清理dist目录</span>\n\n<span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 模式配置</span>\n  mode<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>development<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 入口文件</span>\n  entry<span class=\"pl-k\">:</span> {\n    pagination<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./src/es6/index.js<span class=\"pl-pds\">\"</span></span>\n  },\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 出口文件</span>\n  output<span class=\"pl-k\">:</span> {\n    path<span class=\"pl-k\">:</span> <span class=\"pl-smi\">path</span>.<span class=\"pl-en\">resolve</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist-es6<span class=\"pl-pds\">\"</span></span>),\n    filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>csdwheels.min.js<span class=\"pl-pds\">\"</span></span>,\n    libraryTarget<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>umd<span class=\"pl-pds\">\"</span></span>,\n    library<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>csdwheels<span class=\"pl-pds\">\"</span></span>\n  },\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 对应的插件</span>\n  plugins<span class=\"pl-k\">:</span> [\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">CleanWebpackPlugin</span>([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist-es6<span class=\"pl-pds\">\"</span></span>]),\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">UglifyJsPlugin</span>({\n      test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>js(<span class=\"pl-k\">$</span><span class=\"pl-k\">|</span><span class=\"pl-cce\">\\?</span>)<span class=\"pl-pds\">/</span>i</span>\n    })\n  ],\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 开发服务器配置</span>\n  devServer<span class=\"pl-k\">:</span> {},\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 处理对应模块</span>\n  module<span class=\"pl-k\">:</span> {\n    rules<span class=\"pl-k\">:</span> [\n      {\n        test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>js<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n        include<span class=\"pl-k\">:</span> <span class=\"pl-smi\">path</span>.<span class=\"pl-c1\">join</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src/es6<span class=\"pl-pds\">\"</span></span>),\n        exclude<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span>node_modules<span class=\"pl-pds\">/</span></span>,\n        use<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-loader<span class=\"pl-pds\">\"</span></span>]\n      },\n      {\n        test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>scss<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n        use<span class=\"pl-k\">:</span> [\n          {\n            loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>style-loader<span class=\"pl-pds\">\"</span></span>\n          },\n          {\n            loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>css-loader<span class=\"pl-pds\">\"</span></span>\n          },\n          {\n            loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sass-loader<span class=\"pl-pds\">\"</span></span>\n          }\n        ]\n      }\n    ]\n  }\n};</pre></div>\n<p><strong>代码重构</strong></p>\n<p>使用 ES6 中的 <code>Class</code>重构代码，<a href=\"https://github.com/csdoker/csdwheels/blob/master/src/es6/pagination/pagination.js\">源码</a></p>\n<p>梳理改造过程：</p>\n<ul>\n<li>const、let 替换 var</li>\n<li>用 constructor 实现构造函数</li>\n<li>箭头函数替换 function</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>../../../style/pagination/pagination.scss<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Pagination</span> {\n  <span class=\"pl-k\">static</span> <span class=\"pl-c1\">PAGE_INFOS</span> <span class=\"pl-k\">=</span> [\n    {\n      id<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>first<span class=\"pl-pds\">\"</span></span>,\n      content<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>首页<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      id<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>prev<span class=\"pl-pds\">\"</span></span>,\n      content<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>前一页<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      id<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>next<span class=\"pl-pds\">\"</span></span>,\n      content<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>后一页<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      id<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>last<span class=\"pl-pds\">\"</span></span>,\n      content<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>尾页<span class=\"pl-pds\">\"</span></span>\n    },\n    {\n      id<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>,\n      content<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>...<span class=\"pl-pds\">\"</span></span>\n    }\n  ];\n\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">selector</span>, <span class=\"pl-smi\">options</span> <span class=\"pl-k\">=</span> {}) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 默认配置</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span> <span class=\"pl-k\">=</span> {\n      curr<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n      pageShow<span class=\"pl-k\">:</span> <span class=\"pl-c1\">2</span>,\n      ellipsis<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n      hash<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>\n    };\n    <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">assign</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>, options);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">init</span>(selector);\n  }\n\n  <span class=\"pl-en\">changePage</span>() {}\n\n  <span class=\"pl-en\">init</span>(<span class=\"pl-smi\">selector</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 分页器元素</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageElement</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">$</span>(selector)[<span class=\"pl-c1\">0</span>];\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 数据总数</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">dataCount</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">count</span>;\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前页码</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">curr</span>;\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 总页数</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageCount</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">ceil</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">limit</span>);\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 渲染</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">renderPages</span>();\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 执行回调函数</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">callback</span> <span class=\"pl-k\">&amp;&amp;</span>\n      <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-en\">callback</span>({\n        curr<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">pageNumber</span>,\n        limit<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">limit</span>,\n        isFirst<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n      });\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 改变页数并触发事件</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">changePage</span>();\n  }\n}\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">Pagination</span>;</pre></div>\n<blockquote>\n<p>补充：ES7 新提案的 static 语法，添加 babel 语法转换 <code>npm i babel-preset-stage-0 -D</code></p>\n</blockquote>\n<h2>FrankFang 的 分页分析</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Pager</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">options</span>) {\n    <span class=\"pl-k\">let</span> defaultOptions <span class=\"pl-k\">=</span> {\n      element<span class=\"pl-k\">:</span> <span class=\"pl-c1\">null</span>,\n      buttonCount<span class=\"pl-k\">:</span> <span class=\"pl-c1\">10</span>,\n      currentPage<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n      totalPage<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n      pageQuery<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 'page'</span>\n      templates<span class=\"pl-k\">:</span> {\n        number<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;span&gt;%page%&lt;/span&gt;<span class=\"pl-pds\">\"</span></span>,\n        prev<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;button class=prev&gt;上一页&lt;/button&gt;<span class=\"pl-pds\">\"</span></span>,\n        next<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;button class=next&gt;下一页&lt;/button&gt;<span class=\"pl-pds\">\"</span></span>,\n        first<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;button class=first&gt;首页&lt;/button&gt;<span class=\"pl-pds\">\"</span></span>,\n        last<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;button class=last&gt;末页&lt;/button&gt;<span class=\"pl-pds\">\"</span></span>\n      }\n    };\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">assign</span>({}, defaultOptions, options);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">domRefs</span> <span class=\"pl-k\">=</span> {};\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">currentPage</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">parseInt</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">currentPage</span>, <span class=\"pl-c1\">10</span>) <span class=\"pl-k\">||</span> <span class=\"pl-c1\">1</span>;\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">checkOptions</span>()\n      .<span class=\"pl-en\">initHtml</span>()\n      .<span class=\"pl-en\">bindEvents</span>();\n  }\n  <span class=\"pl-en\">checkOptions</span>() {}\n  <span class=\"pl-en\">bindEvents</span>() {}\n  <span class=\"pl-en\">goToPage</span>(<span class=\"pl-smi\">page</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>page <span class=\"pl-k\">||</span> page <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">totalPage</span> <span class=\"pl-k\">||</span> page <span class=\"pl-k\">===</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">currentPage</span>) {\n      <span class=\"pl-k\">return</span>;\n    }\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">currentPage</span> <span class=\"pl-k\">=</span> page;\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">rerender</span>();\n  }\n  <span class=\"pl-en\">rerender</span>() {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">_checkButtons</span>();\n    <span class=\"pl-k\">let</span> newNumbers <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">_createNumbers</span>();\n    <span class=\"pl-k\">let</span> oldNumbers <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">domRefs</span>.<span class=\"pl-smi\">numbers</span>;\n    <span class=\"pl-smi\">oldNumbers</span>.<span class=\"pl-c1\">parentNode</span>.<span class=\"pl-c1\">replaceChild</span>(newNumbers, oldNumbers);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">domRefs</span>.<span class=\"pl-smi\">numbers</span> <span class=\"pl-k\">=</span> newNumbers;\n  }\n  <span class=\"pl-en\">initHtml</span>() {\n    <span class=\"pl-k\">let</span> pager <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">domRefs</span>.<span class=\"pl-smi\">pager</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nav<span class=\"pl-pds\">\"</span></span>));\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">domRefs</span>.<span class=\"pl-c1\">next</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">dom</span>.<span class=\"pl-en\">create</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">templates</span>.<span class=\"pl-c1\">next</span>);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">_checkButtons</span>();\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">domRefs</span>.<span class=\"pl-smi\">numbers</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">_createNumbers</span>();\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 此处省略 first prev  last</span>\n    <span class=\"pl-smi\">pager</span>.<span class=\"pl-c1\">appendChild</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">domRefs</span>.<span class=\"pl-smi\">numbers</span>);\n    <span class=\"pl-smi\">pager</span>.<span class=\"pl-c1\">appendChild</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">domRefs</span>.<span class=\"pl-c1\">next</span>);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">element</span>.<span class=\"pl-c1\">appendChild</span>(pager);\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>;\n  }\n  <span class=\"pl-en\">_checkButtons</span>() {}\n  <span class=\"pl-en\">_createNumbers</span>() {\n    <span class=\"pl-k\">let</span> currentPage <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">currentPage</span>;\n    <span class=\"pl-k\">let</span> { buttonCount, totalPage } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>;\n    <span class=\"pl-k\">let</span> start1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">max</span>(currentPage <span class=\"pl-k\">-</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">round</span>(buttonCount <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>), <span class=\"pl-c1\">1</span>);\n    <span class=\"pl-k\">let</span> end1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">min</span>(start1 <span class=\"pl-k\">+</span> buttonCount <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>, totalPage);\n    <span class=\"pl-k\">let</span> end2 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">min</span>(\n      currentPage <span class=\"pl-k\">+</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">round</span>(buttonCount <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>) <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>,\n      totalPage\n    );\n    <span class=\"pl-k\">let</span> start2 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">max</span>(end2 <span class=\"pl-k\">-</span> buttonCount <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>);\n    <span class=\"pl-k\">let</span> start <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">min</span>(start1, start2);\n    <span class=\"pl-k\">let</span> end <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">max</span>(end1, end2);\n\n    <span class=\"pl-k\">let</span> ol <span class=\"pl-k\">=</span> <span class=\"pl-smi\">dom</span>.<span class=\"pl-en\">create</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>&lt;ol data-role=\"pageNumbers\"&gt;&lt;/ol&gt;<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-k\">let</span> numbers <span class=\"pl-k\">=</span> [];\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> start; i <span class=\"pl-k\">&lt;=</span> end; i<span class=\"pl-k\">++</span>) {\n      <span class=\"pl-k\">let</span> li <span class=\"pl-k\">=</span> <span class=\"pl-smi\">dom</span>.<span class=\"pl-en\">create</span>(\n        <span class=\"pl-s\"><span class=\"pl-pds\">`</span>&lt;li data-page=\"<span class=\"pl-s1\"><span class=\"pl-pse\">${</span>i<span class=\"pl-pse\">}</span></span>\"&gt;<span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-smi\">templates</span>.<span class=\"pl-smi\">number</span>.<span class=\"pl-c1\">replace</span>(</span></span>\n<span class=\"pl-s\"><span class=\"pl-s1\">          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%page%<span class=\"pl-pds\">\"</span></span>,</span></span>\n<span class=\"pl-s\"><span class=\"pl-s1\">          i</span></span>\n<span class=\"pl-s\"><span class=\"pl-s1\">        )<span class=\"pl-pse\">}</span></span>&lt;/li&gt;<span class=\"pl-pds\">`</span></span>\n      );\n      <span class=\"pl-k\">if</span> (i <span class=\"pl-k\">===</span> currentPage) {\n        <span class=\"pl-smi\">li</span>.<span class=\"pl-smi\">classList</span>.<span class=\"pl-c1\">add</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>current<span class=\"pl-pds\">\"</span></span>);\n      }\n      <span class=\"pl-smi\">ol</span>.<span class=\"pl-c1\">appendChild</span>(li);\n    }\n    <span class=\"pl-k\">return</span> ol;\n  }\n}</pre></div>\n<h2>Vue 插件版本</h2>\n<p>待更新...</p>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://github.com/umdjs/umd\">github - umd</a></li>\n<li><a href=\"https://www.jianshu.com/p/e65c246beac1\" rel=\"nofollow\">如何定义一个高逼格的原生 JS 插件</a></li>\n</ul>"
  },
  {
    "id": 98,
    "title": "React v16 使用探索",
    "labels": "JavaScript",
    "created_at": "2019-11-13T05:26:29Z",
    "updated_at": "2019-11-13T05:26:44Z",
    "body_html": "<h2>前言</h2>\n<p>最新 React 版本为 <code>v16.11.0</code>，由于之前使 React 开发版本没有使用到新的版本中的特性，此篇文章做总结性的纪录。</p>\n<ul>\n<li><a href=\"https://github.com/facebook/react/blob/master/CHANGELOG.md\">CHANGELOG.md</a></li>\n</ul>\n<h3>概述</h3>\n<ul>\n<li>生命周期方法变化 <code>getDerivedStateFromProps()</code> 等</li>\n<li>React.lazy()</li>\n<li>React Hooks 出现</li>\n<li>React.memo()</li>\n<li>错误边界</li>\n</ul>"
  },
  {
    "id": 97,
    "title": "存奴仆的心呢？存儿子的心呢？",
    "labels": "光与盐",
    "created_at": "2019-11-10T07:33:12Z",
    "updated_at": "2019-11-10T12:02:41Z",
    "body_html": "<h2>前言</h2>\n<p>纪录今天主日的学习得着。</p>\n<p>证道题目:《靠着神为后嗣》，证道经文：加拉太书 四 1-11。</p>\n<h2>经文背景</h2>\n<p><code>8</code>  但从前你们不认识　神的时候、是给那些本来不是　神的作奴仆。<br>\n<code>9</code>  现在你们既然认识　神、更可说是被　神所认识的、怎么还要归回那懦弱无用的小学、情愿再给他作奴仆呢。<br>\n<code>10</code> 你们谨守日子、月分、节期、年分。<br>\n<code>11</code> 我为你们害怕．惟恐我在你们身上是枉费了工夫。</p>\n<p>加拉太书的核心是——因信称义。</p>\n<p>在使徒时代，虽然使徒们传讲的是因信称义，但还是有些犹太假师傅在教会中散播“不仅要信耶稣，还要行割礼，守律法”的异端邪说。针对此种现状，使徒保罗特别写了《加拉太书》警戒信徒。《加拉太书》不仅仅写给加拉太信徒，更是写给所有看到此书信的信徒。因为使徒保罗叫各教会把自己的书信彼此传阅。也就是说，这种异端邪说不仅加拉太教会有，在其他教会也普遍存在。</p>\n<p>在加拉太书信中，使徒保罗说的不仅仅是当时的信徒行割礼、守律法的问题，更说的是其本质——因行为称义的问题。因行为称义的问题，不仅仅在使徒时代存在，更是从亚当犯罪开始，直到耶稣再临，一直是撒旦诱惑人离弃神的工具。虽然它曾有多种的外在包装形式，但细看其本质都是“因行为称义”。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/3e06162114ed\" rel=\"nofollow\">加拉太书大背景——谈谈“因行为称义”</a></li>\n</ul>\n<h2>一、 父神的预定</h2>\n<p><code>1</code> 我说那承受产业的、虽然是全业的主人、但为孩童的时候、却与奴仆毫无分别．<br>\n<code>2</code> 乃在师傅和管家的手下、直等他父亲预定的时候来到。</p>\n<p>那承受产业的，为孩童时，却在师傅和管家手下做奴仆。</p>\n<p>什么是孩童时呢？旧约时代。</p>\n<p>什么是师傅和管家呢？是旧约时代的律法，旧约时代律法的共用在于使人知罪，将罪过显明。</p>\n<p>什么是做奴仆呢？ 就是奴隶与老板的关系，奴隶靠着自己自身的努力，好的行为而得到他主人得认可，升职加薪。这是奴隶得法则，也是当今世界的法则。</p>\n<p>在旧约时代，没有一个人能靠着守律法，倚靠自己的行为在神面前称义，连同神应许的起源，<code>亚伯拉罕信神，这就算为他的义</code>。这样，众人都伏在律法之下，如同奴仆一般，在因行称义中不断绝望下去。</p>\n<h2>二、基督的代赎</h2>\n<p><code>3</code> 我们为孩童的时候、受管于世俗小学之下、也是如此。<br>\n<code>4</code> 及至时候满足，神就差遣他的儿子、为女子所生、且生在律法以下、<br>\n<code>5</code> 要把律法以下的人赎出来、叫我们得着儿子的名分。</p>\n<p>耶稣基督的用神儿子的生命，重价宝血做赎价，将我们这些无价值的奴仆赎买，我们因此而有了价值，也得着了儿子的名分。</p>\n<h2>三、 圣灵的引导</h2>\n<p><code>6</code>  你们既为儿子、神就差他儿子的灵、进入你们〔原文作我们〕的心、呼叫阿爸，父。<br>\n<code>7</code>  可见、从此以后、你不是奴仆、乃是儿子了。既是儿子、就靠着　神为后嗣。</p>\n<p>主圣灵成全并非亲生的父子关系，成全称义，也成全儿子的名分。</p>\n<p><code>阿爸父</code>的称呼，是进入到天父爸爸的怀抱，这是属灵的呼唤。父亲是极为丰富，大有智识的，也喜悦自己的爱子。</p>\n<h2>总结</h2>\n<ul>\n<li>人称义不是因行律法，乃是因信耶稣基督</li>\n<li>不是说我们不需要努力，而是不去为儿子的名分努力</li>\n<li>浪子回头（【路 15:11-32】），儿子还是父亲的儿子，我们要孝敬父母\n<ul>\n<li><code>从今以后、我不配称为你的儿子、把我当作一个雇工吧。</code></li>\n</ul>\n</li>\n<li>不要再用奴隶心态，也不要沉浸在拜偶像中去做奴隶</li>\n<li>不需要用努力去维护我们称义的地位</li>\n<li>不要把上帝当作 Boss ，我们与上帝的关系远超过奴仆与主人，父子关系是神预定的，也是神完全来主导的</li>\n</ul>\n<h2>应用</h2>\n<p><strong>我的提问</strong></p>\n<p>如何看待律法，良心，圣灵如今对我们内心的作用？</p>\n<p>律法是旧约时代对于神子民的管束；良心是世上的人对于自己行为的宽泛约束，也是神对于人的恩典；圣灵的标准要高过良心。</p>\n<p><strong>思考</strong></p>\n<ul>\n<li>你有了解到儿子身份的尊贵吗 ？</li>\n<li>如何做一个天父的爱子呢 ？</li>\n<li>当我们信耶稣以后，我们就可以靠着行为蒙神祝福吗？</li>\n</ul>\n<p>当然也不可以。因为我们的救恩还不完全，我们的肉体还未得赎。直到进了天国，身体复活之后，救恩才算完全。不然，我们怎么会一面信耶稣，一面犯罪呢？</p>\n<p>事实证明，我们还没有真正得救。只是被神拣选，身份上得救，名义上得救。但我们的行为依旧犯罪，依旧得罪神。因此，虽然我们已经信耶稣，但并不表明，神悦纳我们的“好行为”。神对我们的喜悦，绝对不是出于我们自己的行为或什么，而是单单出于对基督的喜悦。这就是最美中保的含义。同样，神对我们的祝福，绝对不是因为我们自己，也是单单因为我们对基督的信靠，以及神智慧的安排。</p>\n<ul>\n<li>信徒竭力遵守教导，行出好行为的意义在哪里？</li>\n</ul>\n<p>为了证明自己的信心是真实的；为了效法基督舍己的爱，跟从耶稣；为了做见证，做光做盐，叫人因此认识神和基督的十字架从而得救；遵守律法是接受神的试炼试验，在试炼中更依靠神，从而信心增长，生命长进；为了与信徒互为肢体，彼此扶助坚固，一同走天路；好行为能相对的拒绝撒旦的诱惑和攻击等等。</p>\n<p>我们必须一生都活在基督里。基督是房角石，生命唯一的根基，唯一的救主，唯一的蒙福之源，唯一被神喜悦的根据，唯一效法的榜样，唯一的王，唯一的依靠，唯一的渴望。神的法则就是，唯独通过基督，唯独因为信徒对基督救恩之功的信心。不能有任何丝毫的其他依靠，不然，基督就是徒然死了，基督也就与你们无益了（加5:2）。阿门！</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/3e06162114ed\" rel=\"nofollow\">加拉太书大背景——谈谈“因行为称义”</a></li>\n</ul>"
  },
  {
    "id": 96,
    "title": "React 内部是如何工作的 ?",
    "labels": "JavaScript",
    "created_at": "2019-11-08T05:34:46Z",
    "updated_at": "2019-11-08T05:45:35Z",
    "body_html": "<h1>React 内部是如何工作的 ?</h1>\n<h2>Virtual DOM</h2>\n<h2>渲染</h2>\n<h3>1. jsx 生成 tree</h3>\n<p>中间过程经过 babel 编译, createElement 的参数有三个，其一： type -&gt; 标签类型，其二 ：attributes -&gt; 标签属性，没有的话，可以为 null，其三： children -&gt; 标签的子节点</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">return</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-c1\">createElement</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>,\n  { className<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cn<span class=\"pl-pds\">'</span></span> },\n  <span class=\"pl-smi\">React</span>.<span class=\"pl-c1\">createElement</span>(Header, <span class=\"pl-c1\">null</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello, This is React<span class=\"pl-pds\">'</span></span>),\n  <span class=\"pl-smi\">React</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Start to learn right now!<span class=\"pl-pds\">'</span></span>),\n  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Right Reserve<span class=\"pl-pds\">'</span></span>\n);</pre></div>\n<p>对比 render 函数被调用的时候，会返回的 tree 对象，复杂结构会在 children 中递归生成</p>\n<div class=\"highlight highlight-source-js\"><pre>{\n  type<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>,\n    props<span class=\"pl-k\">:</span> {\n      className<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cn<span class=\"pl-pds\">'</span></span>,\n        children<span class=\"pl-k\">:</span> [\n          {\n            <span class=\"pl-en\">type</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> Header,\n            <span class=\"pl-en\">props</span><span class=\"pl-k\">:</span> {\n                <span class=\"pl-en\">children</span><span class=\"pl-k\">:</span> 'Hello, This is React'\n            }\n          },\n          {\n            <span class=\"pl-en\">type</span><span class=\"pl-k\">:</span> 'div',\n            <span class=\"pl-en\">props</span><span class=\"pl-k\">:</span> {\n                <span class=\"pl-en\">children</span><span class=\"pl-k\">:</span> 'start to learn right now！'\n            }\n          },\n          'Right Reserve'\n      ]\n  }\n}</pre></div>\n<p>我们来观察一下这个对象的 children，现在有三种类型：</p>\n<ol>\n<li>string</li>\n<li>原生 DOM 节点</li>\n<li>React Component - 自定义组件</li>\n</ol>\n<p>除了这三种，还有两种类型：</p>\n<ol start=\"4\">\n<li>false ,null, undefined, number</li>\n<li>数组 使用 map 方法的时候</li>\n</ol>\n<h3>2. 加载渲染过程</h3>\n<p>由内到外递归渲染</p>\n<ul>\n<li>father componentWillMount</li>\n<li>father render</li>\n<li>son componentWillMount</li>\n<li>son render</li>\n<li>son componentDidMount</li>\n<li>... other sons</li>\n<li>father componentDidMount</li>\n</ul>\n<h3>3.子组件更新过程</h3>\n<ul>\n<li>father componentWillUpdate</li>\n<li>father render</li>\n<li>son componentWillUpdate</li>\n<li>son render</li>\n<li>son componentDidUpdate</li>\n<li>father componentDidUpdate</li>\n</ul>\n<h3>3.销毁过程</h3>\n<h2>diff 算法</h2>\n<p>React 的 render 方法，它能将虚拟 DOM 渲染成真正的 DOM。为了减少 DOM 更新数量，我们需要找渲染前后真正变化的部分，只更新这一部分 DOM。而对比变化，找出需要更新部分的算法我们称之为 diff 算法。React 框架选择直接对比虚拟 DOM 和真实 DOM，这样就不需要额外保存上一次渲染的虚拟 DOM，并且能够一边对比一边更新。</p>\n<p>不管是 DOM 还是虚拟 DOM，它们的结构都是一棵树，完全对比两棵树变化的算法时间复杂度是 O(n^3)，但是考虑到我们很少会跨层级移动 DOM，所以我们只需要对比同一层级的变化。</p>\n<h3>传统 diff 算法</h3>\n<h3>React Diff</h3>\n<p>综上所述， diff 算法有两个原则：</p>\n<ul>\n<li>对比当前真实的 DOM 和虚拟 DOM，在对比过程中直接更新真实 DOM</li>\n<li>只对比同一层级的变化</li>\n</ul>\n<p><strong>实现</strong></p>\n<p>diff 方法，它的作用是对比真实 DOM 和虚拟 DOM，最后返回更新后的 DOM</p>\n<ul>\n<li>tree diff</li>\n<li>component diff</li>\n<li>element diff</li>\n</ul>\n<h4>1. tree diff</h4>\n<p>tree 是由 众多 component 组件构成 ，React 对树的同一层级进行比较，当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。然后继续对树进行递归遍历，去比较 component。</p>\n<p>当 React 节点同一层级根节点不一致（也就是发生跨层级的移动操作），React diff 会只有创建和删除操作，将创建新的节点变化的原节点销毁。</p>\n<h4>2.component diff</h4>\n<p>有以下 3 个比较策略：</p>\n<ul>\n<li>相同类的组件，则继续比较组件下的节点树，递归比较直至 element</li>\n<li>不同类的组件，则将该组件定位 dirty component，从而将该组件删除，替换为新组件</li>\n<li>相同类的组件，有可能其组件下的节点没有任何变化，如果能够知道这点就可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff</li>\n</ul>\n<h4>3. element diff</h4>\n<p>当节点处于同一层级时，React diff 提供了三种节点操作，分别为：INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）。</p>\n<p>React 允许开发者对于这一层级的同组子节点，添加唯一 key 进行区分，提高 diff 性能，避免卸载后又再次创建的操作出现。</p>\n<h2>fiber 架构</h2>\n<p>React 16 之前的 diff 阶段的比较是不可被打断，React16 由主线程不间断使用 Diff(同步比较 + 同步更新) 变为 自由释放主线程（可打断的比较 + 异步更新）可以被打断的新的 fiber 架构。</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://node.fequan.com/playvideo/701606bc91d477799dbecd98cbae0ecf_7\" rel=\"nofollow\">Video - 从 React 渲染原理看性能优化@黄琼</a></li>\n<li>Article：<a href=\"https://zhuanlan.zhihu.com/p/43145754\" rel=\"nofollow\">首次渲染</a> | <a href=\"https://zhuanlan.zhihu.com/p/43566956\" rel=\"nofollow\"> 更新渲染</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20346379\" rel=\"nofollow\">React 源码剖析系列 － 不可思议的 react diff - 知乎</a></li>\n<li><a href=\"https://github.com/hujiulong/blog/issues/6\" data-hovercard-type=\"issue\" data-hovercard-url=\"/hujiulong/blog/issues/6/hovercard\">从零开始实现一个 React（三）：diff 算法</a></li>\n<li><a href=\"https://www.yuque.com/whitefon/kd5gnm/unch0h\" rel=\"nofollow\">16 之前的 Diff 算法</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/reconciliation.html\" rel=\"nofollow\">React 官方 - 协调</a></li>\n</ul>"
  },
  {
    "id": 95,
    "title": "vue-blog@csdoker 前后端源码",
    "labels": "精读",
    "created_at": "2019-11-05T09:56:50Z",
    "updated_at": "2019-11-16T04:17:52Z",
    "body_html": "<h2>前言</h2>\n<p>透过读源码快速回顾 Vue 技术栈的实践，感谢作者 <a href=\"https://github.com/csdoker\">csdoker</a> 开源 ~</p>\n<ul>\n<li><a href=\"https://github.com/csdoker/vue-blog\">vue-blog</a></li>\n<li><a href=\"https://github.com/csdoker/vue-blog-server\">vue-blog-server</a></li>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\">hexo-theme-yilia</a></li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/310f83cfee1b614bf1d03b5eb0a89e1dea856083/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f64663535316561356c793167386e6c316e35316638673231683030726d316c302e676966\"><img src=\"https://camo.githubusercontent.com/310f83cfee1b614bf1d03b5eb0a89e1dea856083/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f64663535316561356c793167386e6c316e35316638673231683030726d316c302e676966\" alt=\"123.gif\" data-canonical-src=\"http://ww1.sinaimg.cn/mw690/df551ea5ly1g8nl1n51f8g21h00rm1l0.gif\" style=\"max-width:100%;\"></a></p>\n<h2>vue-blog</h2>\n<p>先行启动后端服务</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c1\">cd</span> vue-blog-server\nyarn start\nyarn run v1.12.3\n$ node ./bin/www</pre></div>\n<h3>项目简介</h3>\n<ul>\n<li>路由</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 主页</span>\n\n/  Home\n/page/:page  Home     <span class=\"pl-c\"><span class=\"pl-c\">#</span> 分页</span>\n/detail/:id  Detail   <span class=\"pl-c\"><span class=\"pl-c\">#</span> 详情</span>\n\n\n/archive  Archive            <span class=\"pl-c\"><span class=\"pl-c\">#</span> 归档</span>\n/archive/page/:page Archive  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 分页</span>\n\n/album Album        <span class=\"pl-c\"><span class=\"pl-c\">#</span> 相册</span>\n/reading Reading    <span class=\"pl-c\"><span class=\"pl-c\">#</span> 读书</span>\n\n/about About    <span class=\"pl-c\"><span class=\"pl-c\">#</span> 关于</span>\n\n/test Test      <span class=\"pl-c\"><span class=\"pl-c\">#</span> 测试</span>\n</pre></div>\n<p>路由组件暴露位置 <code>router-view</code>,统一入口</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">App</span>&gt;\n  &lt;<span class=\"pl-ent\">AppCanvas</span>&gt;&lt;/<span class=\"pl-ent\">AppCanvas</span>&gt;\n  &lt;<span class=\"pl-ent\">AppSidebar</span>&gt;&lt;/<span class=\"pl-ent\">AppSidebar</span>&gt;\n  &lt;<span class=\"pl-ent\">AppToolbar</span>&gt;&lt;/<span class=\"pl-ent\">AppToolbar</span>&gt;\n  &lt;<span class=\"pl-ent\">AppMain</span>&gt;\n    &lt;<span class=\"pl-ent\">router-view</span> /&gt;\n  &lt;/<span class=\"pl-ent\">AppMain</span>&gt;\n  &lt;<span class=\"pl-ent\">AppScroll</span>&gt;&lt;/<span class=\"pl-ent\">AppScroll</span>&gt;\n&lt;/<span class=\"pl-ent\">App</span>&gt;</pre></div>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">MainMobileNav</span>&gt;&lt;/<span class=\"pl-ent\">MainMobileNav</span>&gt; <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 移动端响应式使用 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">slot</span>&gt;&lt;/<span class=\"pl-ent\">slot</span>&gt;  <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 暴露路由插槽 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">MainFooter</span>&gt;&lt;/<span class=\"pl-ent\">MainFooter</span>&gt;</pre></div>\n<ul>\n<li>数据流</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> state</span>\n\n<span class=\"pl-k\">export</span> default {\n  toolbarKeyword: <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>,   // 工具栏搜索关键字\n  isShowToolbar: false, // 显示工具栏(默认不显示)\n  isShowToolbarSection: [false, false] // 工具栏展示类型\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> mutations</span>\n\n<span class=\"pl-k\">export</span> default {\n  openToolBar (state, menuIndex) {\n    state.isShowToolbar = <span class=\"pl-c1\">true</span>\n    state.isShowToolbarSection.forEach<span class=\"pl-s\"><span class=\"pl-pds\">((</span>item<span class=\"pl-k\">,</span> index) <span class=\"pl-k\">=&gt;</span> {</span>\n<span class=\"pl-s\">      if (index === menuIndex) {</span>\n<span class=\"pl-s\">        state.isShowToolbarSection.splice(index, <span class=\"pl-c1\">1</span>, true)</span>\n<span class=\"pl-s\">      } else {</span>\n<span class=\"pl-s\">        state.isShowToolbarSection.splice(index, <span class=\"pl-c1\">1</span>, false)</span>\n<span class=\"pl-s\">      }</span>\n<span class=\"pl-s\">    })</span>\n<span class=\"pl-s\">  },</span>\n<span class=\"pl-s\">  closeToolBar (state) {</span>\n<span class=\"pl-s\">    state.isShowToolbar = false</span>\n<span class=\"pl-s\">  },</span>\n<span class=\"pl-s\">  setToolbarKeyword (state, keyword) {</span>\n<span class=\"pl-s\">    state.toolbarKeyword = keyword</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">}</span>\n<span class=\"pl-s\"></span></pre></div>\n<p><code>isShowToolbar</code>默认情况 为 false 时:</p>\n<ol>\n<li> 组件隐藏</li>\n<li> 组件添加 hide 类名,增加 <code>leftOut</code> 动画效果</li>\n<li> 组件添加 hide 类名，增加 <code>smallleftOut</code> 动画效果</li>\n<li> 组件无 show 类名</li>\n<li>  组件为白色背景色 <code>#fff</code></li>\n</ol>\n<p><code>isShowToolbar</code>默认情况 为 true 时:</p>\n<ol>\n<li> 组件显示，气泡 cavas 动效</li>\n<li> 组件添加 show 类名 背景颜色随之切换 background: linear-gradient(200deg, #a0cfe4, #e8c37e)，增加 <code>smallLeftIn</code> 动画效果</li>\n<li> 组件添加 show 类名，增加 <code>smallleftOut</code> 动画效果</li>\n<li> 组件添加 show 类名，阴影边框</li>\n<li>  组件为 白色加透明 <code>rgba(255,255,255,0.3)<span style=\"background-color: rgba(255,255,255,0.3); height: 0.8em; width: 0.8em;\" class=\"ml-1 d-inline-block v-align-middle Box border-black-fade\"></span></code></li>\n</ol>\n<ul>\n<li>项目依赖\n<ul>\n<li>fastclick</li>\n<li>vue-loading-template</li>\n<li>vue-preview</li>\n<li>vue-markdown</li>\n<li>vue-prism md 语法高亮</li>\n<li>vue-wheels 自制分页组件</li>\n</ul>\n</li>\n</ul>\n<h3>动画效果</h3>\n<p>待研究...</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.hide</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-animation-duration</span></span>: <span class=\"pl-c1\">0.8<span class=\"pl-k\">s</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">animation-duration</span></span>: <span class=\"pl-c1\">0.8<span class=\"pl-k\">s</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-animation-name</span></span>: leftOut;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">animation-name</span></span>: leftOut;\n}\n\n<span class=\"pl-k\">@keyframes</span> <span class=\"pl-v\">leftOut</span> {\n  <span class=\"pl-e\">0%</span>,\n  <span class=\"pl-e\">60%</span>,\n  <span class=\"pl-e\">75%</span>,\n  <span class=\"pl-e\">90%</span>,\n  <span class=\"pl-e\">to</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-animation-timing-function</span></span>: <span class=\"pl-c1\">cubic-bezier</span>(<span class=\"pl-c1\">0.215</span>, <span class=\"pl-c1\">0.61</span>, <span class=\"pl-c1\">0.355</span>, <span class=\"pl-c1\">1</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">animation-timing-function</span></span>: <span class=\"pl-c1\">cubic-bezier</span>(<span class=\"pl-c1\">0.215</span>, <span class=\"pl-c1\">0.61</span>, <span class=\"pl-c1\">0.355</span>, <span class=\"pl-c1\">1</span>);\n  }\n  <span class=\"pl-e\">0%</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">330<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">330<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n  }\n  <span class=\"pl-e\">60%</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">-25<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">-25<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n  }\n  <span class=\"pl-e\">75%</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">10<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">10<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n  }\n  <span class=\"pl-e\">90%</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">-5<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">-5<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n  }\n  <span class=\"pl-e\">to</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translateZ</span>(<span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translateZ</span>(<span class=\"pl-c1\">0</span>);\n  }\n}</pre></div>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.show</span> {\n     <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">none</span>\n      opacity: <span class=\"pl-c1\">.9</span>\n      <span class=\"pl-c1\">-webkit-animation-duration</span>: <span class=\"pl-c1\">.8<span class=\"pl-k\">s</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">animation-duration</span></span>: <span class=\"pl-c1\">.8<span class=\"pl-k\">s</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-animation-fill-mode</span></span>: <span class=\"pl-c1\">both</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">animation-fill-mode</span></span>: <span class=\"pl-c1\">both</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-animation-name</span></span>: leftIn;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">animation-name</span></span>: leftIn\n}\n\n      <span class=\"pl-k\">@keyframes</span> <span class=\"pl-v\">leftIn</span> {\n  <span class=\"pl-e\">0%</span>, <span class=\"pl-e\">60%</span>, <span class=\"pl-e\">75%</span>, <span class=\"pl-e\">90%</span>, <span class=\"pl-e\">to</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-animation-timing-function</span></span>: <span class=\"pl-c1\">cubic-bezier</span>(<span class=\"pl-c1\">.215</span>, <span class=\"pl-c1\">.61</span>, <span class=\"pl-c1\">.355</span>, <span class=\"pl-c1\">1</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">animation-timing-function</span></span>: <span class=\"pl-c1\">cubic-bezier</span>(<span class=\"pl-c1\">.215</span>, <span class=\"pl-c1\">.61</span>, <span class=\"pl-c1\">.355</span>, <span class=\"pl-c1\">1</span>)\n  }\n  <span class=\"pl-e\">0%</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translateZ</span>(<span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translateZ</span>(<span class=\"pl-c1\">0</span>)\n  }\n  <span class=\"pl-e\">60%</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">358<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">358<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>)\n  }\n  <span class=\"pl-e\">75%</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">323<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">323<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>)\n  }\n  <span class=\"pl-e\">90%</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">338<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">338<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>)\n  }\n  <span class=\"pl-e\">to</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">-webkit-transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">330<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>);\n    <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate3d</span>(<span class=\"pl-c1\">330<span class=\"pl-k\">px</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>)\n  }\n}\n</pre></div>\n<h3>ArticleDirectory</h3>\n<p><code>ArticleDirectory </code> 为 详情页 markdown 文档目录组件</p>\n<div class=\"highlight highlight-text-html-vue\"><pre>&lt;<span class=\"pl-ent\">template</span> <span class=\"pl-e\">lang</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>html<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>article-directory<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">v-if</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>isShowDirectory<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>directory-head<span class=\"pl-pds\">\"</span></span>&gt;目录&lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>directory-body<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">article-directory-body</span> @<span class=\"pl-e\">setDirectory</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>setDirectory<span class=\"pl-pds\">\"</span></span> :<span class=\"pl-e\">directories</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>directories<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">article-directory-body</span>&gt;\n    &lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">template</span>&gt;\n\n<span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">ArticleDirectoryBody</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./ArticleDirectoryBody<span class=\"pl-pds\">'</span></span></span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\"><span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> {</span>\n<span class=\"pl-s1\">  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>ArticleDirectory<span class=\"pl-pds\">'</span></span>,</span>\n<span class=\"pl-s1\">  components<span class=\"pl-k\">:</span> {</span>\n<span class=\"pl-s1\">    ArticleDirectoryBody</span>\n<span class=\"pl-s1\">  },</span>\n<span class=\"pl-s1\">  <span class=\"pl-en\">data</span> () {</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">return</span> {</span>\n<span class=\"pl-s1\">      isShowDirectory<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>,</span>\n<span class=\"pl-s1\">      directories<span class=\"pl-k\">:</span> [],</span>\n<span class=\"pl-s1\">      lastDirectoryIndex<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,</span>\n<span class=\"pl-s1\">      clickDirectoryIndex<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,</span>\n<span class=\"pl-s1\">      appElem<span class=\"pl-k\">:</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>#app<span class=\"pl-pds\">'</span></span>)</span>\n<span class=\"pl-s1\">    }</span>\n<span class=\"pl-s1\">  },</span>\n<span class=\"pl-s1\">  methods<span class=\"pl-k\">:</span> {</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 获取文件标题目录</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">getDirectories</span> () {</span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">let</span> directoryElems <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.article-data<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">querySelectorAll</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>h1,h2,h3,h4,h5,h6<span class=\"pl-pds\">'</span></span>)</span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">directoryElems</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">!==</span> <span class=\"pl-c1\">0</span>) {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">isShowDirectory</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span></span>\n<span class=\"pl-s1\">      } <span class=\"pl-k\">else</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">isShowDirectory</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span></span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">return</span></span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\">      <span class=\"pl-smi\">directoryElems</span>.<span class=\"pl-c1\">forEach</span>((<span class=\"pl-smi\">element</span>, <span class=\"pl-smi\">elemIndex</span>) <span class=\"pl-k\">=&gt;</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-smi\">element</span>.<span class=\"pl-c1\">id</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>articleHeader<span class=\"pl-s1\"><span class=\"pl-pse\">${</span>elemIndex<span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span></span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span>.<span class=\"pl-c1\">push</span>({</span>\n<span class=\"pl-s1\">          index<span class=\"pl-k\">:</span> elemIndex,</span>\n<span class=\"pl-s1\">          title<span class=\"pl-k\">:</span> <span class=\"pl-smi\">element</span>.<span class=\"pl-smi\">innerText</span> <span class=\"pl-k\">||</span> <span class=\"pl-smi\">element</span>.<span class=\"pl-smi\">textContent</span>,</span>\n<span class=\"pl-s1\">          offsetTop<span class=\"pl-k\">:</span> <span class=\"pl-smi\">element</span>.<span class=\"pl-smi\">offsetTop</span>,</span>\n<span class=\"pl-s1\">          isActive<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>,</span>\n<span class=\"pl-s1\">          tagName<span class=\"pl-k\">:</span> <span class=\"pl-smi\">element</span>.<span class=\"pl-c1\">tagName</span>,</span>\n<span class=\"pl-s1\">          children<span class=\"pl-k\">:</span> []</span>\n<span class=\"pl-s1\">        })</span>\n<span class=\"pl-s1\">      })</span>\n<span class=\"pl-s1\">    },</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 格式化标题目录结构</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">formatDirectories</span> (<span class=\"pl-smi\">arr</span>, <span class=\"pl-smi\">i</span>, <span class=\"pl-smi\">parent</span>) {</span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">if</span> (i <span class=\"pl-k\">&gt;=</span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span>) {</span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">return</span> i</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">let</span> current <span class=\"pl-k\">=</span> arr[i]</span>\n<span class=\"pl-s1\">      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 外层插入</span></span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">current</span>.<span class=\"pl-c1\">tagName</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">parent</span>.<span class=\"pl-c1\">tagName</span>) {</span>\n<span class=\"pl-s1\">        <span class=\"pl-smi\">parent</span>.<span class=\"pl-smi\">children</span>.<span class=\"pl-c1\">push</span>(current)</span>\n<span class=\"pl-s1\">      } <span class=\"pl-k\">else</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">return</span> i</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\">      i<span class=\"pl-k\">++</span></span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">let</span> next <span class=\"pl-k\">=</span> arr[i]</span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>next) {</span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">return</span> i</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\">       <span class=\"pl-c\"><span class=\"pl-c\">//</span> 内层继续插入</span></span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">next</span>.<span class=\"pl-c1\">tagName</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">current</span>.<span class=\"pl-c1\">tagName</span>) {</span>\n<span class=\"pl-s1\">        <span class=\"pl-smi\">current</span>.<span class=\"pl-smi\">children</span> <span class=\"pl-k\">=</span> []</span>\n<span class=\"pl-s1\">        i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">formatDirectories</span>(arr, i, current)</span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\">      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 递归</span></span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">formatDirectories</span>(arr, i, parent)</span>\n<span class=\"pl-s1\">    },</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 重置 取消所有高亮标记</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">resetDirectories</span> (<span class=\"pl-smi\">node</span>) {</span>\n<span class=\"pl-s1\">      <span class=\"pl-smi\">node</span>.<span class=\"pl-c1\">forEach</span>(<span class=\"pl-smi\">item</span> <span class=\"pl-k\">=&gt;</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">isActive</span>) {</span>\n<span class=\"pl-s1\">          <span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">isActive</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span></span>\n<span class=\"pl-s1\">          <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span></span>\n<span class=\"pl-s1\">        }</span>\n<span class=\"pl-s1\">        <span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">children</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">resetDirectories</span>(<span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">children</span>)</span>\n<span class=\"pl-s1\">      })</span>\n<span class=\"pl-s1\">    },</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 选中高亮标记 isActive</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">findDirectories</span> (<span class=\"pl-smi\">node</span>) {</span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">clickDirectoryIndex</span> <span class=\"pl-k\">!==</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">lastDirectoryIndex</span>) {</span>\n<span class=\"pl-s1\">        <span class=\"pl-smi\">node</span>.<span class=\"pl-c1\">forEach</span>((<span class=\"pl-smi\">item</span>, <span class=\"pl-smi\">index</span>) <span class=\"pl-k\">=&gt;</span> {</span>\n<span class=\"pl-s1\">          <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">appElem</span>.<span class=\"pl-smi\">scrollTop</span> <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>#articleHeader<span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">index</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>).<span class=\"pl-smi\">offsetTop</span>) {</span>\n<span class=\"pl-s1\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span> 清除所有高亮单独添加</span></span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">resetDirectories</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span>)</span>\n<span class=\"pl-s1\">            <span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">isActive</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span></span>\n<span class=\"pl-s1\">          } <span class=\"pl-k\">else</span> {</span>\n<span class=\"pl-s1\">            <span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">isActive</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span></span>\n<span class=\"pl-s1\">          }</span>\n<span class=\"pl-s1\">          <span class=\"pl-c\"><span class=\"pl-c\">//</span> 有子数据的先遍历子数据</span></span>\n<span class=\"pl-s1\">          <span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">children</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">findDirectories</span>(<span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">children</span>)</span>\n<span class=\"pl-s1\">        })</span>\n<span class=\"pl-s1\">      } <span class=\"pl-k\">else</span> {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">clickDirectoryIndex</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span></span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\">    },</span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">setDirectory</span> (<span class=\"pl-smi\">item</span>) {</span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">clickDirectoryIndex</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">index</span></span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">index</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">lastDirectoryIndex</span>) {</span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">resetDirectories</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span>)</span>\n<span class=\"pl-s1\">        <span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">isActive</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span></span>\n<span class=\"pl-s1\">      }</span>\n<span class=\"pl-s1\">    },</span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">handleScroll</span> (<span class=\"pl-smi\">e</span>) {</span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">findDirectories</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span>)</span>\n<span class=\"pl-s1\">    }</span>\n<span class=\"pl-s1\">  },</span>\n<span class=\"pl-s1\">  <span class=\"pl-en\">mounted</span> () {</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">let</span> root <span class=\"pl-k\">=</span> {</span>\n<span class=\"pl-s1\">      index<span class=\"pl-k\">:</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>,</span>\n<span class=\"pl-s1\">      title<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>,</span>\n<span class=\"pl-s1\">      offsetTop<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,</span>\n<span class=\"pl-s1\">      isActive<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>,</span>\n<span class=\"pl-s1\">      tagName<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>H0<span class=\"pl-pds\">'</span></span>,</span>\n<span class=\"pl-s1\">      children<span class=\"pl-k\">:</span> []</span>\n<span class=\"pl-s1\">    }</span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">$nextTick</span>(() <span class=\"pl-k\">=&gt;</span> {</span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">getDirectories</span>()</span>\n<span class=\"pl-s1\">      <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span>)</span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">lastDirectoryIndex</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span>[<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>].<span class=\"pl-c1\">index</span></span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">formatDirectories</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span>, <span class=\"pl-c1\">0</span>, root)</span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">directories</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">root</span>.<span class=\"pl-smi\">children</span></span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">appElem</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scroll<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleScroll</span>)</span>\n<span class=\"pl-s1\">    })</span>\n<span class=\"pl-s1\">  },</span>\n<span class=\"pl-s1\">  <span class=\"pl-en\">destroyed</span> () {</span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">appElem</span>.<span class=\"pl-c1\">removeEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scroll<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleScroll</span>)</span>\n<span class=\"pl-s1\">  }</span>\n<span class=\"pl-s1\">}</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n<div class=\"highlight highlight-text-html-vue\"><pre>&lt;<span class=\"pl-ent\">template</span> <span class=\"pl-e\">lang</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>html<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">ul</span>&gt;\n    &lt;<span class=\"pl-ent\">li</span> :<span class=\"pl-e\">class</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>active<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">isActive</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>normal<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-k\">!</span><span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">isActive</span>}<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">v-for</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>(item, index) <span class=\"pl-k\">of</span> directories<span class=\"pl-pds\">\"</span></span> :<span class=\"pl-e\">key</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>index<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>javascript:;<span class=\"pl-pds\">\"</span></span> @<span class=\"pl-e\">click</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span><span class=\"pl-en\">goAnchor</span>(item)<span class=\"pl-pds\">\"</span></span>&gt;{{<span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">title</span>}}&lt;/<span class=\"pl-ent\">a</span>&gt;\n      &lt;<span class=\"pl-ent\">article-directory-body</span> @<span class=\"pl-e\">setDirectory</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>setDirectory<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">v-if</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">children</span><span class=\"pl-pds\">\"</span></span> :<span class=\"pl-e\">directories</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">children</span><span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">article-directory-body</span>&gt;\n    &lt;/<span class=\"pl-ent\">li</span>&gt;\n  &lt;/<span class=\"pl-ent\">ul</span>&gt;\n&lt;/<span class=\"pl-ent\">template</span>&gt;\n\n<span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span>&gt;</span>\n<span class=\"pl-s1\"><span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> {</span>\n<span class=\"pl-s1\">  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>ArticleDirectoryBody<span class=\"pl-pds\">'</span></span>,</span>\n<span class=\"pl-s1\">  props<span class=\"pl-k\">:</span> {</span>\n<span class=\"pl-s1\">    directories<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Array</span></span>\n<span class=\"pl-s1\">  },</span>\n<span class=\"pl-s1\">  <span class=\"pl-en\">data</span> () {</span>\n<span class=\"pl-s1\">    <span class=\"pl-k\">return</span> {}</span>\n<span class=\"pl-s1\">  },</span>\n<span class=\"pl-s1\">  methods<span class=\"pl-k\">:</span> {</span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">goAnchor</span> (<span class=\"pl-smi\">item</span>) {</span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">$emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>setDirectory<span class=\"pl-pds\">'</span></span>, item)</span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>#app<span class=\"pl-pds\">'</span></span>).<span class=\"pl-smi\">scrollTop</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>#articleHeader<span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">index</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>).<span class=\"pl-smi\">offsetTop</span></span>\n<span class=\"pl-s1\">    },</span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">setDirectory</span> (<span class=\"pl-smi\">item</span>) {</span>\n<span class=\"pl-s1\">      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">$emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>setDirectory<span class=\"pl-pds\">'</span></span>, item)</span>\n<span class=\"pl-s1\">    }</span>\n<span class=\"pl-s1\">  }</span>\n<span class=\"pl-s1\">}</span>\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre></div>\n<h2>vue-blog-server</h2>\n<p><strong>路由信息</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>app.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/articlelist<span class=\"pl-pds\">'</span></span>, api.articlelist)<span class=\"pl-k\">;</span>\napp.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/article<span class=\"pl-pds\">'</span></span>, api.article)<span class=\"pl-k\">;</span>\napp.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/archivelist<span class=\"pl-pds\">'</span></span>, api.archivelist)<span class=\"pl-k\">;</span>\napp.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/about<span class=\"pl-pds\">'</span></span>, api.about)<span class=\"pl-k\">;</span>\napp.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/searchlist<span class=\"pl-pds\">'</span></span>, api.searchlist)<span class=\"pl-k\">;</span>\napp.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/articletag<span class=\"pl-pds\">'</span></span>, api.articletag)<span class=\"pl-k\">;</span>\napp.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/postcategory<span class=\"pl-pds\">'</span></span>, api.postcategory)<span class=\"pl-k\">;</span>\napp.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/booklist<span class=\"pl-pds\">'</span></span>, api.booklist)<span class=\"pl-k\">;</span>\napp.get(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/album<span class=\"pl-pds\">'</span></span>, api.album)<span class=\"pl-k\">;</span></pre></div>\n<p><strong>调试设置</strong></p>\n<p><code>.vscode</code> 文件夹及 <code>launch.json</code></p>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-ii\">//</span> <span class=\"pl-ii\">使用</span> <span class=\"pl-ii\">IntelliSense</span> <span class=\"pl-ii\">了解相关属性。</span>\n  <span class=\"pl-ii\">//</span> <span class=\"pl-ii\">悬停以查看现有属性的描述。</span>\n  <span class=\"pl-ii\">//</span> <span class=\"pl-ii\">欲了解更多信息，请访问</span>: <span class=\"pl-ii\">https://go.microsoft.com/fwlink/?linkid=</span><span class=\"pl-c1\">830387</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>version<span class=\"pl-pds\">\"</span></span><span class=\"pl-ii\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.2.0<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>configurations<span class=\"pl-pds\">\"</span></span>: [\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>request<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>launch<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vue-blog-server<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>program<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${workspaceFolder}<span class=\"pl-cce\">\\\\</span>bin<span class=\"pl-cce\">\\\\</span>www<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ii\">//</span> <span class=\"pl-ii\">skipFiles</span> <span class=\"pl-ii\">就是忽略我们不关心的文件</span> <span class=\"pl-ii\">&lt;node_internals&gt;</span> <span class=\"pl-ii\">用来忽略</span> <span class=\"pl-ii\">Node.js</span> <span class=\"pl-ii\">核心模块</span>\n      <span class=\"pl-ii\">//</span> <span class=\"pl-ii\">这样在单步调试时就不会进入到</span> <span class=\"pl-ii\">node_modules和node核心模块里</span>\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>skipFiles<span class=\"pl-pds\">\"</span></span>: [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${workspaceFolder}/node_modules/**/*.js<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;node_internals&gt;/**/*.js<span class=\"pl-pds\">\"</span></span>\n      ]\n    }\n  ]\n}\n</pre></div>\n<blockquote>\n<p>参考 <a href=\"https://github.com/nswbmw/node-in-debugging/blob/master/4.3%20Visual%20Studio%20Code.md\">node-in-debugging</a></p>\n</blockquote>\n<p><strong>主页</strong></p>\n<ul>\n<li><code>/articlelist?page=1</code> 文章列表</li>\n</ul>\n<p>根据页码参数 <code>page</code>与 <code>data/articles.json</code>（含有 \"articleId\"，\"articleTitle\"，\"articleDate\"，articleTags\",\"articleCategories\" 等关键文章信息） 确定分页展示条数<code>id</code>，再与 <code>articles</code> 文件夹里的 <code>md</code>文档 组合（新增 articleContent 参数）返回文章分页数据。</p>\n<ul>\n<li><code>/article?id=24</code> 文章详情</li>\n</ul>\n<p>根据传入的 <code>id</code>参数与 读取 <code>articles</code>文件夹下的相应 <code>md</code>数据，再与 <code>data/articles.json</code> 同 <code>文章 id</code>的原有数据合并，返回单个文章详情。</p>\n<ul>\n<li><code>searchlist?keyword=1</code> 搜索列表</li>\n</ul>\n<p>根据传入的搜索参数，在 <code>data/articles.json</code>中进行匹配，支持 <code>articleTitle</code> 标题与 <code>articleTags</code> 标签匹配。</p>\n<ul>\n<li><code>/articletag</code> 文章标签列表</li>\n</ul>\n<p>根据 <code>data/articles.json</code> 文章数据中 <code>articleTags</code>数组参数合并而来。</p>\n<p><strong>归档列表页</strong></p>\n<ul>\n<li><code>/archivelist?page=1</code></li>\n</ul>\n<p>根据传入的分页参数，以及 <code>data/articles.json</code> 文章 数据中的时间参数 <code>articleDate</code>，将每页展示的 10 个数据进行构建为新的按时间年限分布的数据：</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>count<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">29</span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data<span class=\"pl-pds\">\"</span></span>: [\n    { <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>archiveArticles<span class=\"pl-pds\">\"</span></span>: [], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>archiveDate<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">2018</span> },\n    { <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>archiveArticles<span class=\"pl-pds\">\"</span></span>: [], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>archiveDate<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">2017</span> }\n  ],\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ret<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">true</span>\n}</pre></div>\n<p><strong>读书与相册页</strong></p>\n<ul>\n<li><code>/booklist</code> &amp; <code>/album</code></li>\n</ul>\n<p>分别使用 <code>data/books.json</code>与<code>data/album.json</code>做为源数据返回。</p>\n<p><strong>关于页</strong></p>\n<ul>\n<li><code>/about</code> 关于页</li>\n</ul>\n<p>关于页读取 <code>about/about.md</code> 文档的使用 json 格式返回。</p>"
  },
  {
    "id": 94,
    "title": "互联网行业术语纪录",
    "labels": "开发者笔记",
    "created_at": "2019-10-30T15:02:32Z",
    "updated_at": "2019-11-18T05:25:29Z",
    "body_html": "<h2>目录</h2>\n<p><strong>职位</strong></p>\n<ul>\n<li>CEO：首席执行官 （Chief executive officer），是在一个企业中负责日常事务的最高行政官员，又称作行政总裁、总经理或最高执行长</li>\n<li>CTO:  首席技术官(Chief technology officer)， 类似总工程师，是企业內负责技术的最高负责人</li>\n<li>COO: 首席运营官(Chief operating officer) ，是公司团体里负责监督管理每日活动的高阶官员，并直接报告给首席执行官</li>\n<li>CFO: 首席财务官(Chief financial officer) ，类似财务总经理</li>\n<li>PM: 项目主管或项目经理（Project Manager），主要负责统筹规划项目进度及产品生命，其工作职能直接对公司高层负责。</li>\n<li>QA:  测试(Quality Assurance,中文意思是“质量保证”)</li>\n<li>UI UI设计师，泛指用户的操作界面，包含移动APP，网页，智能穿戴设备等，对软件的人机交互、操作逻辑、界面美观的整体设计</li>\n<li>UE:  用户体验（User Experience）</li>\n<li>FE: 前端（Front-End)</li>\n<li>DEV：开发（Development ）</li>\n<li>DevOps:  开发运维 （Development and operations）</li>\n<li>OP: 运维（Operations）</li>\n<li>DBA: 数据库管理员（Database Administrator）</li>\n</ul>\n<p><strong>商务模式</strong></p>\n<ul>\n<li>B2B:  公对公(business to business)，企业间的，比如阿里巴巴，超市赵经销商进货</li>\n<li>B2C:  公对个人(business to consumer )，商家对个人，比如去超市买东西</li>\n<li>C2C:  个人对个人（consumer to consumer ），比如淘宝的小店铺</li>\n<li>O2O: 线上与线下(online to offline) ，在线上消费，在线下享受服务，比如：网上下载个优惠券去KFC消费</li>\n</ul>\n<p><strong>技术名词</strong></p>\n<ul>\n<li>Micro-services 微服务</li>\n<li>PWA</li>\n<li>容错: 发生故障时，系统还能继续运行，如飞机有四个引擎，如果一个引擎坏了，剩下三个引擎，还能继续飞，这就是\"容错\"</li>\n<li>高可用: 系统中断时，尽快恢复，中断必须是短暂的，如汽车的备胎</li>\n<li>灾备:  系统毁灭时，如何抢救数据</li>\n</ul>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/11/fault-tolerance.html\" rel=\"nofollow\">阮一峰 - 容错，高可用和灾备</a></li>\n</ul>"
  },
  {
    "id": 93,
    "title": "那些事件",
    "labels": "杂物间",
    "created_at": "2019-10-30T14:53:56Z",
    "updated_at": "2019-12-30T04:39:12Z",
    "body_html": "<h2>前言</h2>\n<p>纪录一些在我们国家备受瞩目的事件，因为容易忘记，所以纪录下来。理性看待，独立思考。</p>\n<h2>时间轴</h2>\n<p><strong>1998</strong></p>\n<ul>\n<li>我国开始构建网络防火墙（Great Firewall)【<a href=\"https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E\" rel=\"nofollow\">wiki</a>】</li>\n<li>11月，腾讯公司在深圳成立</li>\n</ul>\n<p><strong>1999</strong></p>\n<ul>\n<li>2月11日，腾讯公司推出QQ</li>\n<li>5月8日，美军轰炸中国驻南斯拉夫联盟使馆事件，抵制美国 【<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%94%E5%85%AB%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a>】</li>\n<li>7月9日，李登辉提出两国论</li>\n<li>7月20日，宣布法轮功为非法组织并开始取缔</li>\n</ul>\n<p><strong>2000</strong></p>\n<ul>\n<li>1月1日，百度公司在北京中关村成立，创立百度搜索引擎</li>\n</ul>\n<p><strong>2001</strong></p>\n<ul>\n<li>1月23日，天安门自焚事件（关键词 法轮功）</li>\n<li>7月13日，北京以赢得2008年奥林匹克运动会主办权</li>\n<li>12月11日，中华人民共和国加入世界贸易组织</li>\n</ul>\n<p><strong>2003</strong></p>\n<ul>\n<li>非典型肺炎，简称非典，爆发(2002年11月16日在中国广东省顺德首发) 【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%9A%B4%E9%87%8D%E6%80%A5%E6%80%A7%E5%91%BC%E5%90%B8%E7%B3%BB%E7%B5%B1%E7%B6%9C%E5%90%88%E7%97%87\" rel=\"nofollow\">wiki</a>】</li>\n<li>5月10日，淘宝网创立</li>\n<li>10月15日，宇航员杨利伟乘坐神舟五号载人航天飞船顺利完成了中国第一次载人航天飞行任务</li>\n</ul>\n<p><strong>2004</strong></p>\n<ul>\n<li>中华人民共和国爆发禽流感疫情</li>\n</ul>\n<p><strong>2005</strong></p>\n<ul>\n<li>3月至4月，日本历史教科书问题，引起在中国各地举行的一系列大型游行和抗议活动 【<a href=\"https://zh.wikipedia.org/zh-cn/2005%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%8F%8D%E6%97%A5%E7%A4%BA%E5%A8%81%E6%B4%BB%E5%8A%A8\" rel=\"nofollow\">wiki</a>】</li>\n<li>中华人民共和国《反分裂国家法》通过并执行</li>\n<li>中国成功完成神舟六号双人多天宇航任务</li>\n</ul>\n<p><strong>2006</strong></p>\n<ul>\n<li>7月1日，青藏铁路全线通车</li>\n<li>11月20日，南京市民彭宇扶老人案</li>\n</ul>\n<p><strong>2008</strong></p>\n<ul>\n<li>4月，抵制法国连锁店家乐福超市的抗议示威活动 【<a href=\"https://zh.wikipedia.org/zh-cn/2008%E5%B9%B4%E4%B8%AD%E5%9B%BD%E6%B0%91%E4%BC%97%E6%8A%B5%E5%88%B6%E5%AE%B6%E4%B9%90%E7%A6%8F%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a>】</li>\n<li>5月12日，汶川大地震</li>\n<li>6月28日，中国毒奶粉（含三聚氰胺）事件 【<a href=\"https://zh.wikipedia.org/wiki/2008%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%A5%B6%E5%88%B6%E5%93%81%E6%B1%A1%E6%9F%93%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a>】</li>\n<li>8月8日，北京奥运会</li>\n</ul>\n<p><strong>2009</strong></p>\n<ul>\n<li>5月1日，四川省发现首例甲型H1N1流感。</li>\n<li>《中华人民共和国食品安全法》获得通过，于6月1日正式实施</li>\n<li>乌鲁木齐七五事件，又称打砸抢烧严重暴力犯罪事件</li>\n<li>河南省新密市农民工张海超为了证明自己得的是职业病尘肺病，开胸验肺事件 【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%BC%A0%E6%B5%B7%E8%B6%85%E5%BC%80%E8%83%B8%E9%AA%8C%E8%82%BA%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a> <a href=\"http://www.xinhuanet.com/gongyi/2018-07/24/c_129919567.htm\" rel=\"nofollow\">现状</a> <code>《让子弹飞》张六子割胃验凉粉</code>】</li>\n</ul>\n<p><strong>2010</strong></p>\n<ul>\n<li>3月23日，Google宣布退出中国市场</li>\n<li>4月14日，青海玉树地震</li>\n<li>10月8日，诺贝尔奖评选委员会宣布将2010年诺贝尔和平奖颁发给中国作家、持不同政见者刘晓波，以表彰他“长期以来以非暴力方式在中国争取基本人权”。 【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%88%98%E6%99%93%E6%B3%A2\" rel=\"nofollow\">wiki</a>】</li>\n</ul>\n<p><strong>2011</strong></p>\n<ul>\n<li>9月地沟油事件（最早可追溯到 1998 年）</li>\n<li>10月13日，小悦悦事件 【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%B0%8F%E6%82%A6%E6%82%A6%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a>】</li>\n<li>中华民国政府与台湾人民对东日本大震灾展开援助</li>\n</ul>\n<p><strong>2012</strong></p>\n<ul>\n<li>10月11日13时，莫言获诺贝尔文学奖 【<a href=\"https://zh.wikipedia.org/zh-cn/%E8%8E%AB%E8%A8%80\" rel=\"nofollow\">wiki</a>】</li>\n<li>钓鱼岛争端，中国反日示威活动 【<a href=\"https://zh.wikipedia.org/zh-cn/%E6%97%A5%E6%9C%AC%E6%94%BF%E5%BA%9C%E8%B4%AD%E4%B9%B0%E9%92%93%E9%B1%BC%E5%B2%9B%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a> <a href=\"https://zh.wikipedia.org/zh-cn/2012%E5%B9%B4%E4%B8%AD%E5%9B%BD%E5%8F%8D%E6%97%A5%E7%A4%BA%E5%A8%81%E6%B4%BB%E5%8A%A8\" rel=\"nofollow\">wiki</a>】</li>\n</ul>\n<p><strong>2013</strong></p>\n<ul>\n<li>3月4日，中国大陆发现首例人类感染H7N9病例，禽流感 【<a href=\"https://zh.wikipedia.org/wiki/%E7%94%B2%E5%9E%8B%E6%B5%81%E6%84%9F%E7%97%85%E6%AF%92H7N9%E4%BA%9E%E5%9E%8B\" rel=\"nofollow\">wiki</a>】</li>\n<li>4月20日，四川省芦山“4·20”7.0级强烈地震/雅安大地震</li>\n</ul>\n<p><strong>2014</strong></p>\n<ul>\n<li>3月8号,凌晨，从马来西亚首都吉隆坡飞往北京的MH370航班与地面失去联系，飞机上多为中国公民的239名乘客和机组人员消失</li>\n<li>3月18日至4月10日期间，两岸服务贸易协议预计签署，在立法院审查期间发生太阳花学运 【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%A4%AA%E9%99%BD%E8%8A%B1%E5%AD%B8%E9%81%8B\" rel=\"nofollow\">wiki</a>】</li>\n<li>12月15日，内蒙古自治区高级人民法院判决呼格吉勒图无罪  【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%91%BC%E6%A0%BC%E5%90%89%E5%8B%92%E5%9B%BE%E6%A1%88\" rel=\"nofollow\">wiki</a>】</li>\n</ul>\n<p><strong>2015</strong></p>\n<ul>\n<li>4月6日，身为公众人物的毕福剑因“酒桌唱戏事件”所造成的影响选择主动离开中国中央电视台。此后，毕福剑在大众视野中消失</li>\n<li>8月12日，天津港危险品仓库爆炸事故</li>\n<li>10月5日，医学家屠呦呦获得诺贝尔生理学或医学奖</li>\n<li>11月21日，周子瑜国旗事件</li>\n<li>12月16日-18日，第二届世界互联网大会于浙江乌镇举行</li>\n</ul>\n<p><strong>2016</strong></p>\n<ul>\n<li>1月，蔡英文于中华民国总统选举中当选总统</li>\n<li>4月至5月，魏則西事件 【<a href=\"https://zh.wikipedia.org/zh-cn/%E9%AD%8F%E5%88%99%E8%A5%BF%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a>】</li>\n<li>4月3日，第 35 屆香港電影金像獎最佳電影《十年》</li>\n<li>5月20日，三峡水利枢纽的核心工程——全长2309米、海拔高程185米的三峡大坝完成最后浇筑、全线建成</li>\n<li>7月12日，南海仲裁案 【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%8D%97%E6%B5%B7%E4%BB%B2%E8%A3%81%E6%A1%88\" rel=\"nofollow\">wiki</a>】</li>\n</ul>\n<p><strong>2017</strong></p>\n<ul>\n<li>3月6日，韩国部署萨德反导弹系统事件，抵制韩国乐天 【<a href=\"https://zh.wikipedia.org/zh-cn/%E9%9F%93%E5%9C%8B%E9%83%A8%E7%BD%B2%E8%96%A9%E5%BE%B7%E5%8F%8D%E5%B0%8E%E5%BD%88%E7%B3%BB%E7%B5%B1%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a>】</li>\n<li>11月20日起，北京安全隐患排查整改行动</li>\n<li>11月22日，北京红黄蓝幼儿园事件</li>\n</ul>\n<p><strong>2018</strong></p>\n<ul>\n<li>7月長生生物的百白破疫苗事件（大规模报道可追溯到2007年山西疫苗事件）</li>\n<li>7月17日，谷歌官方第一次公开确认蜻蜓计划（Dragonfly）已经终止。该计划原打算推出中国定制版、通过中国法律审查的阉割版搜索引擎。 【<a href=\"https://zh.wikipedia.org/zh-cn/%E8%9C%BB%E8%9C%93%E8%A8%88%E7%95%AB\" rel=\"nofollow\">wiki</a>】</li>\n<li>8月5日，非洲猪瘟疫情开始在中国大陆爆发 【<a href=\"https://zh.wikipedia.org/zh-cn/%E9%9D%9E%E6%B4%B2%E8%B1%AC%E7%98%9F%E7%97%85%E6%AF%92%E7%A7%91\" rel=\"nofollow\">wiki</a> <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E9%9D%9E%E6%B4%B2%E7%8C%AA%E7%98%9F%E7%96%AB%E6%83%85\" rel=\"nofollow\">wiki</a>】</li>\n<li>8月8日，四川九寨沟发生Ms7.0级地震</li>\n<li>9月22日，梵蒂冈与中国双方宣布已就主教任命问题签署临时协议</li>\n<li>11月21日，意大利奢侈品牌D&amp;G辱华事件  <code>《起筷吃饭》</code> 【<a href=\"https://zh.wikipedia.org/zh-cn/%E6%9D%9C%E5%98%89%E7%8F%AD%E7%BA%B3#%E8%BE%B1%E5%8D%8E\" rel=\"nofollow\">wiki</a>】</li>\n<li>12月1日，华为孟晚舟被捕，美国封杀及相关国家限制华为事件  【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%AF%B9%E5%8D%8E%E4%B8%BA%E7%9A%84%E4%BA%89%E8%AE%AE#%E7%BE%8E%E5%9B%BD%E5%B0%81%E6%9D%80%E5%8F%8A%E7%9B%B8%E9%97%9C%E5%9C%8B%E5%AE%B6%E9%99%90%E5%88%B6%E5%8D%8E%E4%B8%BA%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a>】</li>\n</ul>\n<p><strong>2019</strong></p>\n<ul>\n<li>4月，996.ICU事件「工作996，生病ICU」 【<a href=\"https://github.com/996icu/996.ICU\">996.ICU</a>】</li>\n<li>6月9日，香港反对《逃犯条例》修订草案运动 【<a href=\"https://zh.wikipedia.org/zh-cn/%E5%8F%8D%E5%B0%8D%E9%80%83%E7%8A%AF%E6%A2%9D%E4%BE%8B%E4%BF%AE%E8%A8%82%E8%8D%89%E6%A1%88%E9%81%8B%E5%8B%95\" rel=\"nofollow\">wiki</a>】</li>\n<li>6月17日，抵制第 56 届金马奖事件 【<a href=\"https://zh.wikipedia.org/zh-cn/%E4%B8%AD%E5%9C%8B%E5%A4%A7%E9%99%B8%E5%9C%8B%E5%AE%B6%E9%9B%BB%E5%BD%B1%E5%B1%80%E6%8A%B5%E5%88%B6%E7%AC%AC56%E5%B1%86%E9%87%91%E9%A6%AC%E7%8D%8E%E4%BA%8B%E4%BB%B6\" rel=\"nofollow\">wiki</a>】</li>\n<li>6月20日，新晃一中操场案件埋尸案（2003年1月发生的杀人藏尸），被害人为学校教师邓世平 【<a href=\"https://zh.wikipedia.org/zh-cn/%E6%96%B0%E6%99%83%E4%B8%80%E4%B8%AD%E6%93%8D%E5%9C%BA%E5%9F%8B%E5%B0%B8%E6%A1%88\" rel=\"nofollow\">wiki</a>】</li>\n<li>9月1日，董卿主持的电视节目《开学第一课》谈爱国</li>\n<li>10月4日，NBA涉港言论争议事件</li>\n<li>11月24日，网易暴力裁员事件 【<a href=\"https://www.williamlong.info/archives/5898.html\" rel=\"nofollow\">网易裁员，让保安把身患绝症的我赶出公司，我在网易亲身经历的噩梦</a>】</li>\n<li>11月28日，华为员工离职被公司起诉并羁押 251 天，251事件 【<a href=\"https://github.com/evil-huawei/evil-huawei/tree/master/events/%E5%8D%8E%E4%B8%BA%E5%91%98%E5%B7%A5%E7%A6%BB%E8%81%8C%E8%A2%AB%E5%85%AC%E5%8F%B8%E8%B5%B7%E8%AF%89%E5%B9%B6%E7%BE%81%E6%8A%BC%20251%20%E5%A4%A9\">github/evil-huawei</a>】</li>\n</ul>\n<h2>待总结</h2>\n<ul>\n<li>学习强国</li>\n<li>徐晓东打假</li>\n</ul>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/%E4%B8%AD%E5%9B%BD%E5%8E%86%E5%8F%B2%E5%B9%B4%E8%A1%A8\" rel=\"nofollow\">中国历史年表</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=cfyZzwxOJNg\" rel=\"nofollow\">睿眼看世界 - 被“爱国群众”抵制过的那些国家和品牌，它们现在怎么样了？</a></li>\n<li><a href=\"https://www.williamlong.info/\" rel=\"nofollow\">月光博客</a></li>\n</ul>"
  },
  {
    "id": 92,
    "title": "前端项目目录结构优化",
    "labels": "开发者笔记",
    "created_at": "2019-10-24T02:33:52Z",
    "updated_at": "2019-10-24T02:57:13Z",
    "body_html": "<h2>前言</h2>\n<p>好的项目目录结构，有利于项目全生命周期的开发与维护工作。</p>\n<h2>小程序项目</h2>\n<p><strong>中小型项目</strong></p>\n<ul>\n<li>结构按功能模块划分</li>\n<li>主业务模按类 <code>BEM</code> 的命名法则拼接，调试或编辑 <code>Ctrl + p</code> 进行快速定位（约4个分类，我在这里设计的 pages 内的文件夹与其内主页面名保持一致）。</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>├───api\n├───assets\n├───component\n├───filter\n├───libs\n├───mock\n├───pages\n│   ├───activity_detail // - 活动详情\n│   │        ├─── activity_detail.wxml  页面的 wxml 文件\n│   ├───authorizationLogin // - 授权登录\n│   ├───index // 首页\n│   ├───index_inviteFriend // 邀请好友\n│   ├───index_leaveAMessage //- 留言\n│   ├───index_lifeService // - 生活服务\n│   ├───index_openPlus // - 开通plus会员\n│   ├───index_plus // - plus会员\n│   ├───index_search // - 搜索\n│   ├───logs\n│   ├───my // 我的\n│   ├───my_addShoppingAddress // - 添加收货地址\n│   ├───my_coupon // - 我的积分\n│   ├───my_editShoppingAddress // - 编辑收货地址\n│   ├───my_evaluation // - 评价\n│   ├───my_integral // - 我的积分\n│   ├───my_invite // - 我的邀请\n│   ├───my_memberInfo // - 会员信息\n│   ├───my_order // - 我的订单\n│   ├───my_orderDetail // 订单详情\n│   ├───my_shoppingAddress // - 收货地址\n│   ├───selectAddress // - 选择地址\n│   ├───shoppingCart // 购物车\n│   ├───shoppingCart_confirm // - 确认订单\n│   ├───shoppingCart_coupon // - 优惠券\n│   ├───shoppingCart_paySuccess // - 支付成功\n│   ├───shoppingCart_productList // - 商品列表\n│   ├───sort // 分类\n│   └───sort_detail // - 商品详情\n├───style\n└───utils\n</pre></div>\n<p><strong>大型项目</strong></p>\n<ul>\n<li>结构按功能模块划分</li>\n<li>主业务模按类 模块类型建文件夹区别划分 （8个分类）</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>├───components // 业务组件\n├───layouts // 布局组件\n├───pages\n│   ├───address\n│   │   ├───address_edit\n│   │   ├───address_search // TODO:地址搜索\n│   │   └───address_select\n│   ├───authorization // 授权登录\n│   │   └───selectShop\n│   ├───classification // 分类\n│   │   ├───classification_detail // 商品详情\n│   │   └───groupRule\n│   ├───home\n│   │   ├───bannerDetail\n│   │   ├───groupBuy // 超值拼团 更多\n│   │   ├───limitedBuy // 限量抢购 更多\n│   │   ├───logistics // 进果-水果物流配送\n│   │   └───searchResult\n│   ├───index\n│   ├───shopping\n│   │   ├───confirmationGroup // 确认拼团\n│   │   ├───confirmcartOrder // 确认订单\n│   │   ├───payOrderSuccess\n│   │   └───productList\n│   ├───sir\n│   │   ├───sir_apply // 申请楼长\n│   │   ├───sir_underReview // 待审核\n│   │   ├───sir_apply_review // 审核未通过(二次审核)\n│   │   ├───sir_customer // 客户管理\n│   │   ├───sir_customerDetail\n│   │   ├───sir_customerGroupOrderLists // 客户订单管理\n│   │   ├───sir_customerGroupOrderLists_detail\n│   │   ├───sir_customerOrderLists // 团购订单管理\n│   │   ├───sir_customerOrderLists_detail\n│   │   ├───sir_fund // 资金明细\n│   │   ├───sir_fund_already\n│   │   ├───sir_fund_detail\n│   │   ├───sir_fund_expected\n│   │   ├───sir_manage\n│   │   ├───sir_promoCode // 推广二维码\n│   │   ├───sir_promotionData\n│   │   └───sir_withdraw // 提现\n│   └───userCenter\n│       ├───myCoupon // 我的优惠券\n│       ├───myCoupon_select\n│       ├───myRegiment  // 我的拼团\n│       ├───myRegiment_detail // - 详情\n│       ├───orderLists // 普通订单列表\n│       ├───orderLists_detail // - 详情\n│       ├───userInfo\n│       └───userInfo_changeMobile\n</pre></div>\n<h2>单页面应用</h2>\n<ul>\n<li>结构按功能模块划分</li>\n<li>主业务模复杂，需要侧重<code>页面内的组件</code>以及<code>全局可用的公共组件</code>划分，考虑公用及个性化的均衡。</li>\n</ul>\n<pre><code>|-- src/ 源代码目录\n    |-- page1/ page1 页面的工作空间\n        |-- index.js 入口文件\n        |-- data/ 本地 json 数据模拟\n        |-- images/ 图片文件目录\n        |-- components/ 组件目录（如果基于 react, vue 等组件化框架）\n        |-- ...\n\n    |-- module1/ 子目录\n        |-- page2/ page2 页面的工作空间（内部结构跟 page1 类似）\n\n    |-- ...\n\n|-- assets/ 公共图片目录\n|-- styles/ 公共样式目录\n|-- mock/ 公共 api-mock 文件目录\n|-- components/ 公共业务组件目录\n|-- layouts/ 公共布局组件目录\n|-- utils/ 公共工具方法目录\n|-- ...\n</code></pre>\n<h3>参考资料</h3>\n<ul>\n<li><a href=\"https://github.com/senntyou/blogs/blob/master/web-advance/11.md\">目录结构优化</a></li>\n</ul>"
  },
  {
    "id": 91,
    "title": "假如今天成为我生命的最后一天",
    "labels": "观点与感想",
    "created_at": "2019-10-22T00:46:59Z",
    "updated_at": "2019-10-22T14:06:25Z",
    "body_html": "<h2>这天的可能性</h2>\n<p><strong>1. 有可能发生的意外</strong></p>\n<p><strong>2. 主在今日降临，审判临到</strong></p>\n<p><code>42</code> 所以你们要儆醒，因为不知道你们的主是哪一天来到。<br>\n<code>43</code> 家主若知道几更天有贼来，就必儆醒，不容人挖透房屋。这是你们所知道的。<br>\n<code>44</code> 所以你们也要预备。因为你们想不到的时候，人子就来了。<br>\n<code>45</code> 谁是忠心有见识的仆人，为主人所派，管理家里的人，按时分粮给他们呢？<br>\n<code>46</code> 主人来到，看见他这样行，那仆人就有福了。<br>\n<code>47</code> 我实在告诉你们，主人要派他管理一切所有的。<br>\n<code>48</code> 倘若那恶仆心里说，我的主人必来得迟，<br>\n<code>49</code> 就动手打他的同伴，又和酒醉的人一同吃喝。<br>\n<code>50</code> 在想不到的日子，不知道的时辰，那仆人的主人要来，<br>\n<code>51</code> 重重地处治他，（或作把他腰斩了）定他和假冒为善的人同罪。在那里必要哀哭切齿了。</p>\n<blockquote>\n<p>【马太福音 24：42-51】</p>\n</blockquote>\n<h2>所有的遗憾</h2>\n<ul>\n<li>向主交账\n<ul>\n<li>我是一个假冒为善的，被罪所辖制脱不开的</li>\n<li>不爱主，这人可咒可诅</li>\n<li>躲避神的面，自甘堕落</li>\n</ul>\n</li>\n<li>与爱人，还未携手</li>\n<li>今日所作的事，是虚空吗？</li>\n</ul>\n<h2>为什么没有过好？</h2>\n<ul>\n<li>今天与主的关系一点都不好，(读经)没有与主同行</li>\n<li>没有真正的爱，不敬畏，不爱主</li>\n<li>眼目的情欲，肉体的情欲捆绑，陷入进去</li>\n</ul>\n<h2>你要生命吗？</h2>\n<ul>\n<li>依靠圣灵治死恶行</li>\n</ul>\n<p><code>13</code> 你们若顺从肉体活着必要死。若靠着圣灵治死身体的恶行必要活着。<br>\n<code>14</code> 因为凡被神的灵引导的，都是神的儿子。<br>\n<code>15</code> 你们所受的不是奴仆的心，仍旧害怕。所受的乃是儿子的心，因此我们呼叫阿爸，父。<br>\n<code>16</code> 圣灵与我们的心同证我们是神的儿女。<br>\n<code>17</code> 既是儿女，便是后嗣，就是神的后嗣，和基督同作后嗣。如果我们和他一同受苦，也必和他一同得荣耀。<br>\n<code>18</code> 我想现在的苦楚，若比起将来要显于我们的荣耀，就不足介意了。</p>\n<blockquote>\n<p>【罗马书 8: 13-18】</p>\n</blockquote>\n<ul>\n<li>避无可避</li>\n</ul>\n<p><code>1</code> 耶和华阿，你已经鉴察我，认识我。<br>\n<code>2</code> 我坐下，我起来，你都晓得。你从远处知道我的意念。<br>\n<code>3</code> 我行路，我躺卧，你都细察，你也深知我一切所行的。<br>\n<code>4</code> 耶和华阿，我舌头上的话，你没有一句不知道的。<br>\n<code>5</code> 你在我前后环绕我，按手在我身上。<br>\n<code>6</code> 这样的知识奇妙，是我不能测的。至高，是我不能及的。<br>\n<code>7</code> 我往那里去躲避你的灵。我往那里逃躲避你的面。<br>\n<code>8</code> 我若升到天上，你在那里。我若在阴间下榻，你也在那里。<br>\n<code>9</code> 我若展开清晨的翅膀，飞到海极居住。<br>\n<code>10</code> 就是在那里，你的手必引导我，你的右手，也必扶持我。<br>\n<code>11</code> 我若说，黑暗必定遮蔽我，我周围的亮光必成为黑夜。<br>\n<code>12</code> 黑暗也不能遮蔽我使你不见，黑夜却如白昼发亮。黑暗和光明，在你看都是一样。<br>\n<code>13</code> 我的肺腑是你所造的。我在母腹中，你已覆庇我。<br>\n<code>14</code> 我要称谢你，因我受造，奇妙可畏。你的作为奇妙，这是我心深知道的。<br>\n<code>15</code> 我在暗中受造，在地的深处被联络。那时，我的形体并不向你隐藏。<br>\n<code>16</code> 我未成形的体质，你的眼早已看见了。你所定的日子，我尚未度一日（或作我被造的肢体尚未有其一），你都写在你的册上了。</p>\n<blockquote>\n<p>【诗篇 139】</p>\n</blockquote>\n<ul>\n<li>世人哪，耶和华已指示你何为善，他向你所要的是什么呢？存谦卑的心，与你的神同行。 —— 弥迦书 7:8</li>\n<li>我所见为善为美的，就是人在神赐他一生的日子吃喝，享受日光之下劳碌得来的好处，因为这是他的份。—— 傳道書 5:18</li>\n<li>虽然无花果树不发旺，葡萄树不结果，橄榄树也不效力，田地不出粮食，圈中绝了羊，棚内也没有牛；然而，我要因耶和华欢欣，因救我的神喜乐。主耶和华是我的力量！他使我的脚快如母鹿的脚，又使我稳行在高处。 —— 哈巴谷书3:17-19</li>\n<li>我们人生最大的目标不是有更大的房子，或是买一部更好的车，乃是成为敬虔的人，效法基督模样的人，这才是最重要的事。—— 保罗华许</li>\n</ul>"
  },
  {
    "id": 90,
    "title": "Vuex 使用入门",
    "labels": "开发者笔记",
    "created_at": "2019-10-22T00:30:33Z",
    "updated_at": "2019-12-30T04:39:30Z",
    "body_html": "<h2>Vuex 是什么？</h2>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p>\n<ol>\n<li>状态共享，非父子组件通信</li>\n<li>数据快照，缓存数据，避免重复请求，影响用户体验</li>\n<li>dev环境下 time-travel 调试</li>\n</ol>\n<h2>实现模式</h2>\n<p>利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新</p>\n<h2>流程解读</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/205be9310c185c68b5466a6a8ba29bd2febc3b27/68747470733a2f2f767565782e7675656a732e6f72672f767565782e706e67\"><img src=\"https://camo.githubusercontent.com/205be9310c185c68b5466a6a8ba29bd2febc3b27/68747470733a2f2f767565782e7675656a732e6f72672f767565782e706e67\" alt=\"\" data-canonical-src=\"https://vuex.vuejs.org/vuex.png\" style=\"max-width:100%;\"></a></p>\n<p>mutation 必须同步执行， Action ，我们则可以在 action 内部执行异步操作：</p>\n<p>同步流程：vue component -&gt; commit 触发 mutations定义的方法 -&gt; store.state -&gt; render</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">store</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Vuex.Store</span>({\n  state<span class=\"pl-k\">:</span> {\n    count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>\n  },\n  mutations<span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">increment</span> (<span class=\"pl-smi\">state</span>) {\n      <span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span><span class=\"pl-k\">++</span>\n    }\n  }\n})</pre></div>\n<p>触发 mutations</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">store</span>.<span class=\"pl-en\">commit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>increment<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>异步流程: vue component -&gt; dispatch 触发 actions 定义的方法 -&gt; commit 触发 mutations定义的方法 -&gt; store.state -&gt; render</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">store</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Vuex.Store</span>({\n  state<span class=\"pl-k\">:</span> {\n    count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>\n  },\n  mutations<span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">increment</span> (<span class=\"pl-smi\">state</span>) {\n      <span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span><span class=\"pl-k\">++</span>\n    }\n  },\n  actions<span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">increment</span> (<span class=\"pl-smi\">context</span>) {\n      <span class=\"pl-smi\">context</span>.<span class=\"pl-en\">commit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>increment<span class=\"pl-pds\">'</span></span>)\n    }\n  }\n})</pre></div>\n<h2>辅助函数</h2>\n<ul>\n<li>mapState</li>\n<li>mapMutations</li>\n</ul>"
  },
  {
    "id": 89,
    "title": "联想天逸300-15升级(后记)",
    "labels": "杂物间",
    "created_at": "2019-10-21T13:28:42Z",
    "updated_at": "2019-10-21T16:24:01Z",
    "body_html": "<h2>前言</h2>\n<p>再次碰到了需要升级电脑的场景 （戴尔 inspiron 1420），此篇非纪实类，实为后记，可做日后操作查看。</p>\n<h2>0. 电脑基本信息</h2>\n<ul>\n<li>上市时间 2015年10月</li>\n<li>内存容量 4GB 内存类型 DDR3L 插槽数量 2 x SO-DIMM 最大支持容量 16GB</li>\n<li>光驱，光驱类型，DVD刻录</li>\n<li>AMD Radeon R5 M330 2G 独立显卡</li>\n<li>i5-6200U</li>\n</ul>\n<p>以上第二点有剩余的内存插槽，可以加装内存条，第三点含有光驱，可借用光驱位升级 SSD。</p>\n<h2>1. 加装内存条</h2>\n<p>购入 DDR3 1600MHz 8G （<strong>容量按需购买</strong>），在内存插槽空位插入。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/53451b96bbacb2631fad15e40870ec9d83fc18c0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836336865767a6b646a32307367306c636a77742e6a7067\"><img src=\"https://camo.githubusercontent.com/53451b96bbacb2631fad15e40870ec9d83fc18c0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836336865767a6b646a32307367306c636a77742e6a7067\" alt=\"157950360_3_20190403010429691.jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g863hevzkdj20sg0lcjwt.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>2. 加装 SSD</h2>\n<p><strong>手动光驱位硬盘切换</strong></p>\n<p>准备工作：</p>\n<ul>\n<li>光驱位银盘托盘</li>\n<li>硬盘</li>\n</ul>\n<p>操作步骤：</p>\n<ol>\n<li>关机，拆下光驱</li>\n<li>拆下原装机械硬盘</li>\n<li>组合光驱与原机械硬盘，插入光驱位置</li>\n<li>SSD 安装到原机械硬盘位置</li>\n<li>盖好盖子</li>\n</ol>\n<p>关键步骤图解(取材于网络)：</p>\n<p>步骤1</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/e8b04e468f6f28c8651972e8a430b3eb34f04206/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836356161776732326a3230697730616f7134692e6a7067\"><img src=\"https://camo.githubusercontent.com/e8b04e468f6f28c8651972e8a430b3eb34f04206/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836356161776732326a3230697730616f7134692e6a7067\" alt=\"5d0321a0e5a393584.jpg_e680.jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g865aawg22j20iw0aoq4i.jpg\" style=\"max-width:100%;\"></a></p>\n<p>步骤3</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/e8c4602263fc5f5137f0f7ad149d8c409e9171dd/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167383635716f6c766f666a3230647730387a61637a2e6a7067\"><img width=\"100%\" src=\"https://camo.githubusercontent.com/e8c4602263fc5f5137f0f7ad149d8c409e9171dd/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167383635716f6c766f666a3230647730387a61637a2e6a7067\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g865qolvofj20dw08zacz.jpg\" style=\"max-width:100%;\"></a></p>\n<p>步骤 4</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/60d4b8ec7e25f538d22eba4c7331d6d960911353/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836347773637536626a32307367306c6334316c2e6a7067\"><img src=\"https://camo.githubusercontent.com/60d4b8ec7e25f538d22eba4c7331d6d960911353/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836347773637536626a32307367306c6334316c2e6a7067\" alt=\"157950360_15_20190403010432363.jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g864wscu6bj20sg0lc41l.jpg\" style=\"max-width:100%;\"></a></p>\n<p><strong>迁移系统</strong></p>\n<p>通电开机（此时进入的仍然是机械盘的系统）</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/785c2372446ddaa65d1776eeb904547c75384724/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836336b7032616d726a3230736630666234316a2e6a7067\"><img src=\"https://camo.githubusercontent.com/785c2372446ddaa65d1776eeb904547c75384724/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836336b7032616d726a3230736630666234316a2e6a7067\" alt=\"157950360_16_20190403010432535.jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g863kp2amrj20sf0fb41j.jpg\" style=\"max-width:100%;\"></a></p>\n<p>进入系统后打开<a href=\"https://www.disktool.cn/\" rel=\"nofollow\">分区助手</a>，考虑是否需要 SSD 分区（建议跳过这一步），借助分区助手迁移系统到固态硬盘，根据提示迁移系统，中间机器会重启。</p>\n<p><strong>设置新的启动方式</strong></p>\n<p>迁移完成后开机按 Fn + F2 进入 BIOS 里的 boot选项，选中 SSD 按 F5 调到第一位，最后按 F10 保存重启。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/3d7f513e185c311bd05d955d5d028961f77b5415/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836337571636c74706a32306d3830656c6469722e6a7067\"><img src=\"https://camo.githubusercontent.com/3d7f513e185c311bd05d955d5d028961f77b5415/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836337571636c74706a32306d3830656c6469722e6a7067\" alt=\"157950360_17_20190403010432707.jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g863uqcltpj20m80eldir.jpg\" style=\"max-width:100%;\"></a></p>\n<p><strong>最终效果</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/9e71e4c17689488ced61a2023e8b984f7c6db456/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836356d33736832686a3230776c306a386162712e6a7067\"><img src=\"https://camo.githubusercontent.com/9e71e4c17689488ced61a2023e8b984f7c6db456/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673836356d33736832686a3230776c306a386162712e6a7067\" alt=\"Snipaste_2019-10-21_21-42-42.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g865m3sh2hj20wl0j8abq.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>To do For Inspiron 1420</h2>\n<blockquote>\n<p>升级 CPU + 内存 + SSD</p>\n</blockquote>\n<p>基本信息：</p>\n<ul>\n<li>上市时间  2008年12月</li>\n<li>CPU型号 Intel 奔腾双核 T3200 667</li>\n<li>1G DDRII 最大内存容量 4GB</li>\n<li>光驱类型 内置DVD刻录机</li>\n</ul>\n<p>准备工作:</p>\n<ul>\n<li>T9300（6M2.5G800） PGA原装正式版 + 导热硅脂 一支 + 显卡散热铜片 （90.5元）</li>\n<li>DDR2 2G （48 元）</li>\n<li>ShineDisk M667 120G SSD + 戴尔 1420 笔记本光驱位硬盘 （95+43 元）</li>\n</ul>\n<blockquote>\n<p>总计： 276.5元</p>\n</blockquote>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://post.smzdm.com/p/306212/\" rel=\"nofollow\">Inspiron 1420 升级CPU、内存及清理风扇</a></li>\n</ul>"
  },
  {
    "id": 88,
    "title": "2019年终总结（冲刺版）",
    "labels": "观点与感想",
    "created_at": "2019-10-19T10:59:04Z",
    "updated_at": "2019-10-19T10:59:24Z",
    "body_html": "<h2>目标立项</h2>\n<ol>\n<li>上帝 —— 读经完成一遍，每天5章的进度（2019.10.20 读完）</li>\n<li>爱人 —— 与虹佑的关系</li>\n<li>父母 —— 升级 戴尔 Inspiron 1420</li>\n<li>自考尽全力通过剩余科目（2019.10.20 预备考倒数第二门，剩余一门科目）</li>\n<li>诗班中钢琴学习</li>\n<li>工作 —— 前端 <code>node.js</code> 技术进阶</li>\n</ol>\n<blockquote>\n<p>其中的最后两项是7月份立下的 flag</p>\n</blockquote>\n<h2>冲刺的任务</h2>\n<ul>\n<li><strong>钢琴练习</strong></li>\n</ul>\n<h2>年终检验</h2>\n<p><strong>未预计的成长</strong></p>\n<ul>\n<li>做菜</li>\n<li>爱上写 blog</li>\n<li>读书 《狂人日记》《小王子》《丑陋的中国人》</li>\n</ul>\n<h2>总结回顾</h2>"
  },
  {
    "id": 87,
    "title": "关于编程学习方法的讨论",
    "labels": "开发者笔记",
    "created_at": "2019-10-19T10:26:40Z",
    "updated_at": "2019-12-30T04:39:50Z",
    "body_html": "<p>1、程序员与工程师的区别</p>\n<p>2、系统性学习，完善自己的知识体系</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/72e414074de178a01cebee9e917fd6d1f140c8ce/68747470733a2f2f6c7371696d672d313235373931373435392e636f732e61702d6265696a696e672e6d7971636c6f75642e636f6d2f626c6f672f2545372539462541352545382541462538362545342542442539332545372542332542422e706e67\"><img src=\"https://camo.githubusercontent.com/72e414074de178a01cebee9e917fd6d1f140c8ce/68747470733a2f2f6c7371696d672d313235373931373435392e636f732e61702d6265696a696e672e6d7971636c6f75642e636f6d2f626c6f672f2545372539462541352545382541462538362545342542442539332545372542332542422e706e67\" alt=\"img\" data-canonical-src=\"https://lsqimg-1257917459.cos.ap-beijing.myqcloud.com/blog/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.png\" style=\"max-width:100%;\"></a></p>\n<p><strong>知识图谱</strong></p>\n<ul>\n<li><a href=\"https://github.com/ConardLi/ConardLi.github.io\">https://github.com/ConardLi/ConardLi.github.io</a></li>\n</ul>\n<p>3、雇主最看重的是解决问题的技能，而不是编程语言的熟练程度、调试能力和系统设计。</p>\n<p>新程序员犯下的最大错误就是专注于学习语法，而不是学习如何解决问题。</p>\n<p>-- <a href=\"https://medium.com/free-code-camp/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2\" rel=\"nofollow\">《解决问题的经验教训》</a></p>\n<p>4、<a href=\"https://blog.cleancoder.com/uncle-bob/2015/11/18/TheProgrammersOath.html\" rel=\"nofollow\">程序员的誓言</a></p>\n<p>鲍勃·马丁大叔（Bob Martin）是软件开发理论的巨头之一。他提出的程序员誓言，是这个行业的基本职业道德。</p>\n<p>誓言由关于软件开发人员的九个道德目标组成。</p>\n<div class=\"highlight highlight-source-shell\"><pre>为了捍卫和维护计算机程序员的职业荣誉，我承诺，尽我所能和判断力：\n\n1、我不会产生有害的代码。\n\n2、我制作的代码永远是我最好的作品。我不会故意允许在行为或结构上有缺陷的代码。\n\n3、每次发布时，我都会生成一个快速、可靠、可重复的证据，证明代码的每个元素都应该正常工作。\n\n4、我将经常发布小版本，这样我就不会妨碍其他人的进展。\n\n5、我会抓住每一个机会，无畏地，不懈地改进我的代码。我永远不会损害它们。\n\n6、我将尽我所能保持自己和他人的生产力。我不会做任何降低生产力的事情。\n\n7、我将继续确保支持其他人的工作，并且他们也可以支持我的工作。\n\n8、我将对幅度和精度做出诚实的估计。我不会作出做不到的诺言。\n\n9、我将永远不会停止学习和改进我的手艺。</pre></div>\n<p>5、寻找专精的方向</p>\n<p>6、工具与效率</p>\n<h3>参考链接</h3>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/10/weekly-issue-78.html\" rel=\"nofollow\">科技爱好者周刊：第 78 期</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/10/weekly-issue-79.html\" rel=\"nofollow\">科技爱好者周刊：第 79 期</a></li>\n<li><a href=\"https://github.com/lifesinger/blog/issues/172\" data-hovercard-type=\"issue\" data-hovercard-url=\"/lifesinger/blog/issues/172/hovercard\">lifesinger/blog - 工具与效率 </a></li>\n<li>知乎 - 编程究竟难在哪？</li>\n</ul>"
  },
  {
    "id": 86,
    "title": " React & Vue 用法区别记",
    "labels": "开发者笔记",
    "created_at": "2019-10-16T18:13:20Z",
    "updated_at": "2019-12-30T04:40:09Z",
    "body_html": "<h2>1.创建组件</h2>\n<h3>React</h3>\n<p>React 有两种类型的组件，分别是 functional component, class component，所以有两种定义方式:</p>\n<p><strong>functional component</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">Test</span>(<span class=\"pl-smi\">props</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>container<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>{<span class=\"pl-smi\">props</span>.<span class=\"pl-c1\">name</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>;\n}</pre></div>\n<p><strong>class component</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Test</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-en\">Component</span>() {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> super一定要写，继承React.Component</span>\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> state在里面定义</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> { name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>daisy<span class=\"pl-pds\">'</span></span> };\n  }\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> class创建的组件中 必须有render方法，且显示return内容或者null</span>\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shopping-list<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">name</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>;\n  }\n}</pre></div>\n<h3>Vue</h3>\n<p><strong>全局注册</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">Vue</span>.<span class=\"pl-en\">component</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>my-component-name<span class=\"pl-pds\">'</span></span>, {\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> ... <span class=\"pl-c\">*/</span></span>\n});</pre></div>\n<p><strong>局部注册</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> ComponentA <span class=\"pl-k\">=</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> ... <span class=\"pl-c\">*/</span></span>\n};\n\n<span class=\"pl-k\">new</span> <span class=\"pl-en\">Vue</span>({\n  el<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#app<span class=\"pl-pds\">'</span></span>,\n  components<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>component-a<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">:</span> ComponentA\n  }\n});</pre></div>\n<p><strong>单文件组件</strong></p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">template</span>&gt;\n  &lt;<span class=\"pl-ent\">p</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>red<span class=\"pl-pds\">\"</span></span>&gt;{{ greeting }}&lt;/<span class=\"pl-ent\">p</span>&gt;\n  &lt;<span class=\"pl-ent\">other-component</span>&gt;&lt;/<span class=\"pl-ent\">other-component</span>&gt;\n&lt;/<span class=\"pl-ent\">template</span>&gt;\n\n&lt;<span class=\"pl-ent\">script</span>&gt;<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">  <span class=\"pl-k\">import</span> <span class=\"pl-smi\">OtherComponent</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./OtherComponent.vue<span class=\"pl-pds\">'</span></span>;</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">  <span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> {</span>\n<span class=\"pl-s1\">    <span class=\"pl-en\">data</span>() {</span>\n<span class=\"pl-s1\">      <span class=\"pl-k\">return</span> {</span>\n<span class=\"pl-s1\">        gretting<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello<span class=\"pl-pds\">'</span></span></span>\n<span class=\"pl-s1\">      };</span>\n<span class=\"pl-s1\">    },</span>\n<span class=\"pl-s1\">    components<span class=\"pl-k\">:</span> {</span>\n<span class=\"pl-s1\">      OtherComponent</span>\n<span class=\"pl-s1\">    }</span>\n<span class=\"pl-s1\">  };</span>\n<span class=\"pl-s1\"></span>&lt;/<span class=\"pl-ent\">script</span>&gt;\n&lt;<span class=\"pl-ent\">style</span>&gt;<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">  <span class=\"pl-e\">.red</span> {</span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\"><span class=\"pl-c1\">color</span></span>: <span class=\"pl-c1\">red</span>;</span>\n<span class=\"pl-s1\">  }</span>\n<span class=\"pl-s1\"></span>&lt;/<span class=\"pl-ent\">style</span>&gt;</pre></div>\n<h2>2. 模板语法</h2>\n<p>通过以下几个方面说：</p>\n<ul>\n<li>遍历渲染</li>\n<li>条件渲染</li>\n<li>html 属性</li>\n<li>绑定事件</li>\n</ul>\n<p><strong>React</strong></p>\n<p><strong>遍历渲染</strong>： map</p>\n<div class=\"highlight highlight-source-js\"><pre>  <span class=\"pl-en\">render</span>() {\n      <span class=\"pl-k\">var</span> repoList <span class=\"pl-k\">=</span> <span class=\"pl-smi\">repos</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">repo</span>, <span class=\"pl-smi\">index</span>) {\n        <span class=\"pl-k\">return</span> (\n          <span class=\"pl-k\">&lt;</span>li key<span class=\"pl-k\">=</span>{index}<span class=\"pl-k\">&gt;</span>\n            <span class=\"pl-k\">&lt;</span>a href<span class=\"pl-k\">=</span>{<span class=\"pl-smi\">repo</span>.<span class=\"pl-smi\">html_url</span>}<span class=\"pl-k\">&gt;</span>{<span class=\"pl-smi\">repo</span>.<span class=\"pl-c1\">name</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>a<span class=\"pl-k\">&gt;</span> ({<span class=\"pl-smi\">repo</span>.<span class=\"pl-smi\">stargazers_count</span>}{<span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>}\n            stars) <span class=\"pl-k\">&lt;</span>br <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span> {<span class=\"pl-smi\">repo</span>.<span class=\"pl-c1\">description</span>}\n          <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>li<span class=\"pl-k\">&gt;</span>\n        );\n      });\n      <span class=\"pl-k\">return</span> (\n        <span class=\"pl-k\">&lt;</span>main<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>ol<span class=\"pl-k\">&gt;</span>{repoList}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>ol<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>main<span class=\"pl-k\">&gt;</span>\n      );\n    }\n  }</pre></div>\n<p><strong>条件渲染</strong>：使用三目，&amp;&amp;，如果逻辑在复杂一点就得用函数来帮忙了</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">render</span>() {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">isLoggedIn</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">isLoggedIn</span>;\n  <span class=\"pl-k\">return</span> (\n    <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n      isHappy <span class=\"pl-k\">?</span> <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span> yes i am  <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span> no <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n  );\n}\n\n<span class=\"pl-en\">render</span>() {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">isLoggedIn</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">isLoggedIn</span>;\n  <span class=\"pl-k\">return</span> (\n    <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n       isShow <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>hello word<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n  );\n}</pre></div>\n<p><strong>html 属性</strong>: 跟原生一样直接写不过要换成驼峰式 tab-index =&gt; tabIndex，React 16 以后还支持自定义属性。</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">tabindex</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">className</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span> /&gt;\n\n&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">mycustomattribute</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>something<span class=\"pl-pds\">\"</span></span> /&gt;</pre></div>\n<p><strong>绑定事件</strong>:改成驼峰<code>onClick</code>这样的形式，同时传入一个函数</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&lt;</span>button onClick<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleClick</span>}<span class=\"pl-k\">&gt;</span>Activate Lasers<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>button<span class=\"pl-k\">&gt;</span></pre></div>\n<blockquote>\n<p>阻止默认事件需要显式使用： <code>e.preventDefault();</code></p>\n</blockquote>\n<p><strong>Vue</strong></p>\n<p><strong>遍历渲染: v-for</strong></p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">template</span>&gt;\n  &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">v-else-if</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>githubStar.length &gt;1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">v-for</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(record, index) in githubStar<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">:href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>record.html_url<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">:class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>index&lt;3?'red':''<span class=\"pl-pds\">\"</span></span>&gt;\n      {{ record.name }}\n    &lt;/<span class=\"pl-ent\">a</span>&gt;\n    ({{ record.stargazers_count }} stars)\n    &lt;<span class=\"pl-ent\">br</span> /&gt;\n    &lt;<span class=\"pl-ent\">p</span> <span class=\"pl-e\">v-if</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>index&lt;3<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">style</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-s1\"><span class=\"pl-c1\"><span class=\"pl-c1\">color</span></span>: <span class=\"pl-c1\">#000</span>;</span><span class=\"pl-pds\">\"</span></span>&gt;{{ record.description }}&lt;/<span class=\"pl-ent\">p</span>&gt;\n    &lt;<span class=\"pl-ent\">p</span> <span class=\"pl-e\">v-else</span> <span class=\"pl-e\">style</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-s1\"><span class=\"pl-c1\"><span class=\"pl-c1\">color</span></span>: <span class=\"pl-c1\">#333</span>;</span><span class=\"pl-pds\">\"</span></span>&gt;{{ record.description }}&lt;/<span class=\"pl-ent\">p</span>&gt;\n  &lt;/<span class=\"pl-ent\">li</span>&gt;\n&lt;/<span class=\"pl-ent\">template</span>&gt;</pre></div>\n<p><strong>条件渲染</strong></p>\n<ol>\n<li><code>vue-if</code> 系列</li>\n</ol>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">v-if</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type === 'A'<span class=\"pl-pds\">\"</span></span>&gt;\n  A\n&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">v-else-if</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type === 'B'<span class=\"pl-pds\">\"</span></span>&gt;\n  B\n&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">v-else-if</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type === 'C'<span class=\"pl-pds\">\"</span></span>&gt;\n  C\n&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">v-else</span>&gt;\n  Not A/B/C\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<ol start=\"2\">\n<li><code>v-show</code></li>\n</ol>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">h1</span> <span class=\"pl-e\">v-show</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ok<span class=\"pl-pds\">\"</span></span>&gt;Hello!&lt;/<span class=\"pl-ent\">h1</span>&gt;</pre></div>\n<p>与 <code>v-if</code>的逻辑显示不同，<code>v-show</code>只是简单地切换元素的 CSS 属性 display</p>\n<blockquote>\n<p>注意，v-show 不支持 <code>&lt;template&gt;</code> 元素，也不支持 v-else</p>\n</blockquote>\n<p><strong>html 属性：需要用 v-bind 来指定</strong></p>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 完整语法 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">v-bind:href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>url<span class=\"pl-pds\">\"</span></span>&gt;...&lt;/<span class=\"pl-ent\">a</span>&gt;\n\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 缩写 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">:href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>url<span class=\"pl-pds\">\"</span></span>&gt;...&lt;/<span class=\"pl-ent\">a</span>&gt;\n&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">:id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dynamicId<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;<span class=\"pl-ent\">img</span> <span class=\"pl-e\">:src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>imageSrc<span class=\"pl-pds\">\"</span></span> /&gt;\n&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">:style</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{ fontSize: size + 'px' }<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<p><strong>绑定事件</strong>:v-on</p>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 完整语法 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">v-on:click</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>doThat('hello', $event)<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">button</span>&gt;\n\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 缩写语句 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">@click</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>doThat('hello', $event)<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">button</span>&gt;</pre></div>\n<p>事件修饰符：</p>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 停止冒泡 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">@click.stop</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>doThis<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">button</span>&gt;\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 阻止默认行为 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">@click.prevent</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>doThis<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">button</span>&gt;\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 阻止默认行为，没有表达式 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">form</span> <span class=\"pl-e\">@submit.prevent</span>&gt;&lt;/<span class=\"pl-ent\">form</span>&gt;\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 点击回调只会触发一次 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">v-on:click.once</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>doThis<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">button</span>&gt;\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 键修饰符，键别名 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">input</span> <span class=\"pl-e\">@keyup.enter</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>onEnter<span class=\"pl-pds\">\"</span></span> /&gt;\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span>  串联修饰符 <span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">@click.stop.prevent</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>doThis<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">button</span>&gt;</pre></div>\n<h2>3.流通管道 Props</h2>\n<p><strong>React</strong></p>\n<p>React 的 props 如果是静态的就直接传字符串，动态的就用变量<code>{}</code>来传,还可以传入方法(在子组件上 props 属性获取)。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Test</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n   <span class=\"pl-en\">constructor</span>(<span class=\"pl-c1\">super</span>) {\n     <span class=\"pl-c1\">super</span>(props);\n\t   <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> { name <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>daisy<span class=\"pl-pds\">'</span></span>}\n   }\n   <span class=\"pl-en\">onClick</span>( ) <span class=\"pl-k\">=&gt;</span> {\n      <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>onClick<span class=\"pl-pds\">\"</span></span>);\n   }\n   <span class=\"pl-en\">render</span>() {\n     <span class=\"pl-k\">return</span> (\n\t      <span class=\"pl-k\">&lt;</span>Welcome name<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sara<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>;\n        <span class=\"pl-k\">&lt;</span>Welcome name<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">name</span>} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>;\n        <span class=\"pl-k\">&lt;</span>Welcome handleClick<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">onClick</span>} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>;\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 子组件使用的时候，直接this.props.handleClick()就可以了。</span>\n\t  )\n   }\n}</pre></div>\n<p><strong>Vue</strong></p>\n<p>传入的值 title 为一个常量(静态 prop)时，不加 v-bind</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">blog-post</span> <span class=\"pl-e\">title</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>My journey with Vue<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">blog-post</span>&gt;</pre></div>\n<p>传入的值 title 为一个变量(动态 prop)时，加 v-bind(此时传递的才是变量，然后 vue 会去 data 里找这个值)</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">blog-post</span> <span class=\"pl-e\">v-bind:title</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>titleValue<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">blog-post</span>&gt;</pre></div>\n<p>传入方法的话，一样要使用 v-on，子组件要用 emit 方法来触发。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&lt;</span>Welcome v<span class=\"pl-k\">-</span>on<span class=\"pl-k\">:</span>handleClick<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>onClick<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>;\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 子组件里要用$emit方法来触发它</span>\n<span class=\"pl-k\">&lt;</span>button v<span class=\"pl-k\">-</span>on<span class=\"pl-k\">:</span>click<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>$emit('handleClick')<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>Enlarge text<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>button<span class=\"pl-k\">&gt;</span>;</pre></div>\n<h2>4. 内部状态 State</h2>\n<p><strong>React</strong></p>\n<p>在 React，组件内部自己维护的状态叫 State，不能直接去改内部状态 state，而是通过<code>setState</code></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Test</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-en\">Component</span>() {\n <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n   <span class=\"pl-c\"><span class=\"pl-c\">//</span> super一定要写，继承React.Component</span>\n    <span class=\"pl-c1\">super</span>(props);\n\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> state在里面定义</span>\n\t<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> { name <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>daisy<span class=\"pl-pds\">'</span></span> };\n  }\n  <span class=\"pl-en\">changeName</span> () <span class=\"pl-k\">=&gt;</span> {\n     <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Lily<span class=\"pl-pds\">'</span></span> })\n  }\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shopping-list<span class=\"pl-pds\">\"</span></span> onClick<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">changeName</span>}<span class=\"pl-k\">&gt;</span>\n          {<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">name</span>}\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    )\n  }\n}</pre></div>\n<p><strong>Vue</strong></p>\n<p>在 Vue, 组件内部自己维护的状态其实就是 Data。如果要改的话，直接在方法里通过 this 或者是通过 vue 对象来改。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> vm <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Vue</span>({\n  el<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#app<span class=\"pl-pds\">'</span></span>,\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>  用于给 View 提供数据，相当于React的state</span>\n  data<span class=\"pl-k\">:</span> {\n    msg<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello Vue<span class=\"pl-pds\">'</span></span>\n  },\n  method<span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">changeMsg</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">msg</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello daisy<span class=\"pl-pds\">'</span></span>;\n    }\n  }\n});\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 或者</span>\n<span class=\"pl-smi\">vm</span>.<span class=\"pl-smi\">msg</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>daisy<span class=\"pl-pds\">'</span></span>;</pre></div>\n<p>Vue 除了在 Data 里定义的属性之外，还额外定义计算属性跟侦听属性</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 计算属性, reversedMessage 属性将会监听 message 的改变，而自动重新计算</span>\n<span class=\"pl-k\">var</span> vm <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Vue</span>({\n  el<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#example<span class=\"pl-pds\">'</span></span>,\n  data<span class=\"pl-k\">:</span> {\n    message<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello<span class=\"pl-pds\">'</span></span>\n  },\n  computed<span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">reversedMessage</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">message</span>.<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">reverse</span>().<span class=\"pl-c1\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)\n    }\n  }\n})\n\n<span class=\"pl-k\">&lt;</span>div id<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>example<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n  { reversedMessage }\n<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span></pre></div>\n<p><strong>为啥 React 不需要这个属性呢？</strong></p>\n<p>因为 React 有 render 函数，你可以在里面随便多定义一个变量。<br>\n每一次 this.state.message 改变的时候，都一定会调用 render 函数重新渲染，所以就相当于重新计算 reversedMessage 了。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">render</span>() {\n   <span class=\"pl-k\">const</span> <span class=\"pl-c1\">reversedMessage</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">message</span>.<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">reverse</span>().<span class=\"pl-c1\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shopping-list<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n        {reversedMessage}\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    )\n  }</pre></div>\n<p><strong>侦听属性</strong>感觉跟计算属性很像，但是他们又有不同。<br>\n侦听属性是为了可以监听到数据的改变，然后做一些异步的或者开销大的操作。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> watchExampleVM <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Vue</span>({\n  el<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#watch-example<span class=\"pl-pds\">'</span></span>,\n  data<span class=\"pl-k\">:</span> {\n    question<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>aaa<span class=\"pl-pds\">'</span></span>\n  },\n  watch<span class=\"pl-k\">:</span> {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 如果 `question` 发生改变，这个函数就会运行</span>\n    <span class=\"pl-en\">question</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">newQuestion</span>, <span class=\"pl-smi\">oldQuestion</span>) {\n      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">getAnswer</span>();\n    }\n  },\n  methods<span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">getAnswer</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> AJax 请求</span>\n    }\n  }\n});</pre></div>\n<p><strong>同样的问题，为啥 React 不需要这个属性呢？</strong></p>\n<p>因为 React 里已经有方法可以做到了。<br>\nReact 15 的版本，可以通过 componentWillReceiveProps 来实现</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">componentWillReceiveProps</span>(<span class=\"pl-smi\">nextProps</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">nextProps</span>.<span class=\"pl-c1\">id</span> <span class=\"pl-k\">!==</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">props</span>.<span class=\"pl-c1\">id</span>) {\n    \t<span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({externalData<span class=\"pl-k\">:</span> <span class=\"pl-c1\">null</span>});\n      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">_loadAsyncData</span>(<span class=\"pl-smi\">nextProps</span>.<span class=\"pl-c1\">id</span>);\n    }\n  }</pre></div>\n<p>React 16 的版本，可以通过 <code>getDerivedStateFromProps</code>，<code>componentDidUpdate</code> 来实现。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">static</span> <span class=\"pl-en\">getDerivedStateFromProps</span>(<span class=\"pl-smi\">nextProps</span>, <span class=\"pl-smi\">prevState</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Store prevId in state so we can compare when props change.</span>\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">nextProps</span>.<span class=\"pl-c1\">id</span> <span class=\"pl-k\">!==</span> <span class=\"pl-smi\">prevState</span>.<span class=\"pl-smi\">prevId</span>) {\n      <span class=\"pl-k\">return</span> {\n        externalData<span class=\"pl-k\">:</span> <span class=\"pl-c1\">null</span>,\n        prevId<span class=\"pl-k\">:</span> <span class=\"pl-smi\">nextProps</span>.<span class=\"pl-c1\">id</span>,\n      };\n    }\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> No state update necessary</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n  }\n  <span class=\"pl-en\">componentDidUpdate</span>(<span class=\"pl-smi\">prevProps</span>, <span class=\"pl-smi\">prevState</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">externalData</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">null</span>) {\n      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">_loadAsyncData</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">props</span>.<span class=\"pl-c1\">id</span>);\n    }\n  }</pre></div>\n<h2>5. 双向绑定</h2>\n<p><strong>React</strong></p>\n<p>html 标签<code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code> , 和 <code>&lt;select&gt;</code> 使用受控组件，<code>setState</code>同步更新<code>onChange</code>后的 value</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">NameForm</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {value<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>};\n\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleChange</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleChange</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleSubmit</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleSubmit</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>);\n  }\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 这里通过setState去改变state的值</span>\n  <span class=\"pl-en\">handleChange</span>(<span class=\"pl-c1\">event</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({value<span class=\"pl-k\">:</span> <span class=\"pl-c1\">event</span>.<span class=\"pl-c1\">target</span>.<span class=\"pl-c1\">value</span>});\n  }\n\n  <span class=\"pl-en\">handleSubmit</span>(<span class=\"pl-c1\">event</span>) {\n    <span class=\"pl-en\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>提交的名字: <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">value</span>);\n    <span class=\"pl-c1\">event</span>.<span class=\"pl-c1\">preventDefault</span>();\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>form onSubmit<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleSubmit</span>}<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>label<span class=\"pl-k\">&gt;</span>\n          名字<span class=\"pl-k\">:</span>\n\t\t  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 当input的值发生改变的时候就会调用handleChange</span>\n\t\t  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 通过state改变value的值，所以这里的显示会随用户</span>\n\t\t  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 的输入更新而更新</span>\n          <span class=\"pl-k\">&lt;</span>input type<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span> value<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">value</span>} onChange<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleChange</span>} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>label<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>input type<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>submit<span class=\"pl-pds\">\"</span></span> value<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>提交<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>form<span class=\"pl-k\">&gt;</span>\n    );</pre></div>\n<p><strong>Vue</strong></p>\n<p>vue 采用 <code>v-model</code> 的形式</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">input</span> <span class=\"pl-e\">v-model</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>message<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">placeholder</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>edit me<span class=\"pl-pds\">\"</span></span> /&gt;\n&lt;<span class=\"pl-ent\">p</span>&gt;Message is: {{ message }}&lt;/<span class=\"pl-ent\">p</span>&gt;</pre></div>\n<p>实际上 v-model 是一个语法糖， 上面可以翻译成：</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>`&lt;<span class=\"pl-ent\">input</span> <span class=\"pl-e\">:value</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>message<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">@input</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>message = $event.targer.value<span class=\"pl-pds\">\"</span></span> /&gt;`</pre></div>\n<blockquote>\n<p>input 本身有个 oninput 事件，每当输入框发生变化，就会触发 onput,将最新的 value 传给他。</p>\n</blockquote>\n<p>此外，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>\n<ul>\n<li>input 和 textarea 元素使用 value 属性和 input 事件；</li>\n<li>checkbox 和 radio 使用 checked 属性和 change 事件；</li>\n<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>\n</ul>\n<p>v-model 不仅仅可以用在原生 html 元素上，还可以用在组件上。用在组件上的时候 v-on 用于监听事件，emit 用来触发事件。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&lt;</span>div id<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>demo<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span>currency<span class=\"pl-k\">-</span>input v<span class=\"pl-k\">-</span>model<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>price<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;&lt;</span><span class=\"pl-k\">/</span>currentcy<span class=\"pl-k\">-</span>input<span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 相当于是&lt;currency-input :value=\"price\" v-on:input=\"price = arguments[0]\"&gt;&lt;/currentcy-input&gt;</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 这里用v-on监听事件，相当于传给了子组件value，还有input方法</span>\n  <span class=\"pl-k\">&lt;</span>span<span class=\"pl-k\">&gt;</span>{{price}}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>span<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-smi\">Vue</span>.<span class=\"pl-en\">component</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>currency-input<span class=\"pl-pds\">'</span></span>, {\n  template<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span></span>\n<span class=\"pl-s\">    &lt;span&gt;</span>\n<span class=\"pl-s\">      &lt;input</span>\n<span class=\"pl-s\">        ref=\"input\"</span>\n<span class=\"pl-s\">        :value=\"value\" // 这里将父组件传来的value赋值给input的value</span>\n<span class=\"pl-s\">        @input=\"$emit('input', $event.target.value)\" // 这里去触发input方法</span>\n<span class=\"pl-s\">      &gt;</span>\n<span class=\"pl-s\">    &lt;/span&gt;</span>\n<span class=\"pl-s\">  <span class=\"pl-pds\">`</span></span>,\n  props<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>value<span class=\"pl-pds\">'</span></span>],\n})\n\n<span class=\"pl-k\">var</span> demo <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Vue</span>({\n  el<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>#demo<span class=\"pl-pds\">'</span></span>,\n  data<span class=\"pl-k\">:</span> {\n    price<span class=\"pl-k\">:</span> <span class=\"pl-c1\">100</span>,\n  }\n})</pre></div>\n<h2>6. 生命周期</h2>\n<p>React、vue 的生命周期都大同小异，主要就是创建 -&gt; 更新 -&gt; 销毁。具体一些名字不同而已。</p>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/70888985\" rel=\"nofollow\">https://zhuanlan.zhihu.com/p/70888985</a></li>\n<li><a href=\"https://juejin.im/post/5b8b56e3f265da434c1f5f76\" rel=\"nofollow\">https://juejin.im/post/5b8b56e3f265da434c1f5f76</a></li>\n</ul>"
  },
  {
    "id": 85,
    "title": "知识图谱",
    "labels": "开发者笔记",
    "created_at": "2019-10-15T16:51:06Z",
    "updated_at": "2019-12-30T04:40:21Z",
    "body_html": "<h2>起步</h2>\n<ul>\n<li>版本控制</li>\n</ul>\n<h2>JavaScript 基础</h2>\n<h3>变量和类型</h3>\n<ul>\n<li>JavaScript 规定了几种语言类型</li>\n<li>理解值类型和引用类型</li>\n<li>可能发生隐式类型转换的场景以及转换原则，应如何避免或巧妙应用</li>\n<li>出现小数精度丢失的原因，JavaScript 可以存储的最大数字、最大安全数字，JavaScript 处理大数字的方法、避免精度丢失的方法</li>\n</ul>\n<h3>原型和原型链</h3>\n<ul>\n<li>理解原型设计模式以及 JavaScript 中的原型规则</li>\n<li>实现继承的几种方式以及他们的优缺点</li>\n<li>至少说出一种开源项目(如 Node)中应用原型继承的案例</li>\n<li>可以描述 new 一个对象的详细过程，手动实现一个 new 操作符</li>\n<li>理解 es6 class 构造以及继承的底层实现原理</li>\n</ul>\n<h3>作用域和闭包</h3>\n<ul>\n<li>理解词法作用域和动态作用域</li>\n<li>理解 JavaScript 的作用域和作用域链</li>\n<li>this 的原理以及几种不同使用场景的取值</li>\n<li>闭包的实现原理和作用，可以列举几个开发中闭包的实际应用</li>\n<li>理解模块化解决的实际问题，可列举几个模块化方案并理解其中原理</li>\n</ul>\n<h3>执行机制</h3>\n<ul>\n<li>JavaScript 如何实现异步编程，可以详细描述 EventLoop 机制</li>\n<li>宏任务和微任务分别有哪些</li>\n<li>可以快速分析一个复杂的异步嵌套逻辑，并掌握分析方法</li>\n<li>Node 与浏览器 EventLoop 的差异</li>\n<li>如何在保证页面运行流畅的情况下处理海量数据</li>\n</ul>\n<h3>语法和 API</h3>\n<ul>\n<li>理解 ECMAScript 和 JavaScript 的关系</li>\n<li>熟练运用 es5、es6 提供的语法规范，</li>\n<li>熟练掌握 JavaScript 提供的全局对象（例如 Date、Math）、全局函数（例如 decodeURI、isNaN）、全局属性（例如 Infinity、undefined）</li>\n<li>熟练应用 map、reduce、filter 等高阶函数解决问题</li>\n<li>setInterval 需要注意的点，使用 settimeout 实现 setInterval</li>\n<li>JavaScript 提供的正则表达式 API、可以使用正则表达式（邮箱校验、URL 解析、去重等）解决常见问题</li>\n<li>JavaScript 异常处理的方式，统一的异常处理方案</li>\n</ul>\n<h2>HTML 和 CSS</h2>\n<p><strong>HTML</strong></p>\n<ul>\n<li>可以使用 Canvas API、SVG 等绘制高性能的动画</li>\n</ul>\n<p><strong>CSS</strong></p>\n<ul>\n<li>布局方案 Flex ，Gird</li>\n<li>实现常用布局（三栏、圣杯、双飞翼、吸顶），可是说出多种方式并理解其优缺点</li>\n<li>熟练使用 CSS 实现常见动画，如渐变、移动、旋转、缩放等等</li>\n<li>PostCSS、Sass、Less 的异同，以及使用配置，至少掌握一种</li>\n<li>掌握一套完整的响应式布局方案</li>\n<li>移动端页面适配解决方案、不同机型适配方案</li>\n<li>CSS 浏览器兼容性写法，了解不同 API 在不同浏览器下的兼容性情况</li>\n</ul>\n<h2>计算机基础</h2>\n<p><strong>编译原理</strong></p>\n<ul>\n<li>理解代码到底是什么，计算机如何将代码转换为可以运行的目标程序</li>\n<li>如何将 JavaScript 代码解析成抽象语法树(AST)</li>\n</ul>\n<p><strong>网络协议</strong></p>\n<ul>\n<li>理解什么是协议，了解 TCP/IP 网络协议族的构成，每层协议在应用程序中发挥的作用</li>\n<li>DNS 的作用、DNS 解析的详细过程，DNS 优化原理</li>\n<li>CDN 的作用和原理</li>\n<li>HTTP1.1、HTTP2.0 带来的改变</li>\n<li>HTTPS 的加密原理，如何开启 HTTPS，如何劫持 HTTPS 请求</li>\n</ul>\n<p><strong>设计模式</strong></p>\n<ul>\n<li>熟练使用前端常用的设计模式编写代码，如单例模式、装饰器模式、代理模式等</li>\n<li>发布订阅模式和观察者模式的异同以及实际应用</li>\n<li>可以说出几种设计模式在开发中的实际应用，理解框架源码中对设计模式的应用</li>\n</ul>\n<h2>数据结构和算法</h2>\n<p><strong>JavaScript 编码能力</strong></p>\n<ul>\n<li>多种方式实现数组去重、扁平化、对比优缺点</li>\n<li>多种方式实现深拷贝、对比优缺点</li>\n<li>手写函数柯里化工具函数、并理解其应用场景和优势</li>\n<li>手写防抖和节流工具函数、并理解其内部原理和应用场景</li>\n<li>实现一个 sleep 函数</li>\n</ul>\n<p><strong>手动实现前端轮子</strong></p>\n<ul>\n<li>手动实现 call、apply、bind</li>\n<li>手写实现数组 API， map,forEach,filter...</li>\n<li>手动实现符合 Promise/A+规范的 Promise、手动实现 async await</li>\n<li>手写一个 EventEmitter 实现事件发布、订阅</li>\n<li>可以说出两种实现双向绑定的方案、可以手动实现</li>\n<li>手写 JSON.stringify、JSON.parse</li>\n<li>手写一个模版引擎，并能解释其中原理</li>\n<li>手写懒加载、下拉刷新、上拉加载、预加载等效果</li>\n</ul>\n<p><strong>数据结构</strong></p>\n<p><strong>算法</strong></p>\n<ul>\n<li>可计算一个算法的时间复杂度和空间复杂度，可估计业务逻辑代码的耗时和内存消耗</li>\n<li>至少理解五种排序算法的实现原理、应用场景、优缺点，可快速说出时间、空间复杂度</li>\n</ul>\n<h2>框架和类库</h2>\n<p><strong>TypeScript</strong></p>\n<ul>\n<li>理解泛型、接口等面向对象的相关概念，TypeScript 对面向对象理念的实现</li>\n<li>理解使用 TypeScript 的好处，掌握 TypeScript 基础语法</li>\n<li>TypeScript 的规则检测原理</li>\n<li>可以在 React、Vue 等框架中使用 TypeScript 进行开发</li>\n</ul>\n<p><strong>React</strong></p>\n<ul>\n<li>React 中 setState 的执行机制，如何有效的管理状态</li>\n<li>React 的事件底层实现机制</li>\n<li>React 的虚拟 DOM 和 Diff 算法的内部实现</li>\n<li>React 的 Fiber 工作原理，解决了什么问题</li>\n<li>React Router 和 Vue Router 的底层实现原理、动态加载实现原理</li>\n<li>可熟练应用 React API、生命周期等，可应用 HOC、render props、Hooks 等高阶用法解决问题</li>\n</ul>\n<p><strong>Vue</strong></p>\n<ul>\n<li>熟练使用 Vue 的 API、生命周期、钩子函数</li>\n<li>MVVM 框架设计理念</li>\n<li>Vue 双向绑定实现原理、Diff 算法的内部实现</li>\n<li>Vue 的事件机制</li>\n<li>从 template 转换成真实 DOM 的实现机制</li>\n</ul>\n<p><strong>多端开发</strong></p>\n<blockquote>\n<p>可以独自完成架构设计、技术选型、环境搭建、全流程开发、部署上线等一套完整的开发流程（包括 Web 应用、移动客户端应用、PC 客户端应用、小程序、H5 等等）</p>\n</blockquote>\n<ul>\n<li>掌握一种 JavaScript 移动客户端开发技术，如 React Native：可以搭建 React Native 开发环境，熟练进行开发，可理解 React Native 的运作原理，不同端适配</li>\n<li>掌握一种 JavaScript PC 客户端开发技术，如 Electron：可搭建 Electron 开发环境，熟练进行开发，可理解 Electron 的运作原理</li>\n<li>掌握一种小程序开发框架或原生小程序开发，如 Taro</li>\n<li>理解多端框架的内部实现原理，至少了解一个多端框架的使用</li>\n</ul>\n<p><strong>数据流管理</strong></p>\n<ul>\n<li>掌握 React 和 Vue 传统的跨组件通信方案，对比采用数据流管理框架的异同</li>\n<li>熟练使用 Redux 管理数据流，并理解其实现原理，中间件实现原理</li>\n<li>熟练使用 Mobx 管理数据流，并理解其实现原理，相比 Redux 有什么优势</li>\n<li>熟练使用 Vuex 管理数据流，并理解其实现原理</li>\n<li>以上数据流方案的异同和优缺点，不情况下的技术选型</li>\n</ul>\n<p><strong>实用库</strong></p>\n<ul>\n<li>至少掌握一种 UI 组件框架，如 antd design，理解其设计理念、底层实现</li>\n<li>掌握一种图表绘制框架，如 Echart，理解其设计理念、底层实现，可以自己实现图表</li>\n<li>掌握一种 GIS 开发框架，如百度地图 API</li>\n<li>掌握一种可视化开发框架，如 Three.js、D3</li>\n<li>掌握一种游戏开发框架</li>\n<li>工具函数库，如 lodash、underscore、moment 等，理解使用的工具类或工具函数的具体实现原理</li>\n</ul>\n<h2>前端工程</h2>\n<p><strong>开发和调试</strong></p>\n<ul>\n<li>熟练使用各浏览器提供的调试工具</li>\n<li>熟练使用一种代理工具实现请求代理、抓包，如 charls</li>\n<li>可以使用 Android、IOS 模拟器进行调试，并掌握一种真机调试方案</li>\n<li>了解 Vue、React 等框架调试工具的使用</li>\n</ul>\n<p><strong>项目构建</strong></p>\n<ul>\n<li>理解 npm、yarn 依赖包管理的原理，两者的区别</li>\n<li>可以使用 npm 运行自定义脚本</li>\n<li>理解 Babel、ESLint、webpack 等工具在项目中承担的作用</li>\n<li>Babel 的核心原理，可以自己编写一个 Babel 插件</li>\n<li>Webpack 的编译原理、构建流程、热更新原理，chunk、bundle 和 module 的区别和应用</li>\n<li>可熟练配置已有的 loaders 和 plugins 解决问题，可以自己编写 loaders 和 plugins</li>\n<li>自制的前端脚手架</li>\n</ul>\n<p><strong>nginx</strong></p>\n<ul>\n<li>正向代理与反向代理的特点和实例</li>\n<li>可手动搭建一个简单的 nginx 服务器</li>\n</ul>\n<p><strong>开发提速</strong></p>\n<ul>\n<li>熟练掌握一种接口管理、接口 mock 工具的使用，如 yapi</li>\n<li>掌握一种高效的日志埋点方案，可快速使用日志查询工具定位线上问题</li>\n<li>理解 TDD 与 BDD 模式，至少会使用一种前端单元测试框架</li>\n</ul>\n<p><strong>版本控制</strong></p>\n<ul>\n<li>理解 Git 的核心原理、工作流程、和 SVN 的区别</li>\n<li>熟练使用常规的 Git 命令、git rebase、git stash 等进阶命令</li>\n<li>可以快速解决线上分支回滚、线上分支错误合并等复杂问题</li>\n</ul>\n<p><strong>持续集成</strong></p>\n<ul>\n<li>理解 CI/CD 技术的意义，至少熟练掌握一种 CI/CD 工具的使用，如 Jenkins</li>\n</ul>\n<h2>项目和业务</h2>\n<p><strong>后端技能</strong></p>\n<ul>\n<li>了解后端的开发方式，在应用程序中的作用，至少会使用一种后端语言</li>\n<li>掌握数据最终在数据库中是如何落地存储的，能看懂表结构设计、表之间的关联，至少会使用一种数据库</li>\n</ul>\n<p><strong>性能优化</strong></p>\n<ul>\n<li>SSR 实现方案、优缺点、及其性能优化</li>\n<li>Webpack 的性能优化方案</li>\n<li>React、Vue 等框架使用性能优化方案</li>\n</ul>\n<p><strong>前端安全</strong></p>\n<ul>\n<li>XSS 攻击的原理、分类、具体案例，前端如何防御</li>\n<li>CSRF 攻击的原理、具体案例，前端如何防御</li>\n<li>HTTP 劫持、页面劫持的原理、防御措施</li>\n</ul>\n<p><strong>业务相关</strong></p>\n<ul>\n<li>能理解所开发项目的整体业务形态、业务目标、业务架构，可以快速定位线上业务问题</li>\n<li>能理解所开发项目整体的技术架构、能快读的根据新需求进行开发规划、能快速根据业务报警、线上日志等定位并解决线上技术问题</li>\n<li>可以将自己的想法或新技术在业务中落地实践，尽量在团队中拥有一定的不可替代性</li>\n</ul>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://github.com/ConardLi/ConardLi.github.io\">https://github.com/ConardLi/ConardLi.github.io</a></li>\n<li><a href=\"https://github.com/senntyou/blogs/blob/master/web-advance/22.md\">https://github.com/senntyou/blogs/blob/master/web-advance/22.md</a></li>\n</ul>"
  },
  {
    "id": 84,
    "title": "选择一个软件外包公司入职须知",
    "labels": "观点与感想",
    "created_at": "2019-10-15T05:39:23Z",
    "updated_at": "2019-10-22T11:41:42Z",
    "body_html": "<h2>定义</h2>\n<p>软件外包公司（外包服务开发公司）和软件产品公司是两个方向，何为软件外包公司 ？</p>\n<p>主要是看该公司有没有核心产品，开发人员的主要精力是在升级完善产品，还是在接各种项目，盈利模式是靠不停的接活还是靠卖软件赚钱，当然有基于核心产品做一些定制开发的公司，这种公司也可称之为软件产品公司。</p>\n<h3>外包公司的刻板印象标签</h3>\n<ul>\n<li>技术差，被歧视</li>\n<li>工作时间越久，越没竞争力</li>\n</ul>\n<blockquote>\n<p>使用适当的方法摘掉这些标签才能行走的更畅快 ！！！</p>\n</blockquote>\n<h2>公司类型</h2>\n<h3>项目外包</h3>\n<blockquote>\n<p>主要经济来源就是不同的软件项目，所以能尽快收到钱就是唯一的目的,项目尽快收尾交付，客户付款。</p>\n</blockquote>\n<blockquote>\n<p><strong>为什么很多做互联网的攻城狮看不起外包公司技术人员</strong>？ 因为外包开发的软件的生命周期对公司来说，交付客户就结束了，不像产品一样需要不停的升级和迭代，所以你很难体会到大牛们所说的扩展呀，灵活呀之类的好处了，况且要设计一个扩展性且架构良好的面向对象系统，花费的时间和精力都是巨大的，而且好的架构都是演化和重构而来的，你从事的工种决定了你很难有机会经历系统的演化，入驻甲方一起办公的，别人会有核心的框架，即使框架再强大，你干的也只是脏活累活，更不用说接触到互联网行业里海量高并发处理的技术了，这也就是的原因。</p>\n</blockquote>\n<ul>\n<li>一般为客户个性化定制</li>\n<li>“销售”驱动</li>\n<li>代码以实现<strong>功能</strong>为第一优先级别，代码实现<strong>效率</strong>为第二优先级别，项目质量？</li>\n<li>薪资结构都是由<code>基本工资</code>+<code>项目奖金(很大的风险性)</code>构成</li>\n<li>项目种类多，接触的技术类型多</li>\n<li>项目周期由具体项目决定，项目间歇期短</li>\n<li>需求方面：易变动！改！</li>\n<li>很容易触碰到技术的天花板</li>\n<li>流动性比较大，加班是常态</li>\n</ul>\n<h4>要怎样</h4>\n<ul>\n<li>学好业务</li>\n<li>能力提升了，可以要求加薪，这个要求很合理！</li>\n</ul>\n<h3>人员外包</h3>\n<blockquote>\n<p>俗称“外派”</p>\n</blockquote>\n<ul>\n<li>没有归属感，大多数没有正式员工待遇</li>\n<li>低人一等，被轻视（外企可能情况好一些）</li>\n<li>难以接触核心业务，干脏活累活，重复的工作</li>\n<li>不稳定，项目无连续性，这段时间这个项目，再过一段时间又是另外的一个项目</li>\n</ul>\n<blockquote>\n<p>举例：微创软件，腾信软创，博彦科技，柯莱特，浪潮，中软国际，软通动力，</p>\n</blockquote>\n<h4>要怎样</h4>\n<ul>\n<li>必须补足短板，找代码质量比较高的开源系统看一看</li>\n</ul>\n<h2>如何识别外包公司？</h2>\n<p><strong>招聘网站如何识别外包公司</strong>：</p>\n<p>直接的外包：[https://jobs.51job.com/all/co5319394.html]<br>\n隐晦的外包：[https://jobs.51job.com/all/co4041824.html]<br>\n不说自己是外包的外包：[https://jobs.51job.com/all/co2155678.html]</p>\n<p><strong>特征</strong>：</p>\n<p>1.从头到尾扯废话，xxxx 员工、xxxx 注册资本、服务于金融、xx、xx 行业<br>\n2.公司常年挂着无数招聘岗位，并且每天上班之后会刷新一遍这些岗位，让招聘时间变成当日</p>\n<p><strong>面试电话如何识别外包</strong>：</p>\n<p>1.面试地点不是本公司的，常用特征“您好，xx 银行最近在 xx 有个新项目，很有前途，xx 银行老有钱了，想邀请你 xx 日去 xx 酒店 xx 大厅面试。”</p>\n<p>2.上来就带“是 xxx 吗？我这里有个 xx 岗位给您推荐”的，这样的八成是外包，少部分是纯 HR，多聊几句就懂了。正常公司不会说我这里有 xx 岗位推荐，都是直接说我想邀请你来我公司面试。</p>\n<p>3.以上特征确认之后，直接问一句：“是外包吗？”，这时候没有直接否认或者直接承认的。还有一些想耍赖说“合同是本公司签五险也是本公司全额交的，只是上班地点……”，正常公司都会直接说“我们不是外包公司”</p>\n<p><strong>为什么要过滤外包</strong></p>\n<p>理由并不是外包发展 /技能学习不好之类的，而是：</p>\n<p>1.外包公司永远缺人，只要有简历发给 TA，或者你的简历给 TA 搜到了，那就会来骚扰你，永远会给你安排面试。面试过与不过那是另说，过了皆大欢喜他也有钱赚。外包只要拉到一个在工作的员工，它就能从你身上赚到钱，因为你赚到的钱有一部分要分给它。</p>\n<p>2.外包公司存在欺诈、欺骗等恶心现象。一部分黑心外包，你签 2W 合同他去客户公司签 3W 合同。</p>\n<h2>其他类型的公司</h2>\n<p><strong>产品型公司</strong></p>\n<blockquote>\n<p>项目型公司挣钱也是做加法——1个项目+1个项目。而产品型的公司挣钱是做乘法——1个产品×销量</p>\n</blockquote>\n<ul>\n<li>自研产品的风险比外包项目大得多（市场认同，行业基础，团队生存、被人模仿抄袭）</li>\n<li>“市场”驱动</li>\n<li>主导地位明显，有自己的需求，自己的创意，打造自己的产品，且是反复更新，不断打磨的过程，产品的收益和销量是其思考的主要方向</li>\n</ul>\n<h3>参考链接</h3>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/46585107\" rel=\"nofollow\">v2ex提问-在软件外包公司工作是什么体验？</a></li>\n<li><a href=\"https://www.v2ex.com/t/478981\" rel=\"nofollow\">v2ex提问-在大公司当外包人员是什么感觉</a></li>\n<li><a href=\"https://blog.csdn.net/xiaojin21cen/article/details/79479932\" rel=\"nofollow\">国内一些比较大型的外包公司</a></li>\n<li><a href=\"https://www.zhihu.com/question/26909682\" rel=\"nofollow\">知乎提问-为什么软件外包公司这么不受欢迎？</a></li>\n<li><a href=\"https://www.v2ex.com/\" rel=\"nofollow\">v2ex提问-为什么大家都不倾向于进外包公司</a></li>\n<li><a href=\"https://www.v2ex.com/t/519262\" rel=\"nofollow\">https://www.v2ex.com/t/519262</a></li>\n<li><a href=\"https://www.v2ex.com/t/605465\" rel=\"nofollow\">为什么很多公司一直接外包个性化定制，就是没想过做一款优秀的产品？</a></li>\n<li><a href=\"https://www.zhihu.com/question/268227344\" rel=\"nofollow\">知乎提问-产品型公司和项目型公司的区别？</a></li>\n</ul>"
  },
  {
    "id": 83,
    "title": "《丑陋的中国人》反思",
    "labels": "观点与感想",
    "created_at": "2019-10-10T03:52:56Z",
    "updated_at": "2019-12-30T04:46:37Z",
    "body_html": "<h2>坏毛病</h2>\n<ul>\n<li>持强凌弱</li>\n<li>重视利益</li>\n<li>\"吃人“</li>\n<li>和大部分人不一样，你就是错的，理无用</li>\n<li>面子工程</li>\n<li>不能接受批评</li>\n</ul>"
  },
  {
    "id": 82,
    "title": "React 组件更新 —— setState",
    "labels": "JavaScript",
    "created_at": "2019-10-08T03:20:03Z",
    "updated_at": "2019-10-08T03:20:03Z",
    "body_html": "<h2>setState API</h2>\n<p>在 React 组件内部的 state 是可读可写的，当 state 发生改变的时候（使用 setState）会触发执行 render 方法，并通知 React 需要使用更新后的 state 重新渲染此组件及其子组件。这是用于更新用户界面以响应事件处理器和处理服务器数据的主要方式</p>\n<p>调用 setState 其实是异步的 —— 不要指望在调用 setState 之后，this.state 会立即映射为新的值。如果你需要基于当前的 state 来计算出新的值，那你应该传递一个函数，而不是一个对象（详情见下文）</p>\n<h2>setState 接受对象参数</h2>\n<ul>\n<li>异步机制</li>\n<li><strong>有效合并更新</strong>（一个生命周期内的所有 setState 方法会合并操作，原则为只取最后一个）</li>\n<li>可添加第二个 <code>callback</code>参数获取更新后的 state</li>\n</ul>\n<p>demo 展示：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">App</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>\n    };\n  }\n  <span class=\"pl-en\">componentDidMount</span>() {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> });\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> });\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> });\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> ?</span>\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>header className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-header<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>h1 className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-title<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>Welcome to React<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>h1<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>header<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-intro<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}</pre></div>\n<p>页面显示：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/0776bef213358033a42539ed0d3a2a86f97db5d3/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737716b306a723367646a323168353034326161382e6a7067\"><img src=\"https://camo.githubusercontent.com/0776bef213358033a42539ed0d3a2a86f97db5d3/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737716b306a723367646a323168353034326161382e6a7067\" alt=\"Snipaste_2019-10-08_09-51-56.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7qk0jr3gdj21h5042aa8.jpg\" style=\"max-width:100%;\"></a></p>\n<p>执行分析：</p>\n<ul>\n<li>Start\n<ul>\n<li>初始化 state &amp;&amp; props</li>\n<li>初次 render</li>\n<li>componentDidMount 异步，合并更新,只取最后一个有效更新条件 <code>{ count: this.state.count + 1 }</code></li>\n<li>render</li>\n</ul>\n</li>\n<li>End</li>\n</ul>\n<p>对象批处理是怎样的：</p>\n<p>在 JavaScript 里面，合并对象可能会如同下面这种形式：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">singleObject</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">assign</span>(\n  {},\n  objectFromSetState1,\n  objectFromSetState2,\n  objectFromSetState3\n);</pre></div>\n<p>JavaScript 中，合并（merging）或组合（composing）对象是这样工作的：如果三个对象有相同的 key， 传给 Object.assign() 的最后一个包含此 key 的对象会覆盖掉前面的值。例如:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">me</span> <span class=\"pl-k\">=</span> { name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Justice<span class=\"pl-pds\">'</span></span> },\n  you <span class=\"pl-k\">=</span> { name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Your name<span class=\"pl-pds\">'</span></span> },\n  we <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">assign</span>({}, me, you);\n<span class=\"pl-smi\">we</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Your name<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span>true</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(we); <span class=\"pl-c\"><span class=\"pl-c\">//</span> {name : \"Your name\"}</span></pre></div>\n<p>如上所示，在对象作为参数批量更新时，会因为参数对象 <code>key</code> 值相同的缘故只保留最后一个作为扩充更新的对象，我们上面称之为 <code>有效性合并</code></p>\n<p>demo 体现更充分的例子：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">App</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>\n    };\n  }\n\n  <span class=\"pl-en\">componentWillMount</span>() {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> });\n  }\n\n  <span class=\"pl-en\">componentDidMount</span>() {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> });\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span> });\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">3</span> });\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 1</span>\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>header className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-header<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>h1 className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-title<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>Welcome to React<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>h1<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>header<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-intro<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}</pre></div>\n<p>页面显示：异步<strong>合并更新</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/c3d11329badc84f93375b8b467dcace61ae98504/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737716b7071397879686a323168633033766a726b2e6a7067\"><img src=\"https://camo.githubusercontent.com/c3d11329badc84f93375b8b467dcace61ae98504/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737716b7071397879686a323168633033766a726b2e6a7067\" alt=\"Snipaste_2019-10-08_10-16-11.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7qkpq9xyhj21hc03vjrk.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>setState 接受函数参数</h2>\n<p>既然在对象参数中批量更新只有最后一个扩充对象被保留，那么，怎样使得 <code>setState</code> 的批量更新全部有效呢？这就引入了第二个类型的参数 —— 使用函数作为参数进行传递。</p>\n<ul>\n<li>异步机制</li>\n<li><strong>计算合并更新</strong>（利用上一次 setState 结果进行运算）</li>\n</ul>\n<p>demo 展示：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">App</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>\n    };\n  }\n  <span class=\"pl-en\">componentDidMount</span>() {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>((<span class=\"pl-smi\">prevState</span>, <span class=\"pl-smi\">props</span>) <span class=\"pl-k\">=&gt;</span> {\n      <span class=\"pl-k\">return</span> { count<span class=\"pl-k\">:</span> <span class=\"pl-smi\">prevState</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> };\n    });\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>((<span class=\"pl-smi\">prevState</span>, <span class=\"pl-smi\">props</span>) <span class=\"pl-k\">=&gt;</span> {\n      <span class=\"pl-k\">return</span> { count<span class=\"pl-k\">:</span> <span class=\"pl-smi\">prevState</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> };\n    });\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>((<span class=\"pl-smi\">prevState</span>, <span class=\"pl-smi\">props</span>) <span class=\"pl-k\">=&gt;</span> {\n      <span class=\"pl-k\">return</span> { count<span class=\"pl-k\">:</span> <span class=\"pl-smi\">prevState</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> };\n    });\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span>);\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>header className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-header<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>h1 className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-title<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>Welcome to React<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>h1<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>header<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App-intro<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}</pre></div>\n<p>页面显示：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/646107944faa2980a2857c5b3904a870ecc30fee/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737716c3076357166616a323168623035323379702e6a7067\"><img src=\"https://camo.githubusercontent.com/646107944faa2980a2857c5b3904a870ecc30fee/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737716c3076357166616a323168623035323379702e6a7067\" alt=\"Snipaste_2019-10-08_10-26-52.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7ql0v5qfaj21hb0523yp.jpg\" style=\"max-width:100%;\"></a></p>\n<p>执行分析：</p>\n<ul>\n<li>Start\n<ul>\n<li>初始化 state &amp;&amp; props</li>\n<li>初次 render</li>\n<li>componentDidMount 异步，计算合并更新（将条件串起来批量更新） <code>3</code> * <code>{ count: prevState.count + 1 }</code></li>\n<li>render</li>\n</ul>\n</li>\n<li>End</li>\n</ul>\n<p>实际内部的批量更新队列类似于：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">updateQueue</span> <span class=\"pl-k\">=</span> [\n  <span class=\"pl-smi\">state</span> <span class=\"pl-k\">=&gt;</span> ({ count<span class=\"pl-k\">:</span> <span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> }),\n  <span class=\"pl-smi\">state</span> <span class=\"pl-k\">=&gt;</span> ({ count<span class=\"pl-k\">:</span> <span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> }),\n  <span class=\"pl-smi\">state</span> <span class=\"pl-k\">=&gt;</span> ({ count<span class=\"pl-k\">:</span> <span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span> })\n];</pre></div>\n<h2>总结</h2>\n<p>不要忘记 <code>setState</code>函数是异步的</p>\n<p>不要忘记 <code>setState</code> 函数参数可以传递<code>object</code>与<code>function</code></p>\n<p>不要忘记，当您的下一个状态取决于你之前的状态时，应该传递一个函数。</p>\n<h3>参考文章</h3>\n<ul>\n<li><a href=\"https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\" rel=\"nofollow\">How to become a pro with React setState() in 10 minutes</a></li>\n<li><a href=\"http://huziketang.mangojuice.top/books/react/lesson10\" rel=\"nofollow\">React.js 小书 —— 组件的 state 和 setState</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/faq-state.html#when-is-setstate-asynchronous\" rel=\"nofollow\">React Doc —— 组件状态</a></li>\n<li><a href=\"https://www.oschina.net/translate/functional-setstate-is-the-future-of-react\" rel=\"nofollow\">React 中的宝藏：setState 函数 </a></li>\n</ul>"
  },
  {
    "id": 81,
    "title": "我们是为了信仰 —— 坚决的态度与胜利的人生",
    "labels": "语思",
    "created_at": "2019-10-07T16:05:01Z",
    "updated_at": "2019-12-30T04:40:33Z",
    "body_html": "<p align=\"center\">  ◎<a href=\"https://zh.wikipedia.org/wiki/%E7%8E%8B%E6%98%8E%E9%81%93\" rel=\"nofollow\">王明道</a></p>\n<p>  “沙得拉、米煞、亚伯尼歌对王说，‘尼布甲尼撒阿，这件事我们不必回答你；即使如此，我们所事奉的神能将我们从烈火的缶中救出来；王啊，他也必救我们脱离你的手；即或不然，王啊，你当知道，我们决不事奉你的神，也不敬拜你所立的金像’。”（但三章十六至十八节）。</p>\n<p>  沙得拉、米煞、亚伯尼歌抗拒尼布甲尼撒的命令，不肯敬拜他所立的金像，被尼布甲尼撒扔在烈火的缶中，蒙神行奇事，使他们安然从火缶中出来，神的名因此得了荣耀，他们三个人因此蒙了大恩，历代的圣徒因此得了激发和勉励。这件事是我们所十分熟悉的。我也多次从这件事实中取了各方面的教训，勉励圣徒，坚固圣徒。今天我要特别提出这段事迹中的一点来，那就是他们三个人所抱的那种坚决的态度与他们所得的胜利。</p>\n<p>  听听他们回答尼布甲尼撒的话－“这件事我们不必回答你；即使如此，我们所事奉的神能将我们从烈火的缶中救出来；王啊，他也必救我们脱离你的手；即或不然，王啊，你当知道，我们决不事奉你的神，也不敬拜你所立的金像。”何等坚决！何等勇敢！毫不考虑，毫不踌躇。早已下了决心，早已作了准备。在一个统治全国、握有生杀大权的君王面前，说出了这样坚决的话来，在有些圣徒的心中也许认为这三个人的态度有些过火、有些愚昧。他们认为这三个人可以用柔和委婉的态度和言词回答尼布甲尼撒，使他不至过于难堪，这样，可以免得激起他的烈怒，他们自己受害也可以比较轻一些。说这话的人有没有想到当时的情形？尼布甲尼撒的命令已经发出来。“凡不俯伏敬拜的，必立时扔在烈火的缶中。”这三个人的前面只摆着两条路：一条是俯伏敬拜，便可以平安无事，另一条是拒绝敬拜，便立时被扔在烈火的缶中。他们三个人的话无论说得如何柔和委婉，只要他们不敬拜，仍是要被扔在烈火的缶中。今天的问题不是“态度言词是否柔和委婉？”乃是“敬拜不敬拜？”</p>\n<p>  自然，如果他们的态度柔和委婉一些，或者尼布甲尼撒王可以不至“怒气填胸，向沙得拉、米煞、亚伯尼歌变了脸色，吩咐人把缶烧热，比寻常更加七倍。”但那又有什么分别呢？纵使缶烧得只和寻常一样，三个人被投进去不是一样的被烧死么？这三个人这种坚决的态度并不增加他们所遭遇的迫害，却帮助他们因此得到了胜利。容我述说一下我这样说的理由－</p>\n<p>  我们当注意尼布甲尼撒当时对那三个人所说的话－“沙得拉、米煞、亚伯尼歌，你们不事奉我的神，也不敬拜我所立的金像，是故意的么？你们再听见角、笛、琵琶、琴、瑟、笙、和各样乐器的声音，若俯伏敬拜我所造的像，却还可以，若不敬拜，必立时扔在烈火的缶中。有何神能救你们脱离我的手呢？”这些话分明是尼布甲尼撒设词为他们开脱，希望他们屈服，并且给他们留一个转圜的机会。他们已经违抗了王的命令，王可以不再给他们机会。但王舍不得烧死他们。这本不足希奇，因为经上记载他们初到王面前的情形说：</p>\n<p>  “这四个少年人，神在各样文字、智慧上赐给他们聪明、知识。但以理又明白各样的异象和梦兆。尼布甲尼撒王豫定带进少年人来的日期满了，太监长就把他们带到王面前。王与他们谈论，见少年人中无一人能比但以理、哈拿尼雅、米沙利、亚撒利雅，所以留他们在王面前侍立。王考问他们一切事，就见他们的智慧、聪明比通国的术士和用法术的胜过十倍。”（但一章十七至二十节）。</p>\n<p>  他们既然有这些特长，当然尼布甲尼撒王会喜爱他们，提拔他们，在这个时候设法为他们开脱，尽力保存他们。但他的命令不能更改，他的威信也不能丧失；他便用这个方法，一方面可以保存他的威信，一方面还可以保存他们三个人。他以为这真是一举两得的事。象哈拿尼雅、米沙利、亚撒利雅这样聪明的人，不会不明白王的心意。如果他们那时的态度稍不坚决，就很可能一方面慑于王的严刑暴怒，另一方面感激王的宽大厚待，便软化下来。他们的意志只要稍有动摇，便会由让步而妥协，由妥协而屈服；结局只有事奉尼布甲尼撒所事奉的神，敬拜他所立的金像。</p>\n<p>  我看得十分清楚，这三个人所有的这种坚决的态度实在是必要的；也就是因为他们这种坚决的态度，使他们得了那样光荣的胜利。不错，他们这种坚决的态度激动了尼布甲尼撒王，使他“怒气填胸，向沙得拉、米煞、亚伯尼歌变了脸色，吩咐人把缶烧热，比寻常更加七倍；又吩咐他军中的几个壮士，将沙得拉、米煞、亚伯尼歌捆起来，扔在烈火的缶中。”但尼布甲尼撒的怒气不但与这三个人没有害处，而且适足以彰显神的荣耀。正是“因为王命紧急，缶又甚热，那抬沙得拉、米煞、亚伯尼歌的人都被火焰烧死，”神的大能和作为才更加彰显出来。缶中的烈火热到这种地步，抬这三个人的几个壮士尚且被烧死，请问这三个人被扔在火缶中，岂不要在很短的时间内被烧成灰烬么？不料，出人意外的事发生了！</p>\n<p>  “那时尼布甲尼撒王惊奇，急忙起来，对谋士说，‘我们捆起来扔在火里的不是三个人么？’他们回答王说，‘王啊，是。’王说，‘看哪，我见有四个人，并没有捆绑，在火中游行，也没有受伤。那第四个的相貌好象神子。’于是尼布甲尼撒就近烈火缶门，说，‘至高神的仆人沙得拉、米煞、亚伯尼歌出来，上这里来罢。’沙得拉、米煞、亚伯尼歌就从火中出来了。那些总督、钦差、巡抚、和王的谋士一同聚集，看这三个人，见火无力伤他们的身体，头发也没有烧焦，衣裳也没有变色，并没有火燎的气味。”（但三章廿四至廿七节）。</p>\n<p>  沙得拉、米煞、亚伯尼歌三个人的坚决态度激起了尼布甲尼撒的烈怒；尼布甲尼撒的烈怒却彰显了神的大能和荣耀。如果不是火缶烧热，比寻常更加七倍，如果抬他们三个人的几个壮士未被烧死，也许有人以为缶烧得不热，缶中的火力很微，所以他们三个人未被烧死，因此他们便会说，这并不一定是神的作为。但如今缶烧得“比寻常更加七倍”，“那抬沙得拉、米煞、亚伯尼歌的人都被火焰烧死，”这种说法便完全不能成立了。这件事实足可证明圣经上的一段话是如何的真实！</p>\n<p>  “人的忿怒要成全你的荣美；人的余怒你要禁止。”（诗七十六篇十节）。</p>\n<p>  每一个属神的人在遇见试探的时候，都当有这种坚决的态度。只要清楚知道一件事是神不喜悦的，便坚决拒绝不作，不当犹豫，不当考虑，也不要怕使别人难堪，更不要怕惹别人的忿怒，尤其不要怕自己受什么危害和损失。如果我们在这种严重的关头稍一犹豫，撒但便会藉着别人用各种威吓、利诱的方法领我们走差路，他又要藉着我们自己的肉体使我们软弱，一开始失败，结局便不堪设想了！</p>\n<p>  我们常听说有些信徒对一些明知是不合真理的事还加以考虑。他们说，他们要为这件事在神面前祷告，看看神怎样指示他们、带领他们。这不是明明试探神么？既知道一件事情是不合真理的，还求什么指示呢？难道神还能叫他们作不合真理的事么？他们所以这样求不外两个原因：一个是希望获利益，另一是想逃避危害。如果没有这两个原因中的任何一个，他们一定不再求神的指示，因为他们已经清楚知道了那是神所不喜悦的事，是神不许可他们作的。但如果他们存了这两样思想中的任何一样，他们便希望神改变他的旨意，来迁就他们，使他们得利益，或帮助他们逃避危害。结果是什么呢？神不会改变他的旨意，但神也不强迫他们顺服，那就只有任凭他们，这样一来，他们便开始陷入罪恶中了。</p>\n<p>  古时候的先知巴兰所走的就是这样的一条道路。当摩押王巴勒派人请他去咒诅以色列民的时候，他求问了耶和华，也蒙了耶和华的指示－“你不可同他们去，也不可咒诅那民，因为那民是蒙福的。”（民二十二章十二节）。这一次他听从了神的指示，拒绝了巴勒的邀请。过了一些时候，巴勒又派人来邀请他了。经上记着说：</p>\n<p>  “巴勒又差遣使臣，比先前的又多又尊贵。他们到了巴兰那里，对他说，‘西拨的儿子巴勒这样说，“求你不容什么事拦阻你不到我这里来，因为我必使你得极大的尊荣，你向我要什么，我就给你什么；只求你来为我咒诅这民”。’巴兰回答巴勒的臣仆说，‘巴勒就是将他满屋的金银给我，我行大事小事也不得越过耶和华我神的命。现在我请你们今夜在这里住宿，等我得知耶和华还要对我说什么’。”（民二十二章十五至十九节）。</p>\n<p>  神的话经已说得那样清楚－“你不可同他们去，也不可咒诅那民，因为那民是蒙福的。”巴兰却对巴勒的使臣说，“现在我请你们今夜在这里住宿，等我得知耶和华还要对我说什么。”耶和华还能对他说什么呢？难道耶和华还能改变他已定的旨意么？明显是因为巴兰看见这一夥比先前又多又尊贵的使臣，又听见巴勒的应许说，“我必使你得极大的尊荣，你向我要什么，我就给你什么，”因此动了贪心，便希望神能改变他的旨意，容许他去。巴兰既存了这样的恶心，便开始走上了危险的道路，至终因着为巴勒设计谋，陷害了以色列民，招来了神的震怒，死在以色列人的刀下。（见民三十一章七节，八节，十四至十六节）。</p>\n<p>  一个圣徒已经清楚明白了神的旨意，却仍不坚决顺从，那就证明他的心已经偏于邪，或是有所贪恋，或是有所畏惧。心既然已经偏于邪，堕落与失败便是不能免的结果了。当沙得拉、米煞、亚伯尼歌，那三个人向尼布甲尼撒王表示那坚决的态度的时候，他们的心对神十分忠诚，既毫无贪恋，也毫无惧怕，他们丝毫不计较自己的得失祸福。他们只知道尊重神，只知道向神尽忠，此外什么事情也不是他们所要考虑的。只看他们那种坚决的态度，已经足可以知道他们这次的战斗必能得着胜利了。</p>\n<p>  最近我收到一位在外埠的青年女圣徒寄给我的一封信，里面有这样的几句话－</p>\n<p>  “前些日子有试验临到我。感谢神的恩典，使我牢记住了圣经上的原则，也是您常提醒我们的。……不管人怎样的花言巧语，我为着尊重神的缘故，为了听神的话，也为了我自己的幸福，就几次谢绝了同事、朋友、亲友的介绍。我告诉他们，我是基督徒，绝不和不信的人交朋友，更谈不到婚姻，所以他们就再也不提这些事了。即使有不知道而要说的人，也被这些知道我的人说明，而不再提了。感谢神，使我几次得了胜。”</p>\n<p>  “我是基督徒，绝不和不信的人交朋友，更谈不到婚姻。”何等爽快！何等坚决！这种态度与沙得拉、米煞、亚伯尼歌的态度完全相同。因此她也象他们三个人同样的得了胜利。战胜试探就需要有这种坚决的态度。不然，就只有节节败退，每况愈下，至终一败涂地。</p>\n<p>  有许多基督徒遇见这种试探，竟会回答说，“让我考虑考虑；让我求问求问神，看他怎样指示我、带领我。”还有些基督徒甚至先同对方见见面，谈谈话，如果对方不合他们的心意，便说这不是神的旨意，加以拒绝；如果对方使他们满意，他们再去求问神，再看神怎样带领。这不是求问神，更不是求神带领。这是作好了计画，征求神给一个“同意”；这是走自己所喜欢的路，让神在后面护送一程。神没有法子指示他们，更没有法子带领他们，神只能任凭他们了。</p>\n<p>  还有些基督徒比较好一些，他们不这样试探神。他们愿意顺服神，他们却不愿意给别人难堪，不愿意得罪人。他们不肯说“决不。”他们找一些别的藉口，想把事情敷衍过去。或是口头上允许考虑，或是说需要同别人商议一下，或是说为这件事祷告些时候，其实他们心中是早已决定拒绝。他们这样作已经犯了说谎的罪，魔鬼就从此在他们身上进攻，一方面利用他们肉体的软弱，使他们开始作种种的考虑，另一方面又发动别人继续来劝说。在这内外夹攻之下，他们的心志动摇了。他们起初应许“考虑”的时候，并不是真想去考虑，不过是用这种话应付一下而已，到这时竟弄假成真，果真“考虑”起来了。第一次的战争既遭遇失败，以后便很容易继续着败下去，最后便惨败到不堪挽救的地步。</p>\n<p>  我们看一个基督徒一开始应付试探的态度，对他最后的胜败便可以看出七八成来。凡在一开始应付试探的时候态度不坚决的，很少能在战争中得着胜利。既知道坚决的态度与胜利的人生有这样密切的关系，我们就应当靠着神的恩典，效法沙得拉、米煞、亚伯尼歌，那样刚强、那样勇敢、那样对神忠诚、那样不顾人的情面、那样不给魔鬼稍留地步；用坚决的态度应付一切临到我们的试探，在有人劝诱或威胁我们、要我们去作任何得罪神的事情的时候，对他们说：“决不！决不！”</p>"
  },
  {
    "id": 80,
    "title": "我们是为了信仰 —— 顺从人呢？顺从神呢？",
    "labels": "语思",
    "created_at": "2019-10-07T16:03:50Z",
    "updated_at": "2019-12-30T04:40:44Z",
    "body_html": "<p align=\"center\">  ◎<a href=\"https://zh.wikipedia.org/wiki/%E7%8E%8B%E6%98%8E%E9%81%93\" rel=\"nofollow\">王明道</a></p>\n<p>  ‘第二天，官府、长老、和文士，在耶路撒冷聚会，又有大祭司亚那和该亚法、约翰、亚力山大、并大祭司的亲族，都在那里。叫使徒站在他们当中，就向他们说，“你们用什么能力，奉谁的名，作这事呢？”那时彼得被圣灵充满，对他们说，“治民的官府和长老啊，倘若今日因为在残疾人身上所行的善事，查问我们他是怎样得了痊愈；你们众人和以色列众人都当知道，站在你们面前的这人得痊愈，是因你们所钉十字架、神叫他从死人里复活的拿撒勒人耶稣的名。他是你们匠人所弃的石头，已成了房角的头块石头。除他以外，别无拯救；因为在天下人间，没有赐下别的名，我们可以靠着得救。”’</p>\n<p>  ‘他们见彼得、约翰的胆量，又看出他们原是没有学问的小民，就希奇，认明他们是跟过耶稣的。又看见那治好了的人，就无话可驳。于是吩咐他们从公会出去，就彼此商议说，“我们当怎样办这两个人呢？因为他们诚然行了一件明显的神迹，凡住耶路撒冷的人都知道，我们也不能说没有。惟恐这事越发传扬在民间，我们必须恐吓他们，叫他们不再奉这名讲论。”于是叫了他们来，禁止他们，总不可奉耶稣的名讲论教训人。彼得、约翰说，“听从你们，不听从神，这在神面前合理不合理？你们自己酌量罢。我们所看见所听见的，不能不说。”’（徒四章五至二十节）。</p>\n<p>  ‘带到了，便叫使徒站在公会前。大祭司问他们说，“我们不是严严禁止你们，不可奉这名教训人么？你们倒把你们的道理充满了耶路撒冷，想要叫这人的血归到我们身上。”彼得和众使徒回答说，“顺从神，不顺从人，是应当的。你们挂在木头上杀害的耶稣，我们祖宗的神已经叫他复活。神且用右手将他高举，叫他作君王，作救主，将悔改的心和赦罪的恩赐给以色列人。我们为这事作见证，神赐给顺从他的人的圣灵也为这事作见证。”’</p>\n<p>  ‘公会的人听见，就极其恼怒，想要杀他们。但有一个法利赛人，名叫迦玛列，是众百姓所敬重的教法师，在公会中站起来，吩咐人把使徒暂且带到外面去。就对众人说，“以色列人哪，论到这些人，你们应当小心怎样办理。从前丢大起来，自夸为大，附从他的约有四百；他被杀后，附从他的全都散了，归于无有，以后报名上册的时候，又有加利利的犹大起来，引诱些百姓跟从他，他也灭亡，附从他的也都四散了。现在我劝你们不要管这些人，任凭他们罢。他们所谋的、所行的、若是出于人，必要败坏；若是出于神，你们就不能败坏他们，恐怕你们倒是攻击神了。”公会的人听从了他，便叫使徒来，把他们打了，又吩咐他们不可奉耶稣的名讲道，就把他们释放了。他们离开公会，心里欢喜，因被算是配为这名受辱。他们就每日在殿里、在家里、不住的教训人，传耶稣是基督。’（徒五章二十七至四十二节）。</p>\n<p>  ‘在上有权柄的，人人当顺服他；因为没有权柄不是出于神的。凡掌权的都是神所命的。所以抗拒掌权的，就是抗拒神的命，抗拒的必自取刑罚。作官的原不是叫行善的惧怕，乃是叫作恶的惧怕。你愿意不惧怕掌权的么？你只要行善，就可得他的称赞；因为他是神的用人，是与你有益的。你若作恶，却当惧怕，因为他不是空空的佩剑；他是神的用人，是伸冤的，刑罚那作恶的。所以你们必须顺服，不但是因为刑罚，也是因为良心。你们纳粮，也为这个缘故；因他们是神的差役，常常特管这事。凡人所当得的，就给他：当得粮的，给他纳粮；当得税的，给他上税；当惧怕的，惧怕他；当恭敬的，恭敬他。’（罗十三章一至七节）。</p>\n<p>  ‘你要提醒众人，叫他们顺服作官的、掌权的，遵他的命，豫备行各样的善事。’（多三章一节）。</p>\n<p>  ‘你们为主的缘故，原顺服人的一切制度，或是在上的君王，或是君王所派罚恶赏善的臣宰。因为神的旨意原是要你们行善，可以堵住那糊涂无知的人的囗。你们虽是自由的，却不可藉着自由遮盖恶毒，总要作神的仆人。务要尊敬众人，亲爱教中的弟兄，（教中的弟兄，希腊文是\"adelPhotes\"杨氏经文汇编译作brotherlyrelation，意思是“弟兄的关系”。英文圣经译作\"brotherhood\"这个字根本没有“教中”的意思）敬畏神，尊敬君王。’（彼前二章十三至十七节）。</p>\n<p>  读了上面所引的几段经文，我们也许要发出一个问题说，‘基督徒究竟是否应当服从世上的权柄，和那些有权柄的人？’若说‘应当’，那么使徒为什么不服从当日的大祭司和犹太人的官吏并长老？这些人屡次禁止使徒们传讲耶稣，禁止使徒们奉耶稣的名讲论教训人，但使徒们没有一次听从他们。使徒们第一次被禁止传福音的时候，回答那些人说，‘听从你们，不听从神，这在神面前合理不合理？你们自己酌量罢。我们所看见所听见的，不能不说。’第二次被禁止的时候，他们回答那些人说，‘顺从神，不顺从人，是应当的，你们挂在木头上杀害的耶稣，我们祖宗的神已经叫他复活。神且用右手将他高举，叫他作君王，作救主，将悔改的心和赦罪的恩赐给以色列人。我们为这事作见证，神赐给顺从的人的圣灵也为这事作见证。’他们挨了打以后，被释放了。他们还传讲耶稣么？传，而且传得更殷勤。‘他们就每日在殿里、在家里、不住的教训人，传耶稣是基督。’</p>\n<p>  若说基督徒不应当服从世上的权柄和那些有权柄的人，那么使徒为什么教训教会说，‘在上有权柄的，人人当顺服他’呢？为什么又说，‘你要提醒众人叫他们顺服作官的、掌权的、遵他的命，豫备行各样的善事’呢？为什么又说，‘你们为主的缘故，要顺服人的一切制度，或是在上的君王，或是君王所派罚恶赏善的臣宰’呢？</p>\n<p>  如果服从权柄和有权柄的人是合理的，使徒们就不该违抗大祭司、和犹太的官吏、并长老们的命令，也不应当说，‘顺从神，不顺从人，是应当的，’更不应在被禁止传耶稣以后，继续着去奉耶稣的名讲道教训人。如果服从世上的权柄和有权柄的人是不合理的，使徒就不应当写这几段话来教训圣徒。这个问题到底应当怎样解答呢？</p>\n<p>  我们对这个问题是这样回答：第一，我们应当顺服神，第二，我们在不违背神的命令的范围内，也应当顺服人的一切制度和权柄。但如果人的制度和权柄与神的命令相抵触，那样，我们便只有不顺从人，只顺从神了。基督徒所以要顺服人，并不是因为怕受人的惩罚，乃是因为敬畏神，因为神吩咐我们服从有权柄的人。既是这样，如果人的制度和命令与神的命令相背，自然我们就不能服从了。</p>\n<p>  使徒们当日在耶路撒冷不服从大祭司、犹太的官吏和长老，正是这种情形。传讲耶稣的福音，是神的命令和托付，大祭司、犹太人的官府和长老，禁止使徒，不许他们再传，当然他们不能服从，也不可服从。就是在这种情形之下，他们说出了‘顺从神，不顺从人，是应当的，’这一句话。</p>\n<p>  有些基督徒误解了使徒所说的这一句话，他们认为既要顺从神，便不能再顺从任何人。因此他们在家庭中不顺从父母长辈，在学校中不顺从师长，也不遵守校规，在工作的地方不顺从领导人的指导，到游览或参观的地方去，不遵守游览和参观规则。如果有人起来干涉他们，他们便说他们是基督徒，他们只能服从神，却不能服从人。他们这种行为不但给别人招来许多的困难和损害，还给神招来许多的羞辱。他们亟需要改正这种错误的观念。他们亟需要读经上的这一段教训－‘你们为主的缘故，要顺服人的一切制度。’</p>\n<p>  一个基督徒无论在什么地方，都应当作一个最守法律和规则的人。他不应当等到有人指责他、纠正他，才不得不遵守法律和规则。如果有这种种情形，便是他的耻辱。他自己当留心一切应当遵守的法律和规则，一一的谨慎遵守。如果因为不知道，或是一时疏忽，以致违犯了某条法律或规则，一经别人指示，便当立时承认自己的错误，欢欢喜喜的接受别人的纠正，急速改正过来。万不可庇护自己的错处，不肯承认，尤其不可恼羞成怒，对人说无理的话语，或有什么粗暴无礼的态度。</p>\n<p>  举几个例子说罢：一个基督徒在学校里读书，无论在礼堂、在课室、在宿舍、在饭厅、在操场、在图书馆，都当严谨的遵守校规。上课不可迟到。别人安静读书的时候，不可大声说话。晚间应当熄灯的时候，不可无故开灯。夜间大家睡觉的时候，不可出声说话，也不可大声动作。吃饭的时候不可争先恐后，不守秩序。不可污损任何校中的建筑或用品。对师长要有礼貌。对功课要用心学。一个基督徒作教员，应当认真备课，专心教导，看学校象自己的家庭，尽心爱护，看学生象自己的子女，善诱循循。一个基督徒在公事房里办公，若不是有特殊的事故，总要按时上班。办公的时候不可偷闲，也不可作自己的私事。自己应当作的事，不要推给别人去作。今天能作完的事，不要拖到明天。没有极重要的事，不可轻易请假。上级交代的工作，只要是自己的能力作得到的，绝不推诿。一个基督徒在工厂里作工，要遵守时间，爱护物质，服从领导，殷勤工作。不但有人看着的时候殷勤作工，就是没有人看着，没有人查问，也要同样的殷勤。一个基督徒作医师，要看病人象自己家中的人一样。只要时间许可，为病人诊病总要详细周到，不可轻忽大意，草草了事。一个基督徒作护士，要尽心看护病人。值班的时候不可看书，不可作活计，免得忽略了病人的需要。值夜班的时候，白日应当睡足了觉，免得夜间精神不足，以致打盹。为病人送药或打针的时候，应当细心，免得发生错误或危险。对病人要言语和蔼，态度温柔。一个基督徒作商人，不可用次货冒充好货，以陈货冒充新货。不可讨虚价，不可欺哄乡间人、外乡人、或外国人。不可使用不公平的尺秤或量器。不可偷税、抗税。一个基督徒到游玩或参观的地方时，应当留意那里所张贴的规则。从入口进去，从出口出来。不可摸的东西不要摸，不许去的地方不可去。不可践踏草地。不可折取花卉，不可摘食树上的果子。不可随意乱画乱写。不可损伤任何建筑或杂物。不可随地吐痰或抛掷果皮烂纸。不可在厕所以外便溺。不可攀登禁攀登的山石。应当出来的时候，不可再流连不走。一个基督徒驾驶车辆的时候，要遵守交通规则，服从交通警的指挥，不但有岗警的地方应当大迂回，就是没有岗警的地方也当如此。晚间必须燃灯。经过街道交叉的地方和拐弯的地方当开慢车。如果不慎撞倒了人，要立时下车扶助被撞的人，万不可开车逃走。一个基督徒到医院去看视病人，要按着规定的时间进去，按着规定的时间出来。在病房内外行走的时候，脚步要轻，说话的时候，声音要低。要轻轻开门关门。给病人送食品，要得院方的许可。一个基督徒作国家的公民，应当遵守国家一切的法律，不可作一件不能在法庭上侃侃直陈的事。要尊敬在上有权柄的人。要爱护一切公共的建筑、财产、杂物，不但自己不加损伤，而且要阻止别人损伤。不可作一件与国家或与国中的任何人有损害的事。</p>\n<p>  但在另外的一种情形之下，我们却绝不可服从人：那就是人的制度或人的命令与神的旨意互相抵触的时候，我们便只能服从神，却不能服从人了。儿女应当听从父母，但如果父母吩咐儿女去说谎，儿女便不能听从父母了。学生应当听从师长，但如果师长领导学生到死人的遗体或遗像前面去行礼致敬，学生便不能听从师长了。信徒在工作岗位上应当服从领导人，但如果领导人禁止他们祷告、读经、参加圣徒的聚会、为主耶稣作见证，他们便不能服从领导人了。只要人的制度或命令不违背神的旨意，基督徒是应当服从的；但如果人的制度或命令违反了神的命令和圣经上的真理，那样，我们便绝对不能服从。在这时我们应当说使徒所说的话－‘顺从神，不顺从人，是应当的。’</p>\n<p>  基督徒应当顺服人的一切制度、和一切在上有权柄的人。但基督徒在遵行神的旨意、与圣徒交通、在教会中与众圣徒一同事奉神、保守教会的圣洁、为主耶稣作见证、传扬救恩的福音、这些事上，却绝不能受任何人的干涉。我们为这些事不怕任何拦阻，不惜付任何代价，也不惜作任何牺牲。我们为这些事必须效法使徒的勇敢刚强。当主耶稣升天以后，犹太人的政治与宗教两方面的领袖用了雷霆万钧的力量，想消灭基督的福音与教会，就是因为使徒那样勇敢刚强，福音才得传开，教会才被建立，众信徒才能随着他们也勇敢刚强起来，将福音传遍世界，我们才得听见了福音，领受了救恩，作了神的儿子，得了永远的生命。有人问我今日的教会该走怎样的道路？我回答说：‘走使徒的道路。’那就是说，跟着使徒的脚踪走，效法他们那样勇敢刚强、那样不怕恐吓、那样不顾性命、那样至死忠心、那样不讨人的欢心，那样在任何阻力之下仍然传扬福音，那样只本着神的话教训人。谁能这样作，谁便能蒙神赐福，被神重用。他们要遭遇使徒所遭遇的，他们也要成就使徒所成就的，神的荣耀和大能要藉着他们彰显出来，如同当日藉着使徒彰显出来一样。</p>\n<p>  可叹许多传道的人竟利用‘顺服的人制度’，和‘服从有权柄的人’这两句话来掩饰自己的胆怯与失败，来欺骗许多不十分明白圣经真理的信徒，以致教会的信仰、事工，都被放在‘人的制度’和‘人的权柄’之下。结果是什么呢？真理被蒙蔽，圣经被歪曲，教会变了质，羊群分散流离，基督的教会和福音就这样在‘顺服人的制度’和‘服从权柄’的教训下，被‘神的仆人’们轻轻断送了！这些传道人能逃脱神的震怒么？</p>"
  },
  {
    "id": 79,
    "title": "初探 BFC",
    "labels": "开发者笔记",
    "created_at": "2019-10-07T12:34:24Z",
    "updated_at": "2019-10-07T12:34:24Z",
    "body_html": "<h2>何为 BFC？</h2>\n<p>块格式化上下文（Block Formatting Context，BFC） 是 Web 页面的可视化 CSS 渲染的一部分，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。</p>\n<p>BFC 对浮动定位与清除浮动都很重要。浮动定位和清除浮动时只会应用于同一个 BFC 内的元素。浮动不会影响其它 BFC 中元素的布局，而清除浮动只能清除同一 BFC 中在它前面的元素的浮动。外边距折叠（Margin collapsing）也只会发生在属于同一 BFC 的块级元素之间。</p>\n<h2>常见使用场景</h2>\n<h3>清除浮动（让浮动内容与周围内容等高）</h3>\n<p>demo 演示:</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">*</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin</span></span>: <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">padding</span></span>: <span class=\"pl-c1\">0</span>;\n}\n<span class=\"pl-e\">.demo</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">border</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">px</span></span> <span class=\"pl-c1\">solid</span> <span class=\"pl-c1\">pink</span>;\n}\n<span class=\"pl-e\">.demo</span> <span class=\"pl-ent\">p</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">float</span></span>: <span class=\"pl-c1\">left</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">blue</span>;\n}</pre></div>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>demo<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">p</span>&gt;&lt;/<span class=\"pl-ent\">p</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<p>下图可见<code>#demo</code>容器中的子元素浮动后脱离文档流，盒子容器高度为 <code>2px</code>。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/3c70d565be629c5680a628dd785ba3b817f0e796/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377074346c6a636f6b6a3231377930346f33796c2e6a7067\"><img src=\"https://camo.githubusercontent.com/3c70d565be629c5680a628dd785ba3b817f0e796/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377074346c6a636f6b6a3231377930346f33796c2e6a7067\" alt=\"Snipaste_2019-10-07_18-21-39.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7pt4ljcokj217y04o3yl.jpg\" style=\"max-width:100%;\"></a></p>\n<p>解决方法:<br>\n触发父容器的 BFC 属性，使里面的子元素都处在父的同一个 BFC 区域之内，此时已成功清除浮动。</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">#demo</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">border</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">px</span></span> <span class=\"pl-c1\">solid</span> <span class=\"pl-c1\">pink</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">overflow</span></span>: <span class=\"pl-c1\">hidden</span>;\n}</pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/644414eaaa637c73b0910f9de4a3864053f20a84/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377074656d776b6c356a323138393035793073742e6a7067\"><img src=\"https://camo.githubusercontent.com/644414eaaa637c73b0910f9de4a3864053f20a84/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377074656d776b6c356a323138393035793073742e6a7067\" alt=\"Snipaste_2019-10-07_18-31-14.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7ptemwkl5j218905y0st.jpg\" style=\"max-width:100%;\"></a></p>\n<h3>外边距塌陷</h3>\n<p>demo 演示:</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.blue</span>,\n<span class=\"pl-e\">.red-inner</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">50<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin</span></span>: <span class=\"pl-c1\">10<span class=\"pl-k\">px</span></span> <span class=\"pl-c1\">0</span>;\n}\n\n<span class=\"pl-e\">.blue</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">blue</span>;\n}\n\n<span class=\"pl-e\">.red-inner</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">red</span>;\n}</pre></div>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>blue<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>red-outer <span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>red-inner<span class=\"pl-pds\">\"</span></span>&gt;red inner&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<p>由下图可知，两个盒子的外边距重叠，为<code>10px</code>。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/54e40faa3141658853a4e18ea0cd87deacc8d4d5/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377074787868376c646a323166323063726467702e6a7067\"><img src=\"https://camo.githubusercontent.com/54e40faa3141658853a4e18ea0cd87deacc8d4d5/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377074787868376c646a323166323063726467702e6a7067\" alt=\"Snipaste_2019-10-07_18-49-55.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7ptxxh7ldj21f20crdgp.jpg\" style=\"max-width:100%;\"></a></p>\n<p>解决办法：将 <code>.red-outer</code>盒子设置为 BFC 盒子，隔离两个颜色的盒子</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.red-outer</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">overflow</span></span>: <span class=\"pl-c1\">hidden</span>;\n}</pre></div>\n<h3>可以阻止元素被浮动元素覆盖</h3>\n<p>demo 演示:</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">*</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin</span></span>: <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">padding</span></span>: <span class=\"pl-c1\">0</span>;\n}\n<span class=\"pl-e\">.demo1</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">float</span></span>: <span class=\"pl-c1\">left</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">pink</span>;\n}\n<span class=\"pl-e\">.demo2</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">blue</span>;\n}</pre></div>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>demo<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>demo1<span class=\"pl-pds\">\"</span></span>&gt;我是一个左侧浮动元素&lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>demo2<span class=\"pl-pds\">\"</span></span>&gt;我是一个没有设置浮动, 也没有触发BFC的元素&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<p>如下图：demo2 部分区域被浮动元素 demo1 覆盖, 但是文字没有覆盖, 即文字环绕效果。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/cd02a77816558d9acb6787f9795b4830fbb25247/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673770756c31753031656a3231386130396b676d312e6a7067\"><img src=\"https://camo.githubusercontent.com/cd02a77816558d9acb6787f9795b4830fbb25247/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673770756c31753031656a3231386130396b676d312e6a7067\" alt=\"Snipaste_2019-10-07_19-12-08.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7pul1u01ej218a09kgm1.jpg\" style=\"max-width:100%;\"></a></p>\n<p>解决办法： 修改背景为蓝色的盒子的属性值，使其成为 BFC，以此阻止被粉色的浮动盒子覆盖。</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.demo2</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 添加触发 BFC 条件 <span class=\"pl-c\">*/</span></span>\n  <span class=\"pl-c1\"><span class=\"pl-c1\">overflow</span></span>: <span class=\"pl-c1\">hidden</span>;\n}</pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/53073c083e76c3e416ec516c44dc6c2baeb98aa6/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737707574617771336d6a323166673065626d79382e6a7067\"><img src=\"https://camo.githubusercontent.com/53073c083e76c3e416ec516c44dc6c2baeb98aa6/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737707574617771336d6a323166673065626d79382e6a7067\" alt=\"Snipaste_2019-10-07_19-20-01.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7putawq3mj21fg0ebmy8.jpg\" style=\"max-width:100%;\"></a></p>\n<h3>自适应两栏布局</h3>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">*</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin</span></span>: <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">padding</span></span>: <span class=\"pl-c1\">0</span>;\n}\n<span class=\"pl-e\">.container</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">300<span class=\"pl-k\">px</span></span>;\n}\n<span class=\"pl-e\">.float</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">float</span></span>: <span class=\"pl-c1\">left</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">red</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin-right</span></span>: <span class=\"pl-c1\">10<span class=\"pl-k\">px</span></span>;\n}\n\n<span class=\"pl-e\">.main</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">green</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">overflow</span></span>: <span class=\"pl-c1\">hidden</span>;\n}</pre></div>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>container<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float<span class=\"pl-pds\">\"</span></span>&gt;\n    浮动元素\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>main<span class=\"pl-pds\">\"</span></span>&gt;\n    自适应\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<p>如下图所示：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/dd5eb7dd5e37915ac1775f84e69afb76ae4a9f35/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737707636336a3469656a3231686330387764666f2e6a7067\"><img src=\"https://camo.githubusercontent.com/dd5eb7dd5e37915ac1775f84e69afb76ae4a9f35/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737707636336a3469656a3231686330387764666f2e6a7067\" alt=\"Snipaste_2019-10-07_19-32-21.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7pv63j4iej21hc08wdfo.jpg\" style=\"max-width:100%;\"></a></p>\n<p>这种主要是应用到 BFC 的一个特性：</p>\n<p>1.浮动元素的块状兄弟元素会无视浮动元素的位置,尽量占满一行,这样该兄弟元素就会被浮动元素覆盖</p>\n<p>2.若浮动元素的块状兄弟元素为 BFC,这不会占满一行,而是根据浮动元素的宽度,占据该行剩下的宽度,避免与浮动元素重叠</p>\n<p>3.浮动元素与其块状 BfC 兄弟元素之间的 margin 可以生效,这会继续减少兄弟元素的宽度</p>\n<h2>触发 BFC 的条件</h2>\n<ul>\n<li>根元素()</li>\n<li>浮动元素（元素的 float 不是 none）</li>\n<li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li>\n<li>行内块元素（元素的 display 为 inline-block）</li>\n<li>表格单元格（元素的 display 为 table-cell，HTML 表格单元格默认为该值）</li>\n<li>表格标题（元素的 display 为 table-caption，HTML 表格标题默认为该值）</li>\n<li>匿名表格单元格元素（元素的 display 为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是 HTML table、row、tbody、thead、tfoot 的默认属性）或 inline-table）</li>\n<li>overflow 值不为 visible 的块元素</li>\n<li>display 值为 flow-root 的元素</li>\n<li>contain 值为 layout、content 或 paint 的元素</li>\n<li>弹性元素（display 为 flex 或 inline-flex 元素的直接子元素）</li>\n<li>网格元素（display 为 grid 或 inline-grid 元素的直接子元素）</li>\n<li>多列容器（元素的 column-count 或 column-width 不为 auto，包括 column-count 为 1）</li>\n<li>column-span 为 all 的元素始终会创建一个新的 BFC，即使该元素没有包裹在一个多列容器中</li>\n</ul>\n<h3>参考文章</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\" rel=\"nofollow\">块格式化上下文</a></li>\n<li><a href=\"https://github.com/NuoHui/fe-note/blob/master/docs/css3/BFC.md\">BFC</a></li>\n<li><a href=\"https://www.cnblogs.com/xiaohuochai/p/5248536.html\" rel=\"nofollow\">深入理解 BFC</a></li>\n</ul>"
  },
  {
    "id": 78,
    "title": "交城站",
    "labels": "观点与感想",
    "created_at": "2019-10-06T15:35:43Z",
    "updated_at": "2019-12-30T04:41:45Z",
    "body_html": "<p>黑夜袭来，灯光昏暗的公车里，渐渐涌起嘈杂的人声。一张暗黑的路面上，电光在迷雾中穿梭，驶向前方。少年左脚支撑，右脚独立，肩头的背包已经失重，举头望着吊灯，心分走了一半，停留在离别的车站，不知心上的人儿几时平安回到家中。</p>\n<p>新的车站，只有熟悉的旋律在耳中不断回荡(《菊次郎の夏》插曲）……</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/69fa8aca150ca6f9fc3b085d911c3228313b91e2/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673770766569716761306a3232656f33376b346d652e6a7067\"><img src=\"https://camo.githubusercontent.com/69fa8aca150ca6f9fc3b085d911c3228313b91e2/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673770766569716761306a3232656f33376b346d652e6a7067\" width=\"75%\" height=\"75%\" alt=\"图片名称\" align=\"center\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7pveiqga0j22eo37k4me.jpg\" style=\"max-width:100%;\"></a></p>"
  },
  {
    "id": 77,
    "title": "为爱守候立约",
    "labels": "光与盐",
    "created_at": "2019-10-06T15:15:12Z",
    "updated_at": "2019-10-07T11:52:51Z",
    "body_html": "<h2>约定</h2>\n<p>求神赐下力量保守性到婚姻中！<br>\n抵挡性诱惑，每次都是正确的！</p>\n<h2>正确步骤</h2>\n<ol>\n<li>寻求监督</li>\n<li>离弃罪恶（如果你仍然与某人有性关系，终止一段时间后结婚或分手守贞）</li>\n<li>坚固信仰</li>\n<li>聚焦使命</li>\n<li>设定界限（设定远离性诱惑的安全界限）</li>\n<li>慎重交友（避免与危险行为人为友）</li>\n<li>宣誓立约</li>\n</ol>\n<h2>设定界限</h2>\n<ol>\n<li>个人眼目所见的界限：避讳不看，不主动去看，要逃避</li>\n<li>暴露身体部位的界限：不衣着暴露，以正派衣裳为装饰</li>\n<li>进出娱乐场所的界限：只选择公开光明的场所</li>\n<li>与异性谈心事的界限：真诚，摆正身份</li>\n<li>男女朋友约会的界限：待定</li>\n<li>男女朋友身体接触的界限：牵手</li>\n<li>孤男寡女独处的界限：不共处一室</li>\n<li>男女朋友外游的界限：不共处一室，遵守身体接触界限</li>\n</ol>\n<h2>立约</h2>\n<h3 align=\"center\">婚前守贞 —— 我的承诺</h3>\n<p>我现在知道并相信在我的生命中可以有一份真正的、美好的爱情。为了得到它，我决定等待，我郑重承诺，为了我自己、我的家庭、我的朋友、我未来的伴侣以及我们未来的孩子，我决定把性保留在婚姻中，我要为我的决定持守到底。</p>\n<p align=\"right\">立约人：闫越</p>\n<p align=\"right\">见证人：种子</p>\n<p align=\"right\">日期：2019.10.03</p>\n<div align=\"center\">  \n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/7e05b6c6687560256cb8057b6708f5724d751b53/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673770766f6b7a35676f6a323075303075306469372e6a7067\"><img src=\"https://camo.githubusercontent.com/7e05b6c6687560256cb8057b6708f5724d751b53/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673770766f6b7a35676f6a323075303075306469372e6a7067\" width=\"85%\" height=\"85%\" alt=\"图片名称\" align=\"center\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7pvokz5goj20u00u0di7.jpg\" style=\"max-width:100%;\"></a>\n</div>"
  },
  {
    "id": 76,
    "title": "十一前的主日读经思考",
    "labels": "光与盐",
    "created_at": "2019-09-29T12:10:01Z",
    "updated_at": "2019-10-07T12:28:34Z",
    "body_html": "<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/26886b441060dbc249b28b7b3a2ee22769ff323f/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673770767873746c72306a3233376b32656f6b6a6d2e6a7067\"><img src=\"https://camo.githubusercontent.com/26886b441060dbc249b28b7b3a2ee22769ff323f/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673770767873746c72306a3233376b32656f6b6a6d2e6a7067\" alt=\"TIM图片20191007195843.jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7pvxstlr0j237k2eokjm.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>圣经内容</h2>\n<h3>尼希米关心耶路撒冷</h3>\n<p><code>1</code> 哈迦利亚的儿子尼希米的言语如下。亚达薛西王二十年基斯流月，我在书珊城的宫中。<br>\n<code>2</code> 那时，有我一个弟兄哈拿尼，同着几个人从犹大来。我问他们那些被掳归回，剩下逃脱的犹大人和耶路撒冷的光景。<br>\n<code>3</code>他们对我说，那些被掳归回剩下的人，在犹大省遭大难，受凌辱。并且耶路撒冷的城墙拆毁，城门被火焚烧。<br>\n<code>4</code> 我听见这话，就坐下哭泣，悲哀几日。在天上的神面前禁食祈祷，说，<br>\n<code>5</code>耶和华天上的神，大而可畏的神阿，你向爱你，守你诫命的人守约施慈爱。<br>\n<code>6</code> 愿你睁眼看，侧耳听，你仆人昼夜在你面前，为你众仆人以色列民的祈祷，承认我们以色列人向你所犯的罪。我与我父家都有罪了。<br>\n<code>7</code> 我们向你所行的甚是邪恶，没有遵守你借着仆人，摩西所吩咐的诫命，律例，典章。<br>\n<code>8</code> 求你记念所吩咐你仆人摩西的话，说，你们若犯罪，我就把你们分散在万民中。<br>\n<code>9</code> 但你们若归向我，谨守遵行我的诫命，你们被赶散的人虽在天涯，我也必从那里将他们招聚回来，带到我所选择立为我名的居所。<br>\n<code>10</code> 这都是你的仆人，你的百姓，就是你用大力，和大能的手所救赎的。<br>\n<code>11</code> 主阿，求你侧耳听你仆人的祈祷，和喜爱敬畏你名众仆人的祈祷，使你仆人现今亨通，在王面前蒙恩。我是作王酒政的。</p>\n<h3>尼希米返耶路撒冷</h3>\n<p><code>1</code> 亚达薛西王二十年尼散月，在王面前摆酒，我拿起酒来奉给王。我素来在王面前没有愁容。<br>\n<code>2</code> 王对我说，你既没有病，为什么面带愁容呢？这不是别的，必是你心中愁烦。于是我甚惧怕。<br>\n<code>3</code> 我对王说，愿王万岁。我列祖坟墓所在的那城荒凉，城门被火焚烧，我岂能面无愁容吗？<br>\n<code>4</code> 王问我说，你要求什么。于是我默祷天上的神。<br>\n<code>5</code> 我对王说，仆人若在王眼前蒙恩，王若喜欢，求王差遣我往犹大，到我列祖坟墓所在的那城去，我好重新建造。<br>\n<code>6</code> 那时王后坐在王的旁边。王问我说，你去要多少日子。几时回来。我就定了日期。于是王喜欢差遣我去。<br>\n<code>7</code> 我又对王说，王若喜欢，求王赐我诏书，通知大河西的省长准我经过，直到犹大。<br>\n<code>8</code> 又赐诏书，通知管理王园林的亚萨，使他给我木料，作属殿营楼之门的横梁和城墙，与我自己房屋使用的。王就允准我，因我神施恩的手帮助我。<br>\n<code>9</code> 王派了军长和马兵护送我。我到了河西的省长那里，将王的诏书交给他们。<br>\n<code>10</code> 和伦人参巴拉，并为奴的亚扪人多比雅，听见有人来为以色列人求好处，就甚恼怒。<br>\n<code>11</code> 我到了耶路撒冷，在那里住了三日。<br>\n<code>12</code> 我夜间起来，有几个人也一同起来，但神使我心里要为耶路撒冷做什么事，我并没有告诉人。除了我骑的牲口以外，也没有别的牲口在我那里。<br>\n<code>13</code> 当夜我出了谷门，往野狗井去（野狗或作龙），到了粪厂门，察看耶路撒冷的城墙，见城墙拆毁，城门被火焚烧。<br>\n<code>14</code> 我又往前，到了泉门和王池，但所骑的牲口没有地方过去。<br>\n<code>15</code> 于是夜间沿溪而上，察看城墙，又转身进入谷门，就回来了。<br>\n<code>16</code> 我往哪里去，我做什么事，官长都不知道。我还没有告诉犹大平民，祭司，贵胄，官长，和其余做工的人。<br>\n<code>17</code> 以后，我对他们说，我们所遭的难，耶路撒冷怎样荒凉，城门被火焚烧，你们都看见了。来吧，我们重建耶路撒冷的城墙，免得再受凌辱。<br>\n<code>18</code> 我告诉他们我神施恩的手怎样帮助我，并王对我所说的话。他们就说，我们起来建造吧。于是他们奋勇做这善工。<br>\n<code>19</code> 但和伦人参巴拉，并为奴的亚扪人多比雅，和亚拉伯人基善，听见就嗤笑我们，藐视我们，说，你们做什么呢？要背叛王吗？<br>\n<code>20</code> 我回答他们说，天上的神必使我们亨通。我们作他仆人的，要起来建造。你们却在耶路撒冷无分，无权，无纪念。</p>\n<h2>思考得着</h2>\n<p>经上的话语是宝贵的，换成白话多读反复思考，得到亮光</p>\n<ul>\n<li>尼希米为以色列人及耶路撒冷城发热心</li>\n<li>学习尼希米的祷告：<code>认罪</code>,<code>抓住神的应许</code>,<code>倾心祈祷，求神垂听</code></li>\n<li>尼希米回应王敬畏智慧的言语</li>\n<li>王问我说，你要求什么。于是我默祷天上的神。（面对环境的态度，先向神交托）</li>\n<li>我又对王说，王若喜欢，求王赐我 ... （准备所需用的）</li>\n<li>当夜我出了谷门，往野狗井去 （稳重，事先查看建造工作量）</li>\n<li>我们的行为：凯撒的物当归凯撒，神的物当归给神</li>\n</ul>"
  },
  {
    "id": 75,
    "title": "前端基本功 —— 笔试",
    "labels": "开发者笔记",
    "created_at": "2019-09-26T16:36:28Z",
    "updated_at": "2019-12-30T04:41:17Z",
    "body_html": "<ol>\n<li>尽可能全面正确的解析一个任意 url 的所有参数为 Object</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> url <span class=\"pl-k\">=</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;d&amp;enabled<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> parseParam(url);</span>\n<span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\">结果：</span>\n<span class=\"pl-c\">{</span>\n<span class=\"pl-c\">   user: 'anonymous',</span>\n<span class=\"pl-c\">   id: [123, 456], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型</span>\n<span class=\"pl-c\">   city: '北京', // 中文</span>\n<span class=\"pl-c\">   enabled: true, // 未指定值的 key 约定值为 true</span>\n<span class=\"pl-c\">}</span>\n<span class=\"pl-c\"><span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">parseParam</span>(<span class=\"pl-smi\">url</span>) {\n  <span class=\"pl-k\">var</span> paramArr <span class=\"pl-k\">=</span> <span class=\"pl-c1\">decodeURI</span>(url)\n      .<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>?<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">1</span>]\n      .<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>&amp;<span class=\"pl-pds\">'</span></span>),\n    obj <span class=\"pl-k\">=</span> {};\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">paramArr</span>.<span class=\"pl-c1\">length</span>; i<span class=\"pl-k\">++</span>) {\n    <span class=\"pl-k\">var</span> item <span class=\"pl-k\">=</span> paramArr[i];\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">indexOf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">!=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) {\n      <span class=\"pl-k\">var</span> tmp <span class=\"pl-k\">=</span> <span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span>);\n      obj[tmp[<span class=\"pl-c1\">0</span>]] <span class=\"pl-k\">=</span> tmp[<span class=\"pl-c1\">1</span>];\n    } <span class=\"pl-k\">else</span> {\n      obj[item] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;\n    }\n  }\n  <span class=\"pl-k\">return</span> obj;\n}\n<span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> <span class=\"pl-en\">parseParam</span>(url);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(obj);</pre></div>\n<ol start=\"2\">\n<li><code>Event loop</code> 宏任务，微任务,打印结果？</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">new</span> <span class=\"pl-en\">Promise</span>(<span class=\"pl-smi\">resolve</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">1</span>);\n  <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">2</span>);\n  }, <span class=\"pl-c1\">0</span>);\n  <span class=\"pl-c1\">Promise</span>.<span class=\"pl-c1\">resolve</span>().<span class=\"pl-c1\">then</span>(() <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">3</span>);\n  });\n  <span class=\"pl-en\">resolve</span>();\n}).<span class=\"pl-c1\">then</span>(() <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">4</span>);\n});\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">5</span>);</pre></div>\n<p>// log: 1,5,3,4,2</p>\n<ol start=\"3\">\n<li>手写深拷贝</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">deepCopy</span>(<span class=\"pl-smi\">obj</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">typeof</span> obj <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">return</span>;\n  <span class=\"pl-k\">var</span> newObj <span class=\"pl-k\">=</span> obj <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Array</span> <span class=\"pl-k\">?</span> [] <span class=\"pl-k\">:</span> {};\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> key <span class=\"pl-k\">in</span> obj) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">hasOwnProperty</span>(key)) {\n      newObj[key] <span class=\"pl-k\">=</span>\n        <span class=\"pl-k\">typeof</span> obj[key] <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">?</span> <span class=\"pl-en\">deepCopy</span>(obj[key]) <span class=\"pl-k\">:</span> obj[key];\n    }\n  }\n  <span class=\"pl-k\">return</span> newObj;\n}</pre></div>\n<ol start=\"4\">\n<li>检测数据类型的方法</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * 判断数据类型</span>\n<span class=\"pl-c\"> *</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> <span class=\"pl-en\">{*}</span> <span class=\"pl-smi\">a</span></span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@returns</span> Boolean String Array Object Function Number Undefined Null</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getType</span>(<span class=\"pl-smi\">a</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">toString</span>.<span class=\"pl-c1\">call</span>(a).<span class=\"pl-c1\">slice</span>(<span class=\"pl-c1\">8</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>);\n}</pre></div>\n<ol start=\"5\">\n<li>排序</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> arr <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">7</span>];\n<span class=\"pl-k\">var</span> m <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n<span class=\"pl-k\">var</span> n <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n<span class=\"pl-k\">var</span> flag <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>轮数</span>\n<span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>; i<span class=\"pl-k\">++</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>次数</span>\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> j <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; j <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">-</span> i; j<span class=\"pl-k\">++</span>) {\n    <span class=\"pl-k\">if</span> (arr[j] <span class=\"pl-k\">&gt;</span> arr[j <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>]) {\n      flag <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>;\n      <span class=\"pl-k\">var</span> tmp <span class=\"pl-k\">=</span> arr[j];\n      arr[j] <span class=\"pl-k\">=</span> arr[j <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>];\n      arr[j <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>] <span class=\"pl-k\">=</span> tmp;\n    }\n    n<span class=\"pl-k\">++</span>;\n  }\n  m<span class=\"pl-k\">++</span>;\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>判断：如果flag被修改了，说明没有排序完毕。如果一次都没有修改，就说明完成排序了。</span>\n  <span class=\"pl-k\">if</span> (flag) {\n    <span class=\"pl-k\">break</span>;\n  }\n}\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(arr);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>轮数 <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> m); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 轮数 6</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>次数 <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> n); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 次数 21</span></pre></div>\n<h3>其他</h3>\n<ul>\n<li>四舍五入</li>\n<li>加减乘除</li>\n<li>bind 方法</li>\n<li>节流防抖函数</li>\n<li>手写一个设计模式（eg:发布订阅模式)</li>\n</ul>"
  },
  {
    "id": 74,
    "title": "节流与防抖如何区分？",
    "labels": "JavaScript",
    "created_at": "2019-09-25T10:12:59Z",
    "updated_at": "2019-11-07T00:19:56Z",
    "body_html": "<p>节流是指在一段时间内，事件只触发第一次，防抖则是一段时间只触发最后一次。</p>\n<p>分别的应用是，节流是按钮连点、滚轮是否滚动到底部等，比如滚轮节流后第一次触发已经到底部了，就直接可以触发。</p>\n<p>防抖是用户输入、浏览器窗口的 resize等，只关心最新的一次输入。</p>"
  },
  {
    "id": 73,
    "title": "理解 JS 中的闭包",
    "labels": "JavaScript",
    "created_at": "2019-09-25T09:07:15Z",
    "updated_at": "2019-09-25T09:07:23Z",
    "body_html": "<h2>概念</h2>\n<p>闭包是函数和声明该函数的词法环境的组合。(MDN) 本质实现上就是函数嵌套函数。</p>\n<h2>作用</h2>\n<ul>\n<li>在函数外部获得函数内部私有变量(沟通桥梁)</li>\n<li>代码结构上，减少全局变量， Clean Code</li>\n</ul>\n<h2>基本实现</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">f1</span>() {\n  <span class=\"pl-k\">var</span> n <span class=\"pl-k\">=</span> <span class=\"pl-c1\">999</span>;\n\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">f2</span>() {\n    <span class=\"pl-en\">alert</span>(n);\n  }\n\n  <span class=\"pl-k\">return</span> f2;\n}\n\n<span class=\"pl-k\">var</span> result <span class=\"pl-k\">=</span> <span class=\"pl-en\">f1</span>();\n\n<span class=\"pl-en\">result</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 999</span></pre></div>\n<h2>常见场景</h2>\n<ul>\n<li>模块模式构造方法</li>\n</ul>\n<blockquote>\n<p>构造具有独立性，两个闭包维护自身私有变量，相互不会产生影响</p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-en\">makeCounter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">var</span> privateCounter <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">changeBy</span>(<span class=\"pl-smi\">val</span>) {\n    privateCounter <span class=\"pl-k\">+=</span> val;\n  }\n  <span class=\"pl-k\">return</span> {\n    <span class=\"pl-en\">increment</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-en\">changeBy</span>(<span class=\"pl-c1\">1</span>);\n    },\n    <span class=\"pl-en\">decrement</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-en\">changeBy</span>(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>);\n    },\n    <span class=\"pl-en\">value</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-k\">return</span> privateCounter;\n    }\n  };\n};\n\n<span class=\"pl-k\">var</span> Counter1 <span class=\"pl-k\">=</span> <span class=\"pl-en\">makeCounter</span>();\n<span class=\"pl-k\">var</span> Counter2 <span class=\"pl-k\">=</span> <span class=\"pl-en\">makeCounter</span>();\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">Counter1</span>.<span class=\"pl-c1\">value</span>()); <span class=\"pl-c\"><span class=\"pl-c\">/*</span> logs 0 <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-smi\">Counter1</span>.<span class=\"pl-en\">increment</span>();\n<span class=\"pl-smi\">Counter1</span>.<span class=\"pl-en\">increment</span>();\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">Counter1</span>.<span class=\"pl-c1\">value</span>()); <span class=\"pl-c\"><span class=\"pl-c\">/*</span> logs 2 <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-smi\">Counter1</span>.<span class=\"pl-en\">decrement</span>();\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">Counter1</span>.<span class=\"pl-c1\">value</span>()); <span class=\"pl-c\"><span class=\"pl-c\">/*</span> logs 1 <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">Counter2</span>.<span class=\"pl-c1\">value</span>()); <span class=\"pl-c\"><span class=\"pl-c\">/*</span> logs 0 <span class=\"pl-c\">*/</span></span></pre></div>\n<ul>\n<li>在循环中创建闭包</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> data <span class=\"pl-k\">=</span> [];\n\n<span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">3</span>; i<span class=\"pl-k\">++</span>) {\n  data[i] <span class=\"pl-k\">=</span> (<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">i</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(i);\n    };\n  })(i);\n}\n\ndata[<span class=\"pl-c1\">0</span>]();\ndata[<span class=\"pl-c1\">1</span>]();\ndata[<span class=\"pl-c1\">2</span>]();</pre></div>\n<blockquote>\n<p>每隔一秒依次打印 1,2,3,4,5</p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>; i <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">5</span>; i<span class=\"pl-k\">++</span>) {\n  (<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">j</span>) {\n    <span class=\"pl-c1\">setTimeout</span>(<span class=\"pl-k\">function</span> <span class=\"pl-en\">timer</span>() {\n      <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(j);\n    }, j <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1000</span>);\n  })(i);\n}</pre></div>\n<ul>\n<li>节流函数</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">throttle</span>(<span class=\"pl-smi\">fn</span>, <span class=\"pl-smi\">gapTime</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1500</span>) {\n  <span class=\"pl-k\">let</span> _lastTime <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 返回新的函数</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">let</span> _nowTime <span class=\"pl-k\">=</span> <span class=\"pl-k\">+</span><span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>();\n    <span class=\"pl-k\">if</span> (_nowTime <span class=\"pl-k\">-</span> _lastTime <span class=\"pl-k\">&gt;</span> gapTime <span class=\"pl-k\">||</span> <span class=\"pl-k\">!</span>_lastTime) {\n      <span class=\"pl-smi\">fn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-c1\">arguments</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>将this和参数传给原函数</span>\n      _lastTime <span class=\"pl-k\">=</span> _nowTime;\n    }\n  };\n}</pre></div>\n<h3>参考</h3>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" rel=\"nofollow\">学习 Javascript 闭包（Closure）- 阮一峰</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" rel=\"nofollow\">闭包 - MDN</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/9\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mqyqingfeng/Blog/issues/9/hovercard\">JavaScript 深入之闭包</a></li>\n</ul>"
  },
  {
    "id": 72,
    "title": "主的道是完全的",
    "labels": "观点与感想",
    "created_at": "2019-09-25T05:05:07Z",
    "updated_at": "2019-12-30T04:41:29Z",
    "body_html": "<h2>前言</h2>\n<p>主的道是完全的，主的话语是炼静的，主的道是两刃的剑。</p>\n<p>知道这些真理是让我们明白主的心意，晓得主的旨意如何，而不是我们任意妄为，在经寻找支持自己作为的证据。</p>\n<h2>圣经事例</h2>\n<h3>1. 耶稣受试探</h3>\n<blockquote>\n<p>撒旦用经上的话试探耶稣，耶稣靠经上的话语识破</p>\n</blockquote>\n<p><code>1</code> 当时，耶稣被圣灵引到旷野，受魔鬼的试探。<br>\n<code>2</code> 他禁食四十昼夜，后来就饿了。<br>\n<code>3</code> 那试探人的进前来对他说，你若是神的儿子，可以吩咐这些石头变成食物。<br>\n<code>4</code> 耶稣却回答说，经上记着说，人活着，不是单靠食物，乃是靠神口里所出的一切话。<br>\n<code>5</code> 魔鬼就带他进了圣城，叫他站在殿顶上，（顶原文作翅）<br>\n<code>6</code> 对他说，你若是神的儿子，可以跳下去。因为经上记着说，主要为你吩咐他的使者，用手托着你，免得你的脚碰在石头上。<br>\n<code>7</code> 耶稣对他说，经上又记着说，不可试探主你的神。<br>\n<code>8</code> 魔鬼又带他上了一座最高的山，将世上的万国，与万国的荣华，都指给他看，<br>\n<code>9</code>  对他说，你若俯伏拜我，我就把这一切都赐给你。<br>\n<code>10</code> 耶稣说，撒但退去吧。（撒但就是抵挡的意思，乃魔鬼的别名）因为经上记着说，当拜主你的神，单要事奉他。<br>\n<code>11</code> 于是魔鬼离了耶稣，有天使来伺候他。</p>\n<blockquote>\n<p>【马太福音 4：1-11】</p>\n</blockquote>\n<h3>2.  不可论断人</h3>\n<blockquote>\n<p>在关于可做不可做的事情上，不讲绝对，各人按信心大小而行，只是不要绊倒肢体</p>\n</blockquote>\n<p><code>1</code> 信心软弱的，你们要接纳，但不要辩论所疑惑的事。<br>\n<code>2</code> 有人信百物都可吃。但那软弱的，只吃蔬菜。<br>\n<code>3</code> 吃的人不可轻看不吃的人。不吃的人不可论断吃的人。因为神已经收纳他了。<br>\n<code>4</code> 你是谁，竟论断别人的仆人呢？他或站住，或跌倒，自有他的主人在。而且他也必要站住。因为主能使他站住。<br>\n<code>5</code> 有人看这日比那日强，有人看日日都是一样。只是各人心里要意见坚定。<br>\n<code>6</code> 守日的人，是为主守的。吃的人，是为主吃的，因他感谢神。不吃的人，是为主不吃的，也感谢神。</p>\n<blockquote>\n<p>【罗马书 14：1-6】</p>\n</blockquote>\n<h3>3. 婚姻的问题</h3>\n<blockquote>\n<p>众人只以为信与不信原不相配，保罗却坚固夫妻中有一方不信的肢体</p>\n</blockquote>\n<p><code>12</code> 我对其余的人说，不是主说，倘若某弟兄有不信的妻子，妻子也情愿和他同住，他就不要离弃妻子。<br>\n<code>13</code> 妻子有不信的丈夫，丈夫也情愿和她同住，她就不要离弃丈夫。<br>\n<code>14</code> 因为不信的丈夫，就因着妻子成了圣洁。并且不信的妻子，就因着丈夫成了圣洁。（丈夫原文作弟兄）不然，你们的儿女就不洁净。但如今他们是圣洁的了。<br>\n<code>15</code> 倘若那不信的人要离去，就由他离去吧。无论是弟兄，是姐妹，遇着这样的事，都不必拘束。神召我们原是要我们和睦。<br>\n<code>16</code> 你这作妻子的，怎么知道不能救你的丈夫呢？你这作丈夫的，怎么知道不能救你的妻子呢？<br>\n<code>17</code> 只要照主所分给各人的，和神所召各人的而行。我吩咐各教会都是这样。</p>\n<blockquote>\n<p>【哥林多前书 7：12-17】</p>\n</blockquote>\n<h3>其他</h3>\n<ul>\n<li>大卫吃陈设饼</li>\n<li>耶稣在安息日治病</li>\n</ul>\n<h2>结论</h2>\n<p>我们该怎样做？</p>\n<ul>\n<li>凡事我都可行。但不都有益处。凡事我都可行，但无论那一件，我总不受他的辖制。 <code>[哥林多前书 6：12]</code></li>\n<li>凡事都可行。但不都有益处。凡事都可行。但不都造就人。无论何人，不要求自己的益处，乃要求别人的益处。<code>[哥林多前书 10：23-24]</code></li>\n<li>不绊倒弟兄\n<ul>\n<li>不拘是犹太人，是希利尼人，是神的教会，你们都不要使他跌倒。就好像我凡事都叫众人喜欢，不求自己的益处，只求众人的益处，叫他们得救。<code>[哥林多前书 10：32-33]</code></li>\n<li>无论是吃肉，是喝酒，是什么别的事，叫弟兄跌倒，一概不作才好。你有信心，就当在神面前守着。人在自己以为可行的事上，能不自责，就有福了。若有疑心而吃的，就必有罪。因为他吃，不是出于信心。凡不出于信心的都是罪。 <code>[罗马书 14：21-23]</code></li>\n</ul>\n</li>\n<li>撒母耳说，耶和华喜悦燔祭和平安祭，岂如喜悦人听从他的话呢？听命胜于献祭。顺从胜于公羊的脂油。  <code>[撒母耳记上 15：22]</code></li>\n</ul>"
  },
  {
    "id": 71,
    "title": "资中筠：谈谈爱国",
    "labels": "语思",
    "created_at": "2019-09-24T08:12:06Z",
    "updated_at": "2019-09-24T08:12:06Z",
    "body_html": "<p>大家好。我先抱歉，我知道一席一般都是站着讲的，可是一个人站这么长时间还没有扶手，我不太可能，所以我就要求坐着讲，请大家谅解。刚才介绍片上头说我今年81岁，那是老的，我今年87岁了。</p>\n<p>今天这个演讲，他们说讲什么呢，我说选了几个题目。主办方说那么你就谈谈爱国吧，所以我就谈谈爱国。</p>\n<p>其实爱国这个事本来是不需要谈的，因为爱这个事本来是一种自发的感情，你爱家庭，爱父母，爱亲人，然后爱自己的国家。这个不是一个人家强迫的事，也不是道德问题，实际上也不是政治问题，所以我觉得本来是不需要讲的。</p>\n<p>但是你们也看到，我围绕着爱国这个课题，二十多年来写了很多文章。</p>\n<p>为什么老要思考这个问题？其原因就是现在我常常碰到一些以爱国为名的事，实际上是祸国殃民的。</p>\n<p>我就觉得近代中国人，将近二百年来为了这个爱国纠结得不得了，而且有很多抛头颅洒热血的牺牲。这个牺牲不是说跟外国人打仗牺牲——那是哪个国家都有的，很正常的。中国人的这个爱国的牺牲是指在自己国内，很多人为了爱国坐牢、受到迫害、牺牲，所以中国人的爱国是一个很特殊的情况。</p>\n<p>而且一直到今天，常常有不同的意见的，忽然就被骂成汉奸了，汉奸这个名词就变成了国骂了——凡是我不喜欢的人，我觉得他的意见跟我不一样，特别是在网络时代，一骂就可以一大片。这也是中国特色，而且是现在的特色。所以我觉得这个问题还是值得讲一讲。</p>\n<p>另外我觉得像我这样年龄的人，经历了这么多，比较有资格讲什么叫作真正的爱国。</p>\n<p>因为我是1930年生的，我生下来的第二年，1931年就是九一八事变。所以等到我开始懂事的时候，在幼儿园学唱歌的时候，最早听到的歌、我最熟悉的歌，就是《我的家在松花江上》。</p>\n<p>从小学到中学，从南方到北方，我生在南方，后来到北方，大家都在唱《我的家在松花江上》。所以这个是我从一懂事开始就刻骨铭心的一个记忆。</p>\n<p>等到我上小学的时候就是卢沟桥事变。我的小学校长是真的被日本人派特务暗杀掉的。我们的学校那时候是在英租界——在太平洋战争之前，日本的势力是进不了租界的，所以他不能够堂而皇之地进来占领我们的学校，这不可能。</p>\n<p>那时候有一个伪教育局，其实是中国人在办的，就叫我们的校长换教科书。因为教科书里头有许多爱国，抗战——那时候还不一定抗日，就是反对帝国主义这样的一些内容。他就坚决拒绝。所以有一天他们就派两个特务混进来，在散步的时候把他给杀掉了。</p>\n<p>我到抗战胜利的时候才上高一、高二，我那时候15岁，1945年嘛，因此我没有机会去参加抗日。但是比我高几个班次的，比我年纪大一点的，我们的亲戚朋友里头很多都是辍学抗日去了。</p>\n<p>那个时候我们从小就知道，比如说念历史都知道班超的投笔从戎，投笔从戎那时候在学生里头是很普遍的——不念书了，我去抗日了。</p>\n<p>一个小故事：我家里头认识的，跟我们家来往很多，我父亲的一个好朋友，他们家的孩子很多，有一个我们管她叫聂家大姐姐，我上小学的时候她上高三。有一天，她的母亲就跑来找我母亲，哭着说，她的女儿逃掉了，给她留了一封信，说她要抗日去了。她说我不能接着在学校里头念书了，而且还拿走了她一个金戒指做盘缠。</p>\n<p>这个我印象非常深。然后我母亲还安慰她说，因为你教育好，所以你的孩子很爱国，你不要再伤心了。就这样子的一种氛围吧，是很平常的。后来我才知道这位大姐姐后来抗日就到延安去了。</p>\n<p>那个时候有一部分人要抗日就到重庆去了，有一部分人就到延安去了。在他们心目中大概区别也不是太大，反正到大后方抗日去了。所以说我从小感受到的和读书里头所知道就是这样的事情。</p>\n<p>还有我的上一辈的人们，现在叫作什么财富精英、知识精英，这些我的上一辈所知道的老师、家里认识的人，有的是留学回国的，有的已经是企业家什么的。那时候叫毁家纾难，比如像最有名的卢作孚，他把他的船全部贡献出来，供当时的政府大撤退。</p>\n<p>1939年卢作孚在汉口发表演讲</p>\n<p>当时我耳熏目染知道的都是这样的一些事情。所以什么叫作爱国，那时候很明确，没有什么纠结的。</p>\n<p>后来我到了清华，清华工学院里头，我认识航空系的学生，有人就说他当时为什么选择学航空呢，就是因为日本飞机炸。大家都知道重庆大轰炸，而我们是没有空军、没有飞机，所以他就下决心一定要学航空。这样的事情也是很多的。</p>\n<p>所以在我们这一代人里头，我觉得爱国这是不成问题的。也没有想过这是需要纠结的，还得要表明说我是爱国的、我可是怎么样的。</p>\n<p>到了太平洋战争之后，40年代，国民政府号召十万青年十万军，那个时候大学生好多好多都去参军了。后来因为那些大学生有的懂外文的比较多，很多都在盟军里头做翻译官。这个翻译官在后来的政治运动里头变成了一个历史问题了。</p>\n<p>当时是这样的情况，所以我觉得我也有资格来谈爱国的问题。</p>\n<p>首先，爱国有一个问题是什么是国家。国家这个理论非常复杂，国家的历史的形成也是非常复杂的，学术界也有不少的争论，所以我今天不可能从学术上来讲什么是国家。</p>\n<p>比较经典的著作，比如说洛克的《政府论》，论政府是怎么起来的——因为国家跟政府是分不开的，没有一个是没有政府的国家。还有恩格斯的《家庭、私有制和国家的起源》，这算是经典著作。</p>\n<p>最近我看到的对国家有比较深刻研究的学术著作是复旦大学的葛兆光先生，他有文章，也有书。还有许纪霖先生最近有一本书叫《家国天下》。</p>\n<p>我觉得今天是不可能在这个方面展开，但是我自己有这么一个概念上的认识。</p>\n<p>在现代国家之前，最早开始有一种族群观念，也就是放大了的家族，然后变成一个部落。部落之间有利益的冲突，大家团结起来，我维护我这个部落的利益，你维护你那个部落的利益，所以中国过去两个村庄之间的械斗有很多。不光是中国，从前欧洲的贵族像罗密欧与朱丽叶它也是家族的世仇。那时候还没有现代国家这个观念。</p>\n<p>第一层的观念是说你爱国爱什么。实际上那是家乡的观念，我是生于斯长于斯，我的故乡，这个故乡放大了的就是我的故国。我无论走到什么地方，总是怀念眷恋有这么一份感情，我总是想着我这个故乡山水，不管这个国家小或大还是怎样。这跟政治也没有多大的关系。</p>\n<p>第二层的观念是跟文化、历史、文明有关系了。中国人对于所谓中国，一来就说我们五千年的文明或者三千年的文明，说我们是一个文明古国。这个观念就比家乡乡土的观念要进一步。</p>\n<p>假如是在英文里头，第一个乡土观念是country，第二个观念对应的是nation，就是成为一个民族了。但是中国是多民族国家，所以又不是一个单纯的民族，所以就有这么一个共同体这样的观念。</p>\n<p>当我们讲到爱国的时候，实际上我们最刻骨铭心的爱的是这个nation，就是我们有多么光辉灿烂的文明，我们有这样的古国。所以当时抗日战争的时候有一种危机感：要亡国灭种。</p>\n<p>怎么会灭种呢？因为也不是像希特勒杀光犹太人那种灭种，日本还不是这样的一个政策。这里的灭种就是灭文化，也就是说中国人已经不是中国了。</p>\n<p>过去外族入侵汉族的时候，汉族没有这个危机感，因为把他给同化掉了，他们都汉化了。原来元朝清朝都进来，当时也打得很惨烈，但是最后我们感觉到这个民族文化并没有灭掉。</p>\n<p>但是等到鸦片战争之后所发生的危机，是外来的一个整个跟我们文明和文化完全不一样的，而且比我们要先进得多、强大得多，我抵挡不住了。</p>\n<p>这样的一种情况之下就感觉到我们这么伟大的一个民族，怎么会败于这些个，也不能管它叫野蛮民族，过去都说外头的都算野蛮民族，但是他们也不野蛮，而且文明程度有的地方要高得多。所以这个是一个最大的危机。</p>\n<p>我们讲到爱国常常想到的，我觉得应该是nation这样一个观念。所以在西南联大有一位历史教授，他说过这样一句话，我经常引用并且我一直记得很牢的，他就说，不读中国史不知道中国的伟大，不读西洋史不知道中国的落后。</p>\n<p>这两句话我觉得非常精辟。你不能因为你觉得你很伟大，我的历史文明怎么怎么样就不承认你落后了。现在，正因为你落后了你需要急起直追。</p>\n<p>第三层意思的国家往往是跟政权联系在一起的，所以这个在英文就叫state。过去是朝廷，皇族，这个朝廷代表这个国家，比如大清王朝、大明王朝，现在的历史剧经常讲这些。</p>\n<p>当时的人想到所谓国家，其实那个时候没有真正的国家观念，只有朝廷的观念。所以那个时候的爱国实际上是忠君，就是忠于这个家族。宋朝的人忠于赵家，明朝的人忠于朱家。这个是一个忠君的观念，还不是一个真正的爱国的观念。</p>\n<p>那个时候国家的界线都不清楚，你这个边疆在什么地方，这个朝代它是这么一个边疆，那个朝代忽然跟这边的少数民族是一个什么样的关系。这个是很不一样的。</p>\n<p>所以那时候连国土的观念都不是很清楚的，但是朝廷的观念非常清楚，忠君的观念是很清楚的。所以过去在有现代国家之前，所谓的爱国实际上是忠君。</p>\n<p>比如说辛弃疾是爱国词人，他心心念念都是在想他在南宋应该收复北宋，原来北方的疆土被异族占领了，我们应该收复。所以是“了却君王天下事，赢得生前身后名”——把北方收复了还是了却君王天下事。</p>\n<p>岳飞的《满江红》大家都唱得很熟。他其实是说“待从头，收拾旧山河，朝天阙”——他要把徽宗迎回来。徽宗不是被金人给俘虏了吗，他最重要的是要把那个皇帝迎回来，这个还使得他送了命，因为当时的高宗已经不希望徽宗回来了。这是另外一回事。</p>\n<p>所以那个时候中国人的爱国的观念是没有现代国家的观念的，有现代国家的观念是从鸦片战争以后开始的。因为欧洲的民族国家是从中世纪以后慢慢发展起来，它们已经有了成熟的国家的观念，有边界观念，有领土观念，主权、领土、国际法、外交。</p>\n<p>这一套东西在鸦片战争之前，中国的朝廷是不太清楚的，所以才惹出好多好多麻烦来。包括礼仪，他觉得这个礼仪比经济甚至于比领土都重要，你跪不跪这个事太重要了。人家不这么想。所以从这个观念转变过来就有了现代国家的观念。</p>\n<p>这之后的爱国是怎么个爱法呢？就像李鸿章所说的，遇到了三千年未见之大变局。他说中国三千年改朝换代不知道多少次，也没有碰上过这样的事。</p>\n<p>所以从这之后中国有了现代国家的观念，而这个现代国家必须是跟改革联系在一起的，跟自强联系在一起，因此就要吸收外来文化。这些都是过去中国人从来没有过的，只有“以夏变夷”，哪有“以夷变夏”这个说法。</p>\n<p>当时一批比较先进的爱国者就已经感觉到需要吸收外来的文化改造现在的中国。其实还不到晚清，明末的时候，比如说徐光启，徐光启就加入了天主教，他跟利玛窦在一起翻译了《几何原理》。他就已经发现西方的科学、外国来的科学是比当时中国发达的，他已经有这个观念了。那时候已经是明末了。</p>\n<p>当然后来满清打进来了之后又一个轮回。到了晚清这个时候，很多士大夫、念过书的人都已经开始觉醒了。当然觉醒的程度不一样，可是觉得非改不可了，这一点是一样的。</p>\n<p>于是他们的认识就先从外国人为什么会打败我们，因为船坚炮利、军火比我们强，所以赶快买军火开始。然后发现军火强主要是因为它经济能力强，工业化水平高。于是像张之洞、李鸿章他们这批人就要发展工业，造船、造兵器、造兵工厂。</p>\n<p>它经济为什么发达，因为它制度先进。那个制度能够发挥各种人的积极性，工匠的地位也比较高。中国传统的教育只有文科，念经典的这些士大夫是有地位的，其他的都是没地位的。这个整个的观念就需要改变了。</p>\n<p>一直到像郭嵩焘他们这批人出国去考察，回来以后发现人家文化文明都比我们高。他们看我们像看四夷一样，我们变成蛮夷了，他们变成中夏了。这个观念是完全颠覆掉了。</p>\n<p>这是最先进的一批人出国以后发现的，回来之后就觉得非改不可。所以严复就大量地翻译外国的著作，就是为了开启民智。从那个时候以后，教育救国、实业救国、科学救国，各种各样就开始了。</p>\n<p>凡是他办一件事情都想的是救国，但是要救国就必须改造，必须办这些个事情。到最后是变成革命救国了，就革命了。</p>\n<p>所以这样下来的话，晚清以后中国人怎么样才算爱国？这里头有很多很多的变化。忠君是不是还继续算作爱国？晚清的士大夫里头有不同的看法。</p>\n<p>一种说变革就是为了保清，让清朝能够发挥出来新的力量。它已经衰朽了，给它注入新的力量，还是让清朝维持下去。相当多的人还是采取这样的一种办法，所以也有帝派和后派之争。有人觉得光绪是可以支持改良的，慈禧是属于保守的，等等。</p>\n<p>再到后来就觉得这个王朝是要不得了，根本没希望了。但是它有没有希望不在于别的人认为它有没有希望，在于它自己肯不肯改革。所以在八国联军之后——八国联军的事情我待会回来再稍微讲一下。八国联军打进来之后朝廷都跑了。他们还用一个词，叫“太后西狩”，打猎去了，一下子从北京跑到西安。</p>\n<p>慈禧痛定思痛，忽然感觉到还是得改。所以等到回到北京以后，她有一个举措，就是她了解到原来连那个俄罗斯都在搞立宪了，我们也得搞君主立宪。</p>\n<p>然后她就派五大臣出国考察国外的宪政是怎么样的，考察回来之后人家提出了很多改革的方案。结果她还是犹豫：第一，已经太晚了。第二，最重要的，她还是放不掉原来皇亲国戚的既得利益，所以她最核心的东西改不了。</p>\n<p>宪政最重要的核心就是你放弃你的权力，你得接受一套制度的监督，她这个核心权力不能够放弃的话等于不能改革。当然那个时候好多好多改革派已经等不及了，所以她最后一次改革失败是她自己没有决心真的改革。最后辛亥革命就来了，这些我就不用多讲了。</p>\n<p>但是这个里头就有一个爱国还是爱朝廷的问题。当时对于保大清王朝的来说，这是爱国，爱大清王朝。但是对于搞革命的，像孙中山这一批人而言，我要爱这个中国的话，我非得把大清给灭了不可，我才能够建立一个现代化的中国，我才能够保住我们的nation，但是我得颠覆你这个state。这是一个很大的区别。</p>\n<p>我刚才讲到了爱国的问题，里头就有一个义和团的问题。实际上清朝真正的完全衰败是在义和团事件之后。义和团的事情大家也都知道，就是打教堂、杀洋、扶清灭洋。原来它是反清复明的，因为受到了清朝某些官员的安抚，就把它给招安了，它就变成了扶清灭洋。</p>\n<p>当然洋人当时已经是在不平等条约之下来中国的，他一定不会是很平等对待中国人，这一点是肯定的。因此他们心里有所不平，但是采取的办法是砸教堂，杀掉传教士。以至于后来发展到去攻打外国使馆，见着洋人就杀。</p>\n<p>但是其实杀的最多的是中国人，比如说信教的教徒，卖洋货的商家，简直是滥杀了。这个闹得是非常厉害。这种也不叫农民起义，因为当时山东大旱，大家非常急躁，在这种情况之下也不能种地了，好多游民就出来。</p>\n<p>中国这种事很多。大家组织起来弄个一个什么教，然后有一个自称为大哥的人说我是刀枪不入怎么怎么样。在这种情况下就看地方官怎么处置了。</p>\n<p>最开始的时候，中国的皇家统治者向来见着民间的团体是镇压的，他是不允许民间有自己的团体的。但是他忽然发现他们是打洋人的，觉得借他们的力量杀杀洋人的威风也挺好的，所以就把“剿”变成了“抚”。这样一来朝廷都支持它，它这个势力就越来越大，以至于滥杀。</p>\n<p>在这种情况之下当然外国就抗议，并且要派兵来了。说你连我的使馆、外交官、教堂都保不了，那我自己派兵来保护。他们就以这个为借口。</p>\n<p>这种情况之下当然很危急了，朝廷就分两派。一派主张赶快镇压义和团，不能够让他们胡来；并且跟洋人讲和，说我现在可以保护你的使馆，然后我们怎么怎么样。一派就主张说是民气可用，干脆用他们跟洋人斗就行了，支持它。</p>\n<p>结果主战派胜利了。而死谏的那几个大臣就牺牲了，有五个大臣被杀，因为他一天上好几道奏折说绝对不可以干这种事情，说自古以来，连春秋时代都是两国相争不斩来使的，绝对不能够围攻外国使馆，义和团必须镇压。</p>\n<p>这里头就有一个问题：谁爱国？谁卖国？谁祸国？那些个主张不要杀洋人的人，他们是爱国还是汉奸呢？那个时候另外一派人说他们是汉奸。</p>\n<p>还是说义和团和支持义和团的人是爱国呢？因为我们的历史教科书常常还是把义和团作为一种爱国运动来宣传，而且只是说他们用的方法不对。这个就是一个很大的问题。</p>\n<p>当时慈禧居然向十一国宣战，跟他们说我保不了你们，你们赶快撤。然后完全放纵义和团进北京，从山东跑到北京来乱杀一气。</p>\n<p>在这种情况下，另外一种人，李鸿章、刘坤一，还有好几个，两广总督、湖广总督、两江总督，这些总督们在一起说抗命。他们得出了一个结论：乱命不从。从前圣旨下来之后你怎么能够不从呢，那是要杀头的。</p>\n<p>结果他们联合起来，搞了一个“东南互保”，跟当地的洋人，那些个领馆的代表或者是外国人谈判说，在我们所在的辖区，我保证你的安全，但是你也保证你不派兵进来，你不能够来祸害我这块地方。</p>\n<p>所谓东南是长江以南，甚至于是淮河以南一直到广东，是中国人口最密，经济最发达、最繁荣的地区。结果他们这一“东南互保”保住了。所以那个被蹂躏的，先是义和团大开杀戒、后来八国联军进来的也是在北方，没有祸害到这一大片土地。</p>\n<p>在当时的情况下，这个做法，你算它是爱国呢还是算什么？我觉得应该算是很大的爱国举措。而且当时晚清的这些个大臣，居然还能跳出愚忠这样一个范畴，想出这么一个好主意来，我觉得是立了很大的功。结果中国这么大片的土地没有受到影响，这个是所谓爱国。</p>\n<p>但是在不同的角度来看的话，可以说他们是卖国。居然中央的命令可以不听，而且还自己跟洋人去谈判。上面已经是宣战了，你这儿还去讲和，这个不是很不对吗？</p>\n<p>所以对于什么是爱国，什么是祸国，不论是出发点还是从结果来看，如果从一个历史回顾的比较远距离来看的话，我觉得应该看得很清楚。</p>\n<p>可是现在实际上还有人看不清楚。还是觉得你只要对洋人硬、你只要主张杀他们就是爱国，你不主张杀他们、你主张跟他讲和就是卖国。那就没办法了。</p>\n<p>后来牺牲的那个五大臣，半年之后朝廷就给他们平反，说是官复原职。其实他们都死了，就给他们封号重新安葬。这个影响其实不仅仅是在朝廷，在老百姓里头一直把他们看成是二毛子，那个时候二毛子就跟汉奸差不多，或者叫汉奸，是替外国人办事的、为外国人说话的，一直到重新安葬的时候才说原来他们不是二毛子。</p>\n<p>这说明在老百姓里头就有这么一种情绪，觉得打洋人好得很。这种情绪实际上一直并没有完全消灭，每到一定的时候忽然就会出来的。</p>\n<p>还有一个就是说，你爱国还是爱民的问题。国家是干什么用的？是保护人民的，是保障人民用自己的力量能够求得生存和幸福的。如果以国家的名义剥夺人民的幸福或者是害民，那这个就不能够叫爱国。</p>\n<p>国是以民为本的。原来从孟子就说得很清楚，民为贵，社稷次之，君为轻。到现代的国家变成了人民共和国，人民的国家，那就更加应该是以民为本的。</p>\n<p>这个民不是一个抽象的人民。我们常常用抽象的人民来代替一个一个真正的人，说我这是为了人民，但是剥夺所有的活生生一个一个人的生存权，这个也是不对的。所以爱国首先是爱民。</p>\n<p>另外，我刚才讲了，爱国跟自强、跟变革、跟启蒙、跟社会进步有关系。我随便举一个例子，大概2001年我们跟美国有一次撞机事件，那个时候也是群情激昂，我正好在西安有一个讲座，在这个之前当然参观了秦始皇的兵马俑。</p>\n<p>当时在西安，很多人的这种情绪非常厉害。说我们西安当年秦朝在这儿这么伟大，这么强大的秦朝，你看这个兵马俑，光是这个墓就这么了不起，我们今天怎么这么受气呀。</p>\n<p>我说你要是活在秦朝的话，你想做哪一部分人？</p>\n<p>假如说做秦朝一般的老百姓，当时秦朝是“偶语者弃市”，它非常怕你造反，两个人在街上说悄悄话就可以把你给杀头的。还有行人侧目。什么叫作侧目？就是在路上互相看看，不敢说话的。这个当时是很厉害的。</p>\n<p>或者你愿意做那个被坑的儒，读书人，还是你愿意做一人之下万人之上的李斯？最后被腰斩。你愿意做秦始皇？秦始皇自己连死了都不敢发丧，后来尸首都臭了。</p>\n<p>你觉得在那个时候非常幸福，那是你想象中的。还有当时的兵马俑，兵马俑里头另外还有一个坑是没有挖的，为什么，里头全是白骨。做兵马俑的这些非常了不起的工匠，做完了之后都被活埋了，怕他们出去泄密。</p>\n<p>所以你愿意生在秦朝，你是想象你伟大得不得了。但是你生在秦朝你要做哪一部分人？我现在不是说从历史的角度讲秦朝到底在历史上有没有建树或者是怎么样，因为秦朝是特别短的，也是挨骂最多的。特别长朝代的就有很多人为它歌颂了，这个不去说它。</p>\n<p>但是常常中国人很容易想象我们过去多伟大，你先得想一想你要做哪一部分人。</p>\n<p>所以一个伟大的国家，一个真正现代的国家，应该是最大限度地使各个阶层、各种职业的人都能够得到幸福的这样一个国家。我们追求的是建立一个有平等的权利追求自己幸福的国家，而不是只是想象中我开疆拓土伟大得不得了。</p>\n<p>我们现在电视里头经常出现一个非常伟大的皇帝，一会儿是汉武帝，要么就是雍正，要么就是康熙，伟大得不得了。这个皇帝伟大得不得了，你得想想那个时候的老百姓，到底是哪一些阶层的老百姓觉得活得最舒服。</p>\n<p>所以我觉得我们的这个核心价值观，有24个字是吧，还是说得挺全的。我不知道是什么人起草的，但是它该有的都有了：民主、自由、平等、公正、法治、文明，还有一些。</p>\n<p>如果你不是这样的一个国家，你光有一个爱国，然后你要叫它富强。富强的富是什么，是政府财政富呢，还是老百姓富？再说强，军事很强，其他的你强不强？比如说你的文化强不强？你的教育水平强不强？你的创新能力强不强？</p>\n<p>所以我觉得设计这个核心价值观里头，它不光有爱国和富强，它包括了民主、自由、平等、公正、法治，还有文明。如果没有这些，你要是越来越野蛮，用野蛮的办法治国那就是不行的。</p>\n<p>我们爱一个什么样的国家？爱一个民主、自由、平等、公正、法治、文明的国家。我觉得我们的核心价值观设计得非常好，把这些都包括进去了。</p>\n<p>对于我今天要说的这个主题，什么叫作爱国，我觉得要好好体会这几个方面，如果没有这些个，那你爱一个什么样的国家？</p>\n<p>比如说希特勒纳粹的时候，国家曾经有一度非常非常强，能够闪电战打败那么多国家，哗一下，甚至于回过头来打苏联都一直能够打到莫斯科，多强啊。而且它开头的时候经济能力也是很强的，不然的话它支撑不了。但是它没有民主、法治、自由、平等、公正，它就长不了。</p>\n<p>日本军国主义当时也是以爱国来号召所有的民众，而且那些民众当时也真的自以为在爱国。甚至于你看那个神风队，连20岁都不到的年轻人开着飞机明明知道要去死就去撞了。这也是爱国。</p>\n<p>可是实际上对日本说起来，先不说对中国，对日本说起来它绝对是祸国——结果招来了两颗原子弹。这种爱国看得很清楚嘛。但是在当时那个时候，30年代、40年代的日本人，绝大多数可能就以为他这个就是爱国。所以我们对于爱国这个事是要弄得很清楚。</p>\n<p>另外我们有一句话叫作儿不嫌娘丑，就是说你非爱这个国不可，不管她多丑你都得爱她，因为她是你娘。这个我想想是有很大的问题。</p>\n<p>首先你觉得那个娘丑定了，凭什么你觉得她丑？我们这个大好河山多美丽呀，干吗说她是丑的呀？这个就不对。既然我们爱这个土地，我们就得爱护它，不让它变污染，不让这些水都变成臭水，想办法爱护这个土地。</p>\n<p>另外，假如这个娘丑的话，意思指的是比如说很落后，有很多不文明，那你就应该想办法改造她，让她变得文明。这个娘要生病了，你得想办法给她治病。你不能够说你就丑到底了我也得爱你。这个不对。</p>\n<p>你要觉得她哪些地方不美，你就想办法把她改美。这是可以改的，这个不是天生的，跟人不一样，人现在还能整容呢，你就得想办法改造她。而且说这个话就有点没底气，就是觉得自己还是丑的，只是让你别嫌弃就是了。我觉得这个是不对的。</p>\n<p>所以爱国是跟改造在一起的。在民国初年的时候或者是晚清，有一大批留学生出去以后都回来，就是想着你看，人家比我们美，我就得想办法来改造我们自己的国家。都是所谓“偷天火”，到外头去偷回来。</p>\n<p>但是在这个过程里头，因为这个比喻本身也不是太恰当，它要改造的时候就有一大堆既得利益者或者是保守派，要反对这种改造，所以这个改造很艰苦，有人要坐牢的。</p>\n<p>改到制度的时候，改到触动核心的利益的时候，这个利益是祸国殃民的利益，那些爱国志士们就要牺牲了。从晚清这一百多年来，有很多人为了爱国，为了要把这个国家变得更好而做出了牺牲。</p>\n<p>现在有人一天到晚骂中国知识分子，说他们软骨头，说中国知识分子怎么现在都好像不发声。我想到我看到过的一篇文章说，不要再骂中国知识分子了，世界上有哪一个国家的知识分子为了爱国而做出这么大的牺牲的？</p>\n<p>这个话也不是我第一个说，我看到这个也受到很大的启发。哪一次国家危难的时候，真正起来呼吁的、为人民鼓与呼的、为民间疾苦说话的，都是知识分子。</p>\n<p>所谓知识分子这个概念是比较宽泛的、比较不确定的，并不是说所有念过书的都算在内，有的是在体制内的，有的是在体制外的，像我刚才说晚清的这些士大夫们都是做官的。</p>\n<p>像我说的那五大臣，他们有一个传统，叫文死谏，文官死于给皇帝提意见，明明知道很可能要杀头的，他也非得说，因为国家安危在这儿。</p>\n<p>但是那个时候国家安危系于一个人，一个决策者的一念之间，所以他必须得说动他，他才能够做出正确的决定来，所以他必须冒死也得跟最高决策者辩论。这个是当时爱国志士的一种表现，是吧。</p>\n<p>所以说，我觉得那篇文章就说得挺对。不过我不知道他怎么算出来的，他说从比例上来讲，知识精英为爱国而牺牲的比例高于在战场上的士兵牺牲的比例。他是指从鸦片战争一直到现在。当然因为知识分子底数本来就很小，你一共就一千个人，牺牲一百个人就十分之一了，战场上的军队有好几百万人呢。所以他这个比例可能是这么算的。</p>\n<p>不管怎么样，我觉得他说的这个还是挺对的。就是说真正每一个时代站在最前沿的，为这个国家甘愿牺牲，或者是要为民间疾苦鼓与呼的，还是一批知识精英。</p>\n<p>而且本来应该是这样的。因为他既然在一个教育并不太发达的国家，他比别人多读了一些书，他多懂了一些道理，多了一些思考，他自然就应该有这样的担当。</p>\n<p>什么叫作担当呢？就是对于自己切身利益以外的事情的关心。孟子说一般老百姓无恒产就没有恒心，你必须让他有财产。他觉得老百姓应该有土地，然后他就有恒心，他就好好的。</p>\n<p>他说无恒产而有恒心者，惟士为能。这个士就是有担当的读书人。他自己也没财产，但是他还要为这个国家操心。他要操心的不是他自己的安危问题，不是他自己的温饱问题，而是整个超越他自己利益的。</p>\n<p>那么中国有没有这样一批爱国志士？我觉得完全有。一百年来就是这样来的，有好多人超越他自己。刚才我说的那位聂家大姐姐，他们家很有钱，房子很大，但是她就跑了，把这一些都抛掉了，她去抗战去了。</p>\n<p>那个十万青年十万军，参军的大多数是富家子弟，或者至少是家里比较富裕的，因为那时候上大学的就不多嘛。早期的共产党很多家庭出身也是地主或者是资本家，他就抛弃了家庭跑去革命去了。因为他信服这个道理，认为这是能够救国的。</p>\n<p>所以作为士，作为知识分子的爱国，他是要抛弃自己的切身的利益的想法，然后为更大的一个范围的人群的利益来着想。我觉得凡是有事情的时候应该都是这样的。</p>\n<p>当然有的时候人数多，有的时候人数少，有的时候有一个趋势就越来越不发言了，也有这种情况。所以我觉得说知识分子最爱国，这话没错，我是比较认同的。</p>\n<p>我自己所切身接触的各种各样的人，你比如说在民国初期的时候，日本留学生最多。出去留学的人，一部分人比如说庚款到美国去留学，相当多的人是去日本留学，因为最便宜、最近、最容易去。</p>\n<p>可是等到抗日战争的时候，绝大部分的日本留学生都是抗日的。当然其中也有做汉奸的，而且日本人重点就是要去找那些日本留学生来为他们服务。</p>\n<p>比如最有名的一个，像周佛海，他原来是共产党的发起人之一。后来到了汪伪政府里头去，最后被国民政府抓起来，在监狱里头死掉了。他就是一个日本留学生。但是绝大部分的日本留学生在跟日本打仗的时候绝对不会站在日本这一边的，这个是很清楚的。</p>\n<p>现在说我的时间已经到了，但是我还想借几分钟说一下全球化的问题。</p>\n<p>因为在全球化的今天，对于国家的观念也有一些变化，其中有一个变化是很多利害不是在一国之内了。不一定说你占便宜了人家就吃亏，或者你吃亏了人家就一定占便宜，互利的东西特别多。这个就不用讲国际贸易了，比如像环保或者是缉毒。</p>\n<p>比如说公益慈善这个问题。我们常常有一个观念，比如说外国基金会到中国来做一些公益事业，说它是来和平演变的。什么叫作和平演变？意思是说你要是拿了它的钱，你就相信西方价值观了还是怎么样呢？或者是你就会怎么样了呢？我就怎么也想不出来。</p>\n<p>我说我们是必须要演变的，这个演变当然是和平好，而不应该是暴力演变好。一个国家要前进你总要演变。外国的基金会来做了一些事情，除非它是来买情报的，那是另外一回事，那不是基金会的事，是外国情报机关的事，那是两个概念。所以我觉得这种稀里糊涂的概念，常常在很多人的脑子里头是搞不清楚的。</p>\n<p>但是现在还有一个很大的问题倒是真的问题，就是现在不管你口号喊得多响，但是很多人都可以用脚投票。</p>\n<p>现在移民非常之多。过去的民族资产阶级，他基本上是以发展中国的经济为己任的，他绝对不会想到把他的资产大批移到国外去。但是现在是可以的，现在财富是可以移的，他觉得在这儿不够安全了他就到外头去了。</p>\n<p>知识精英过去绝大部分都是回来，要改造我们自己的国家。现在看看，改造太难了，我就走了。而且我的专业在国外有更加好的发展，比如说杨振宁，他要是留在中国，他不可能有这样的成就。这是肯定的。</p>\n<p>所以在这种情况下，大批的财富和精英都可以自由流到外国去。这个完全无可非议，我不是说用道德来说你这个就不爱国，但是其结果就是使得改造中国的力量会比以前少得多了。过去那些精英都留在中国，哪怕牺牲掉脑袋他也要改造中国。现在已经缺乏这个可能，已经有了另外的出路了。</p>\n<p>在这种情况下，我觉得这也是中国所遇到的一个爱国危机，这个才是真正的爱国危机。</p>\n<p>因为这是一个无可厚非的事情，而且是在全球化的今天大家完全有权利可以做的。你也可以流来，他也可以流去。但人家不流来，或者流来的是另外一种情况。</p>\n<p>我们的精英和最有本事的人、最有志趣的人都流出去，这样的话就是一个很大的损失。你输出国是损失，输入国就是收获，这种国际竞争是无形的。我觉得这是现在在全球化的情况下一个让人可以深思的问题。</p>\n<p>比如说，我在美国我就觉得美国人对于改造自己的国家特别地积极。每一个人，不是每一个人吧，我碰到的大概也是受过一些教育或者是自己事业上有所成功的人，都是觉得美国这个地方不对那个地方不对，应该改造。</p>\n<p>为什么呢？我觉得因为他们没处跑，最后他只能在美国待着。别的国家的人都往他那儿去，他要跑也跑不到别的地方去，别的地方也没他那更好一点吧，所以他就要以最大的力量改造自己的国家。</p>\n<p>你看美国所有的报纸，各种各样的媒体天天在那儿讲美国这个不对那个不对，对政府提出各种各样的批评，整天地暴露它这个社会里头的一些不好的事情。</p>\n<p>我记得有一个美国教授是非常非常反对川普的，川普上台之前，他说我绝对不能让他当我的总统，他要是当了总统的话我就要移民了。结果他到现在也没移民。</p>\n<p>他还是好好地在那儿待着 。他如果要是在那儿待着，一表示不满把他镇压下去了，可能他就要跑了。他既然能够天天骂他，他还可以在那儿待下去。</p>\n<p>所以我提出这些问题来，我也没有结论。就是在全球化的今天，这个爱国的问题又产生了新的问题。</p>\n<p>好，我今天先讲到这儿。</p>"
  },
  {
    "id": 70,
    "title": "阮一峰：观点与感想",
    "labels": "语思",
    "created_at": "2019-09-24T07:43:48Z",
    "updated_at": "2019-09-24T07:56:29Z",
    "body_html": "<h2>目录</h2>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2007/11/what_is_the_people_s_democratic_dictatorship.html\" rel=\"nofollow\">什么是\"人民民主专政\"？</a></li>\n</ul>"
  },
  {
    "id": 69,
    "title": "川端康成 《伊豆的舞女》",
    "labels": "文学爱好者",
    "created_at": "2019-09-23T09:21:35Z",
    "updated_at": "2019-12-03T07:19:31Z",
    "body_html": "<h2>目录</h2>\n<ul>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/69#issuecomment-534025593\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/69/hovercard\">第一章</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/69#issuecomment-534028893\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/69/hovercard\">第二章</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/69#issuecomment-534029158\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/69/hovercard\">第三章</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/69#issuecomment-534029363\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/69/hovercard\">第四章</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/69#issuecomment-534029530\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/69/hovercard\">第五章</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/69#issuecomment-534029730\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/69/hovercard\">第六章</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/69#issuecomment-534029899\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/69/hovercard\">第七章</a></li>\n</ul>"
  },
  {
    "id": 68,
    "title": "陈秋实的演讲稿",
    "labels": "语思",
    "created_at": "2019-09-23T03:39:49Z",
    "updated_at": "2019-12-03T07:19:45Z",
    "body_html": "<ul>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/68#issuecomment-533951318\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/68/hovercard\">语言的力量</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/68#issuecomment-533952036\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/68/hovercard\">法制中国</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/68#issuecomment-533953356\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/68/hovercard\">大国风范</a></li>\n</ul>"
  },
  {
    "id": 67,
    "title": "反义谚语",
    "labels": "杂物间",
    "created_at": "2019-09-22T08:20:32Z",
    "updated_at": "2019-10-10T03:45:59Z",
    "body_html": "<h2>前言</h2>\n<p>几乎每句谚语都有一句与其意思相反，并且同样富有机智的谚语和它相对。 ——  乔治·桑塔亚那</p>\n<h2>强相关</h2>\n<ul>\n<li>近水楼台先得月 &amp;&amp; 肥水不流外人田  <code>VS</code> 兔子不吃窝边草</li>\n<li>人不犯我，我不犯人 <code>VS</code> 先下手为强，后下手遭殃!</li>\n<li>宰相肚里能撑船；<code>VS</code> 有仇不报非君子!</li>\n<li>亡羊补牢，未为迟也 <code>VS</code>  亡羊补牢，为时已晚</li>\n<li>男子汉大丈夫，宁死不屈 &amp;&amp; 士可杀，不可辱 <code>VS</code> 男子汉大丈夫，能屈能伸!</li>\n<li>三个臭皮匠，胜过诸葛亮；<code>VS</code> 一个和尚挑水喝，两个和尚抬水喝，三个和尚没水喝！</li>\n<li>人无远虑，必有近忧 <code>VS</code> 及时行乐 &amp;&amp; 今朝有酒今朝醉！</li>\n<li>家事国事天下事，事事关心 <code>VS</code> 多管闲事，不谈国事</li>\n<li>路不平有人铲，事不平有人管  &amp;&amp; 该出手时就出手 <code>VS</code>  自家扫取门前雪，莫管他人屋上霜！</li>\n<li>滴水之恩当涌泉相报！ &amp;&amp; 苟富贵，勿相忘<code>VS</code> 人心隔肚皮 &amp;&amp; 过河拆桥、卸磨杀驴、兔死狗烹、鸟尽弓藏！</li>\n<li>己所不欲，勿施于人 <code>VS</code> 顺我者昌，逆我者亡！</li>\n<li>量小非君子；<code>VS</code> 无毒不丈夫！</li>\n<li>善有善报，恶有恶报；<code>VS</code> 人善被人欺，马善被人骑！</li>\n<li>一分耕耘、一分收获；<code>VS</code> 人无横财不富、马无夜草不肥！</li>\n<li>青取之于蓝而胜于蓝；<code>VS</code> 姜还是老的辣！</li>\n<li>金钱不是万能的；<code>VS</code> 有钱能使鬼推磨！</li>\n<li>人不可貌相，海水不可斗量；<code>VS</code> 人靠衣裳马靠鞍！　</li>\n<li>宁可玉碎，不能瓦全；<code>VS</code> 留得青山在，不怕没柴烧！</li>\n<li>买卖不成仁义在；<code>VS</code> 亲兄弟，明算帐!</li>\n<li>礼轻情谊重；<code>VS</code> 礼多人不怪!</li>\n<li>在天愿作比翼鸟，在地愿为连理枝；<code>VS</code> 夫妻本是同林鸟，大难来时各自飞！</li>\n<li>小心驶得万年船；<code>VS</code> 撑死胆大的，饿死胆小的</li>\n<li>小不忍则乱大谋；<code>VS</code> 不蒸馒头蒸(争)口气！</li>\n<li>大义灭亲 <code>VS</code> 六亲不认</li>\n<li>人人为我，我为人人；<code>VS</code> 人不为己，天诛地灭！</li>\n<li>天下没有不散的宴席  <code>VS</code>人生何处不相逢</li>\n<li>忍一时风平浪静 <code>VS</code> 是可忍孰不可忍</li>\n<li>少数服从多数 <code>VS</code>  真理总是掌握在少数人手中</li>\n<li>恶人先告状 <code>VS</code> 出力不讨好</li>\n<li>人贫志短，马瘦毛长 <code>VS</code> 三十年河东，三十年河西</li>\n</ul>\n<h2>弱相关</h2>\n<ul>\n<li>出淤泥而不染，濯清涟而不妖；`VS 近朱者赤，近墨者黑！</li>\n<li>明人不做暗事 <code>VS</code> 兵不厌诈！</li>\n<li>得饶人处且饶人；<code>VS</code> 纵虎归山，后患无穷！</li>\n<li>天无绝人之路；<code>VS</code> 天网恢恢，疏而不漏！</li>\n<li>鞋合不合适只有脚知道 <code>VS</code> 当局者迷旁观者清</li>\n<li>知无不言，言无不尽 <code>VS</code> 交浅勿言深，沉默是金</li>\n<li>人多力量大 &amp;&amp; 众人拾柴火焰高 <code>VS</code> 人多嘴杂!</li>\n<li>一个好汉三个帮 <code>VS</code> 靠人不如靠己!</li>\n<li>清者自清 &amp;&amp; 身正不怕影子斜 <code>VS</code> 苍蝇不叮无缝的蛋</li>\n</ul>\n<h2>寻找中</h2>\n<ul>\n<li>嫁鸡随鸡，嫁狗随狗</li>\n<li>子不嫌母丑，狗不嫌家贫</li>\n</ul>"
  },
  {
    "id": 66,
    "title": "鲁迅《狂人日记》",
    "labels": "文学爱好者",
    "created_at": "2019-09-17T16:59:11Z",
    "updated_at": "2019-12-30T04:42:07Z",
    "body_html": "<p>某君昆仲，今隐其名，皆余昔日在中学校时良友;分隔多年，消息渐阙。日前偶闻其一大病;适归故乡，迂道往访，则仅晤一人，言病者其弟也。劳君远道来视，然已早愈，赴某地候补矣。因大笑，出示日记二册，谓可见当日病状，不妨献诸旧友。持归阅一过，知所患盖“迫害狂”之类。语颇错杂无伦次，又多荒唐之言;亦不著月日，惟墨色字体不一，知非一时所书。间亦有略具联络者，今撮录一篇，以供医家研究。记中语误，一字不易;惟人名虽皆村人，不为世间所知，无关大体，然亦悉易去。至于书名，则本人愈后所题，不复改也。七年四月二日识。</p>\n<p align=\"center\">一</p>\n<p>今天晚上，很好的月光。</p>\n<p>我不见他，已是三十多年;今天见了，精神分外爽快。才知道以前的三十多年，全是发昏;然而须十分小心。不然，那赵家的狗，何以看我两眼呢?</p>\n<p>我怕得有理。</p>\n<p align=\"center\">二</p>\n<p>今天全没月光，我知道不妙。早上小心出门，赵贵翁的眼色便怪：似乎怕我，似乎想害我。还有七八个人，交头接耳的议论我，又怕我看见。一路上的人，都是如此。其中最凶的一个人，张着嘴，对我笑了一笑;我便从头直冷到脚跟，晓得他们布置，都已妥当了。</p>\n<p>我可不怕，仍旧走我的路。前面一伙小孩子，也在那里议论我;眼色也同赵贵翁一样，脸色也都铁青。我想我同小孩子有什么仇，他也这样。忍不住大声说，“你告诉我!”他们可就跑了。</p>\n<p>我想：我同赵贵翁有什么仇，同路上的人又有什么仇;只有廿年以前，把古久先生的陈年流水簿子，踹了一脚，古久先生很不高兴。赵贵翁虽然不认识他，一定也听到风声，代抱不平;约定路上的人，同我作冤对。但是小孩子呢?那时候，他们还没有出世，何以今天也睁着怪眼睛，似乎怕我，似乎想害我。这真教我怕，教我纳罕而且伤心。</p>\n<p>我明白了。这是他们娘老子教的!</p>\n<p align=\"center\">三</p>\n<p>晚上总是睡不着。凡事须得研究，才会明白。</p>\n<p>他们——也有给知县打枷过的，也有给绅士掌过嘴的，也有衙役占了他妻子的，也有老子娘被债主逼死的;他们那时候的脸色，全没有昨天这么怕，也没有这么凶。</p>\n<p>最奇怪的是昨天街上的那个女人，打他儿子，嘴里说道，“老子呀! 我要咬你几口才出气!”他眼睛却看着我。我出了一惊，遮掩不住;那青面獠牙的一伙人，便都哄笑起来。陈老五赶上前，硬把我拖回家中了。</p>\n<p>拖我回家，家里的人都装作不认识我;他们的眼色，也全同别人一样。进了书房，便反扣上门，宛然是关了一只鸡鸭。这一件事，越教我猜不出底细。</p>\n<p>前几天，狼子村的佃户来告荒，对我大哥说，他们村里的一个大恶人，给大家打死了;几个人便挖出他的心肝来，用油煎炒了吃，可以壮壮胆子。我插了一句嘴，佃户和大哥便都看我几眼。今天才晓得他们的眼光，全同外面的那伙人一模一样。</p>\n<p>想起来，我从顶上直冷到脚跟。</p>\n<p>他们会吃人，就未必不会吃我。</p>\n<p>你看那女人“咬你几口”的话，和一伙青面獠牙人的笑，和前天佃户的话，明明是暗号。我看出他话中全是毒，笑中全是刀。他们的牙齿，全是白厉厉的排着，这就是吃人的家伙。</p>\n<p>照我自己想，虽然不是恶人，自从踹了古家的簿子，可就难说了。他们似乎别有心思，我全猜不出。况且他们一翻脸，便说人是恶人。我还记得大哥教我做论，无论怎样好人，翻他几句，他便打上几个圈;原谅坏人几句，他便说“翻天妙手，与众不同”。我那里猜得到他们的心思，究竟怎样;况且是要吃的时候。</p>\n<p>凡事总须研究，才会明白。古来时常吃人，我也还记得，可是不甚清楚。我翻开历史一查，这历史没有年代，歪歪斜斜的每叶上都写着“仁义道德”几个字。我横竖睡不着，仔细看了半夜，才从字缝里看出字来，满本都写着两个字是“吃人”!</p>\n<p>书上写着这许多字，佃户说了这许多话，却都笑吟吟的睁着怪眼睛看我。</p>\n<p>我也是人，他们想要吃我了!</p>\n<p align=\"center\">四</p>\n<p>早上，我静坐了一会。陈老五送进饭来，一碗菜，一碗蒸鱼;这鱼的眼睛，白而且硬，张着嘴，同那一伙想吃人的人一样。吃了几筷，滑溜溜的不知是鱼是人，便把他兜肚连肠的吐出。</p>\n<p>我说“老五，对大哥说，我闷得慌，想到园里走走。”老五不答应，走了停一会，可就来开了门。</p>\n<p>我也不动，研究他们如何摆布我;知道他们一定不肯放松。果然!我大哥引了一个老头子，慢慢走来;他满眼凶光，怕我看出，只是低头向着地，从眼镜横边暗暗看我。大哥说，“今天你仿佛很好。”我说“是的。”大哥说，“今天请何先生来，给你诊一诊。”我说“可以!”其实我岂不知道这老头子是刽子手扮的! 无非借了看脉这名目，揣一揣肥瘠：因这功劳，也分一片肉吃。我也不怕;虽然不吃人，胆子却比他们还壮。伸出两个拳头，看他如何下手。老头子坐着，闭了眼睛，摸了好一会，呆了好一会;便张开他鬼眼睛说，“不要乱想。静静的养几天，就好了。”</p>\n<p>不要乱想，静静的养! 养肥了，他们是自然可以多吃;我有什么好处，怎么会“好了”?他们这群人，又想吃人，又是鬼鬼祟祟，想法子遮掩，不敢直捷下手，真要令我笑死。我忍不住，便放声大笑起来，十分快活。自己晓得这笑声里面，有的是义勇和正气。老头子和大哥，都失了色，被我这勇气正气镇压住了。</p>\n<p>但是我有勇气，他们便越想吃我，沾光一点这勇气。老头子跨出门，走不多远，便低声对大哥说道，“赶紧吃罢!”大哥点点头。原来也有你!这一件大发见，虽似意外，也在意中：合伙吃我的人，便是我的哥哥!</p>\n<p>吃人的是我哥哥!</p>\n<p>我是吃人的人的兄弟!</p>\n<p>我自己被人吃了，可仍然是吃人的人的兄弟!</p>\n<p align=\"center\">五</p>\n<p>这几天是退一步想：假使那老头子不是刽子手扮的，真是医生，也仍然是吃人的人。他们的祖师李时珍做的“本草什么”上，明明写着人肉可以煎吃;他还能说自己不吃人么?</p>\n<p>至于我家大哥，也毫不冤枉他。他对我讲书的时候，亲口说过可以“易子而食”;又一回偶然议论起一个不好的人，他便说不但该杀，还当“食肉寝皮”。我那时年纪还小，心跳了好半天。前天狼子村佃户来说吃心肝的事，他也毫不奇怪，不住的点头。可见心思是同从前一样狠。既然可以“易子而食”，便什么都易得，什么人都吃得。我从前单听他讲道理，也胡涂过去;现在晓得他讲道理的时候，不但唇边还抹着人油，而且心里满装着吃人的意思。</p>\n<p align=\"center\">六</p>\n<p>黑漆漆的，不知是日是夜。赵家的狗又叫起来了。</p>\n<p>狮子似的凶心，兔子的怯弱，狐狸的狡猾，……</p>\n<p align=\"center\">七</p>\n<p>我晓得他们的方法，直捷杀了，是不肯的，而且也不敢，怕有祸祟。所以他们大家连络，布满了罗网，逼我自戕。试看前几天街上男女的样子，和这几天我大哥的作为，便足可悟出八九分了。最好是解下腰带，挂在梁上，自己紧紧勒死;他们没有杀人的罪名，又偿了心愿，自然都欢天喜地的发出一种呜呜咽咽的笑声。否则惊吓忧愁死了，虽则略瘦，也还可以首肯几下。</p>\n<p>他们是只会吃死肉的! ——记得什么书上说，有一种东西，叫“海乙那”的，眼光和样子都很难看;时常吃死肉，连极大的骨头，都细细嚼烂，咽下肚子去，想起来也教人害怕。“海乙那”是狼的亲眷，狼是狗的本家。前天赵家的狗，看我几眼，可见他也同谋，早已接洽。老头子眼看着地，岂能瞒得我过。</p>\n<p>最可怜的是我的大哥，他也是人，何以毫不害怕;而且合伙吃我呢?还是历来惯了，不以为非呢?还是丧了良心，明知故犯呢?</p>\n<p>我诅咒吃人的人，先从他起头;要劝转吃人的人，也先从他下手。</p>\n<p align=\"center\">八</p>\n<p>其实这种道理，到了现在，他们也该早已懂得，……</p>\n<p>忽然来了一个人;年纪不过二十左右，相貌是不很看得清楚，满面笑容，对了我点头，他的笑也不像真笑。我便问他，“吃人的事，对么?”他仍然笑着说，“不是荒年，怎么会吃人。”我立刻就晓得，他也是一伙，喜欢吃人的;便自勇气百倍，偏要问他。</p>\n<p>“对么?”</p>\n<p>“这等事问他什么。你真会……说笑话。……今天天气很好。”</p>\n<p>天气是好，月色也很亮了。可是我要问你，“对么?”</p>\n<p>他不以为然了。含含胡胡的答道，“不……”</p>\n<p>“不对?他们何以竟吃?!”</p>\n<p>“没有的事……”</p>\n<p>“没有的事?狼子村现吃;还有书上都写着，通红斩新!”</p>\n<p>他便变了脸，铁一般青。睁着眼说，“有许有的，这是从来如此……”</p>\n<p>“从来如此，便对么?”</p>\n<p>“我不同你讲这些道理;总之你不该说，你说便是你错!”</p>\n<p>我直跳起来，张开眼，这人便不见了。全身出了一大片汗。他的年纪，比我大哥小得远，居然也是一伙;这一定是他娘老子先教的。还怕已经教给他儿子了;所以连小孩子，也都恶狠狠的看我。</p>\n<p align=\"center\">九</p>\n<p>自己想吃人，又怕被别人吃了，都用着疑心极深的眼光，面面相觑。……</p>\n<p>去了这心思，放心做事走路吃饭睡觉，何等舒服。这只是一条门槛，一个关头。他们可是父子兄弟夫妇朋友师生仇敌和各不相识的人，都结成一伙，互相劝勉，互相牵掣，死也不肯跨过这一步。</p>\n<p align=\"center\">十</p>\n<p>大清早，去寻我大哥;他立在堂门外看天，我便走到他背后，拦住门，格外沉静，格外和气的对他说，</p>\n<p>“大哥，我有话告诉你。”</p>\n<p>“你说就是，”他赶紧回过脸来，点点头。</p>\n<p>“我只有几句话，可是说不出来。大哥，大约当初野蛮的人，都吃过一点人。后来因为心思不同，有的不吃人了，一味要好，便变了人，变了真的人。有的却还吃，——也同虫子一样，有的变了鱼鸟猴子，一直变到人。有的不要好，至今还是虫子。这吃人的人比不吃人的人，何等惭愧。怕比虫子的惭愧猴子，还差得很远很远。</p>\n<p>“易牙蒸了他儿子，给桀纣吃，还是一直从前的事。谁晓得从盘古开辟天地以后，一直吃到易牙的儿子;从易牙的儿子，一直吃到徐锡林，从徐锡林，又一直吃到狼子村捉住的人。去年城里杀了犯人，还有一个生痨病的人，用馒头蘸血舐。</p>\n<p>“他们要吃我，你一个人，原也无法可想;然而又何必去入伙。吃人的人，什么事做不出;他们会吃我，也会吃你，一伙里面，也会自吃。但只要转一步，只要立刻改了，也就人人太平。虽然从来如此，我们今天也可以格外要好，说是不能!大哥，我相信你能说，前天佃户要减租，你说过不能。”</p>\n<p>当初，他还只是冷笑，随后眼光便凶狠起来，一到说破他们的隐情，那就满脸都变成青色了。大门外立着一伙人，赵贵翁和他的狗，也在里面，都探头探脑的挨进来。有的是看不出面貌，似乎用布蒙着;有的是仍旧青面獠牙，抿着嘴笑。我认识他们是一伙，都是吃人的人。可是也晓得他们心思很不一样，一种是以为从来如此，应该吃的;一种是知道不该吃，可是仍然要吃，又怕别人说破他，所以听了我的话，越发气愤不过，可是抿着嘴冷笑。</p>\n<p>这时候，大哥也忽然显出凶相，高声喝道，</p>\n<p>“都出去! 疯子有什么好看!”</p>\n<p>这时候，我又懂得一件他们的巧妙了。他们岂但不肯改，而且早已布置;预备下一个疯子的名目罩上我。将来吃了，不但太平无事，怕还会有人见情。佃户说的大家吃了一个恶人，正是这方法。这是他们的老谱!</p>\n<p>陈老五也气愤愤的直走进来。如何按得住我的口，我偏要对这伙人说，</p>\n<p>“你们可以改了，从真心改起!要晓得将来容不得吃人的人，活在世上。</p>\n<p>“你们要不改，自己也会吃尽。即使生得多，也会给真的人除灭了，同猎人打完狼子一样! ——同虫子一样!”</p>\n<p>那一伙人，都被陈老五赶走了。大哥也不知道那里去了。陈老五劝我回屋子里去。屋里面全是黑沉沉的。横梁和椽子都在头上发抖;抖了一会，就大起来，堆在我身上。</p>\n<p>万分沉重，动弹不得;他的意思是要我死。我晓得他的沉重是假的，便挣扎出来，出了一身汗。可是偏要说，</p>\n<p>“你们立刻改了，从真心改起! 你们要晓得将来是容不得吃人的人，……”</p>\n<p align=\"center\">十一</p>\n<p>太阳也不出，门也不开，日日是两顿饭。</p>\n<p>我捏起筷子，便想起我大哥;晓得妹子死掉的缘故，也全在他。那时我妹子才五岁，可爱可怜的样子，还在眼前。母亲哭个不住，他却劝母亲不要哭;大约因为自己吃了，哭起来不免有点过意不去。如果还能过意不去，……</p>\n<p>妹子是被大哥吃了，母亲知道没有，我可不得而知。</p>\n<p>母亲想也知道;不过哭的时候，却并没有说明，大约也以为应当的了。记得我四五岁时，坐在堂前乘凉，大哥说爷娘生病，做儿子的须割下一片肉来，煮熟了请他吃，才算好人;母亲也没有说不行。一片吃得，整个的自然也吃得。但是那天的哭法，现在想起来，实在还教人伤心，这真是奇极的事!</p>\n<p align=\"center\">十二</p>\n<p>不能想了。</p>\n<p>四千年来时时吃人的地方，今天才明白，我也在其中混了多年;大哥正管着家务，妹子恰恰死了，他未必不和在饭菜里，暗暗给我们吃。</p>\n<p>我未必无意之中，不吃了我妹子的几片肉，现在也轮到我自己，……</p>\n<p>有了四千年吃人履历的我，当初虽然不知道，现在明白，难见真的人!</p>\n<p align=\"center\">十三</p>\n<p>没有吃过人的孩子，或者还有?</p>\n<p>救救孩子……</p>\n<p align=\"right\">一九一八年四月</p>\n<h2>帮助链接</h2>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/%E4%B8%AD%E5%9B%BD%E9%A3%9F%E4%BA%BA%E5%8F%B2\" rel=\"nofollow\">中国食人史 - wikipedia</a></li>\n<li><a href=\"https://www.zhihu.com/question/24946899\" rel=\"nofollow\">https://www.zhihu.com/question/24946899</a></li>\n</ul>"
  },
  {
    "id": 65,
    "title": "漂在旧金山",
    "labels": "观点与感想",
    "created_at": "2019-09-09T12:41:59Z",
    "updated_at": "2019-09-25T13:33:47Z",
    "body_html": "<p>“北漂”，生于忧患，死于安乐，我是一名幸运儿，在工作当中发现对于工作的热爱，还好这个行业与工作不是令我厌恶的。现已从业 2 年，也渐渐看明白了这个圈子，自觉软件行业难题在于：</p>\n<ol>\n<li>需要投入时间精力，克服肉体，不断持续学习</li>\n<li>”青春饭“，国内终生学习环境差</li>\n<li>996.ICU ，身体健康本钱与 RMB 不成正比</li>\n<li>一叶障目，难以往别的方向发展</li>\n</ol>\n<p>我想了想我的应对之道：</p>\n<ol>\n<li>热爱+找寻科学的学习方法+构建自己的知识体系，先达成技术理想</li>\n<li>客观现实环境无法改变，除非 4 或者出国</li>\n<li>人生次序摆正，首位是什么 （上帝）？其二是什么 （爱人）？否认”金钱至上“，爱惜身体，如同陶先生《每天四问》中的第一问：我的身体有没有进步 ？</li>\n<li>我可以选择的其他工作？或者创业，或者不做工作（服侍神）</li>\n</ol>\n<h1>漂在旧金山</h1>\n<p>原载 <a href=\"https://www.salon.com/2016/09/17/hacker-house-blues-my-life-with-12-programmers-2-rooms-and-one-21st-century-dream/\" rel=\"nofollow\">salon.com</a></p>\n<p>译者：阮一峰</p>\n<p>1、</p>\n<p>我的名字是 David Garczynski。我梦想成为一名程序员，看到网上的广告后，报名参加了一个12周的编程培训班，上课地点是旧金山。我希望搬到那里以后，经过培训能够成为 IT 专业人士，找到工作，过上美好的日子。</p>\n<p>我在 Airbnb 寻找旧金山的短期住处，发现了一栋大楼里面的四人公寓。照片上，阳光充沛的房间里放着两张双层床。文字介绍说，大楼里还有室内篮球场、24小时健身房，攀岩墙等等，看上去还不错。价格是每月1200美元，一个床位。</p>\n<p>我想，大部分时间我都在培训班学习编程，合租的房间只是睡觉的地方。应该没有问题，就付款订了一个床位。</p>\n<p>真正看到了房间，我才知道自己错了。</p>\n<p>2、</p>\n<p>公寓在大楼的17层，有两间屋子，每间屋子放了三张双层床，一共住了12个人，都是到旧金山寻找梦想的年轻程序员。</p>\n<p>我的床位是下铺，不靠窗。屋里只有一盏昏暗的灯，即使是中午，也暗得像洞穴。一天的大部分时间，都有人在屋里睡觉。上床和下床，必须很小心，以免踩到地板上的手提箱。我们大多数人的行李都放在地板上。</p>\n<p>厨房是共用的，水槽总是堆着一大堆餐具。冰箱里装满了每个人的食品和剩菜，散发出一股轻微发霉的味道。里面还有一些吃了一半的调味酱罐子，它们的主人早已搬出去了。</p>\n<p>最糟糕的是，公寓不提供大楼的前门钥匙。我进入大楼的唯一方法，就是等到其他人开门的时候溜进去。然后，我走过前台保安，到电梯间，一直坐到17楼，偷偷从 Exit 标志的顶上取出公共钥匙，打开公寓的门，再把钥匙放回原处，供其他房客使用。</p>\n<p>3、</p>\n<p>培训班开始上课以后，我发现如果要完成课程，需要全部时间的投入，每天编程15个小时，周末可以稍稍降低到10～12个小时。</p>\n<p>日子一天天过去，我压力越来越大。深夜，我会感到绝望和疲惫，问自己：\"我在做什么？这真的值得吗？\"</p>\n<p>公寓的所有房客都是程序员。一部分人跟我一样，想通过新手培训班进入 IT 行业。另一部分人则是全职的专业程序员，一大早出门，去附近的创业公司上班，在电脑前工作10至12小时。晚上下班回来后，他们依然会坐到沙发上，打开笔记本电脑，默默地度过一天剩下的几个小时。</p>\n<p>我旁边的衣帽间，住着一个程序员。衣帽间是单独出租的，价格是每月1400美元。他每天晚上9点左右回家，然后坐在沙发上，给自己倒一碗麦片，默默地吃。接着，拿起笔记本电脑，走进衣帽间，继续工作几个小时，直到深夜，不得不睡觉的时候才结束工作。只有通过衣帽间门缝漏出的光，我才知道他还在工作。我住进去的时候，他已经在那里住了16个月，就住在一个没有窗户的衣帽间里，地板上放着一个薄薄的床垫。他为已经是独角兽级别的 Pinterest 公司工作。</p>\n<p>4、</p>\n<p>也许有人在这个城市实现了梦想，但我逐渐意识到，实现梦想的人远远少于没有实现梦想的人。公寓的所有房客似乎对未来都很沮丧，他们住在造假的 Airbnb，为失败的创业公司工作。</p>\n<p>根据统计，创业公司有92%的可能撑不过三年。为创业公司工作的那些程序员，那些比我更聪明、更优秀的程序员，不得不从一家已经失败的公司，转到另一家将要失败的公司。</p>\n<p>或许，我不会是这种命运，也许会成功。但是，即使我能像那位 Pinterest 公司的程序员那样，赚六位数的年薪，仍然会感叹永远无法在这里买房子。我对未来到底应该持有什么样的幻想？</p>\n<p>我的另一位室友跟雇主谈判工资的时候，被说服接受较低的工资，补偿是较高的期权。现在，他不得不每天上班12个小时，拿着一份非常微薄的工资，竭尽全力盼望公司不要失败倒闭。</p>\n<p>我的上铺睡着一个30多岁的中国人，他对现实感到越来越抑郁，每天的大部分时间都躺在床上睡觉，剩下的时间则是愁眉苦脸、漫无目的地走来走去。我觉得，自己最可能变成跟他一样。</p>\n<p>5、</p>\n<p>我在公寓生活的时间越长，就越意识到我的梦想不可能实现。也许最后，我会得到我需要的一切，或者一份不错的薪水，但在做到这一点之前，我会彻底丧失自我，被技术世界打击和改造得面目全非。</p>\n<p>放弃编程、搬出公寓的那天，我来到大楼的楼顶，眺望旧金山的北面。那里有大量的创业公司，可以看到它们的 Logo，各种各样鲜艳的颜色。某个地方写着\"黑客之家\"，另一个地方写着\"创业训练营\"，都在向年轻人兜售梦想。</p>\n<p>里面肯定有很多聪明的年轻人，白天挤在荧光灯闪烁的办公楼层工作，晚上睡在狭小的卧室，心里充满梦想。他们不知道，自己取代的是别人留下的位置，那些人也曾充满梦想，但后来意识到不可能实现而离开，正如心怀憧憬的新房客，马上就会占据我空出来的床位。</p>\n<h2>参考链接</h2>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/08/san-francisco.html\" rel=\"nofollow\">漂在旧金山 - 阮一峰</a></li>\n</ul>"
  },
  {
    "id": 64,
    "title": "陶行知《每天四问》",
    "labels": "语思",
    "created_at": "2019-09-09T03:47:29Z",
    "updated_at": "2019-09-23T03:20:22Z",
    "body_html": "<h2>作者</h2>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E9%99%B6%E8%A1%8C%E7%9F%A5\" rel=\"nofollow\">陶行知</a>（1891年10月18日－1946年7月25日），中国著名教育家，本名陶文濬，因欣赏王阳明“知行合一”学说改名为知行，后认为“行是知之始；知是行之成”，又改名为行知。</p>\n<h3>教育思想</h3>\n<p>生活教育：生活即教育，社会即学校，教学做合一</p>\n<h3>言论</h3>\n<ul>\n<li>“捧着一颗心来，不带半根草去。”</li>\n<li>“以教人者教已，在劳力上劳心。”</li>\n<li>“千教万教，教人求真；千学万学，学做真人。”</li>\n<li>“吃自己的饭，滴自己的汗，自己的事自己干，靠人，靠天，靠祖上，不算是好汉!”</li>\n<li>“要把教育和知识变成空气一样，弥漫于宇宙，洗荡于乾坤，普及众生，人人有得呼吸。”</li>\n<li>“每天要四问：一问我的身体有没有进步？二问我的学问有没有进步？三问我的工作有没有进步？四问我的道德有没有进步？”</li>\n</ul>\n<h2>写作背景</h2>\n<p>1942 年7月20日《每天四问》是陶先生在育才中学（1939年7月由陶行知创办）三周年纪念晚会上的演讲词。</p>\n<h2>演讲词</h2>\n<p>今天是本校三周年纪念，我有一些意见提出来和大家谈谈，作为先生同学和工友们的参考。</p>\n<p>本校从去年的二周年纪念到今年的三周年纪念，能在这样艰难困苦中支持了一年，几乎是一个奇迹。这一个奇迹，不是一个人的力量所能够做得出来的，而是全体先生同学工友共同坚持，共同进步，共同创造；以及社会关心我们人士的尽力赞助所得来的。</p>\n<p>本校在这一年中，好像是我们先生同学工友二百人坐在一只船上，放在嘉陵江中漂流，大的漏洞危险虽然没有，但是小的漏洞是出了一些，这些小漏洞也可以变成大漏洞，使我们的船沉没下去的！然而我们的船没有因为这些小漏洞沉没，竟因为我们这些同船的人，一见有小漏洞，即想尽方法用力去堵塞，有时用手去堵，有时用脚去堵，甚至有时用头用全身的力量去堵：终于把这只船上这些小漏洞堵塞住，而平稳地度过这一年，而达到了目的地，这是一个奇迹，一个共同努力，共同创造的奇迹。</p>\n<p>“一切为纪念”，刚才主席说的这一个口号，当然提出的意义是有他的作用的，大家用力对着这一个目的来创造，是很好的。但是我对于这一个口号有点骇怕，骇怕费钱太多，骇怕费力太多，以至精疲力尽，恐怕得不偿失，所以我主张明年四周年纪念，要改变方针，我们的成绩，要从明天起，即开始筹备，日积月累，“水到渠成”的成绩。不要再在短期内来多费钱和多费力量，只要到了明年7月1日，开始把平日的成绩装潢一下，便有很丰富的成绩，再不像今年和去年这样忙了。大家也可以很从容很清闲而有余裕地过着四周年纪念。</p>\n<p>现在我提出四个问题，叫做“每天四问”：</p>\n<p>第一问：我的身体有没有进步？</p>\n<p>第二问：我的学问有没有进步？</p>\n<p>第三问：我的工作有没有进步？</p>\n<p>第四问：我的道德有没有进步？</p>\n<p>第一问：“我的身体有没有进步？”</p>\n<p>首先，我们每天应该要问的，是“自己的身体有没有进步”，有，进步了多少？为什么要这样问？因为“健康第一”。没有了身体，一切都完了！不禁使我想到了去年二周年纪念前9日邹秉权同学之死！与今年三周年纪念前9日魏国光同学之死！两人之死的日子是恰恰一周年，不过时间上相差八九个钟点罢了。因为这两位同学的死，使我联想到，我们必须继续建立“健康堡垒”。要建立健康堡垒，必须注意几点：(一)“科学的观察与诊断”。(二)“饮食的调节与改进”。(三)“预防疲劳的休息”。(四)“用卫生教育代替医生”。……我们要以决心推进卫生教育的效力来代替医生，以保证健康的胜利。以卫生教育代替医生，在两月前，我已有信来学校，提出十几条具体事实来，希望照行，现在想来，还是不够，需要补充。待补充之后，提交校务会议商决进行。但是今天在此先提出来告诉大家，希望大家多多准备意见，贡献意见。在建立“科学的健康堡垒”上多尽一份力量，便是在卫生教育施行上多一份力量，卫生教育胜利上多一份保证。大家都成为建立“科学的健康堡垒”的主要的成员之一，健将之一，共同来保证“健康第一”的胜利。</p>\n<p>第二问：“我的学问有没有进步？”</p>\n<p>其次，我们每天应该问的，是“自己的学问有没有进步？有，进步了多少”，为什么要这样问？因为“学问是一切前进的活力的源泉”。学问怎样能够进步？重要在有方法研究。现在我想到有五个字，可以帮助我们学问易于进步。哪五个字呢？</p>\n<p>第一个，是“一”字。一是“专一”的一。荀子说：“好一则博。”这句话是很有精义的。因为有了一个专一的问题做中心，从事研究，便可旁搜广引，自然而然的广博起来了。我看世界名人学者对于治学的解释，尚少如此精约的，治学必须“专一”的“一”，这是天经地义的了。“专一”在英文为Concentration，我们对于一件事物能够专心一意的研究下去，必然能够有一旦豁然贯通之时。所以我希望有能力研究的先生和同学，必须择定一个题目从事研究，即使是一个很小的问题，也可以研究出很深刻很渊博的大道理来。于人于己都可得到切实的益处，而且可能有大的贡献。</p>\n<p>第二个，是“集”字。集是“搜集”的集。集照篆字的写法，好像许多钩钩一样。我们研究学问有了中心题目，便要多多搜集材料，我们便像“集”的篆写一样，用许多钩钩到处去钩，上下古今，左右中外的钩，前前后后，四面八方的钩，钩集到一起来，好细细研究。集字在英文为Collection，我们有了丰富的材料，便可以源源本本的彻头彻尾的来研究它一个明明白白，才能够真正理解这个问题的症结所在，才能够“迎刃而解”，才能够收得“水到渠成”的效力。所以我希望大家对于每一个问题，都必须多多搜集材料，以便精深的精益求精的研究。在研究上发生力量，在研究上加强创造力量，集体创造，共同创造，在创造上建立起我们事业的新生命，树立起我们事业的新生机，稳定我们事业的新基础。</p>\n<p>第三个，是“钻”字。钻是钻进去的钻，就是深入的意思，钻是要费很大的力量，才能够钻得进去，深入到里面去，看得清清楚楚，取得了最宝贵的宝贝。做学问虽不能像钻东西那么钻，但是能够用最好的方法，也可以很快钻进去。我在外国，参观一个金矿，他们开采的机器，是运用大气的压力来发生动力的。我见到他们开采的速度，是比现代所称的“电化”的电力，还不知要增加若干倍咧。我们做学问也是一样，如果我们能够在学术气氛中的大气压力下，发生动力去钻，一定能够深入到里面去，探获学问的根源奥妙与诀窍，而必有很好的收获。“钻”字在英文为Penetration，所以我希望大家对于一个问题拿定了，便要尽力向里面钻，钻出一大套道理来，使我们学术气氛有着飞跃的进步。</p>\n<p>第四个，是“剖”字。剖是“解剖”的剖，就是“分析”的意思。有些材料钻进去还不够，必须解剖出来看它的真伪，是有用的还是有毒素的？以便取舍，清化运用。“剖”字在英文为Analyzation，所以我希望大家对于每一个问题搜集得来的材料，除了钻进深入之外，必须更加着意做一番解剖的工夫，分析入微，如同在解剖刀下，在显微镜下，看得明明白白，分析得清清楚楚，真的有用的没有毒素的就拿来运用；如果是假的有毒素的就舍去抛掉不用。如此，鉴别材料，慎选材料，自然适宜了。</p>\n<p>第五个，是“韧”字。韧是坚韧，即是鲁迅先生所主张的“韧性战斗”的韧。做学问是一种长期的战斗工作，所以必须有韧性战斗的精神，才能够在长期战斗中，战胜许许多多困难，化除种种障碍，开辟出一条新的道路，走入新的境界。“韧”字在英文中尚难找得一个适当的字来翻译，勉强可以译为Toughness，所以我希望大家在做学问上，要用韧性战斗的精神，历久不衰的，始终不懈的，坚持下去，终可达到“柳暗花明又一村”的境界。</p>\n<p>我想我们每一个人，能把“一”、“集”、“钻”、“剖”、“韧”五个字做到了，在做学问上一定有豁然贯通之日，于己于人于社会都有贡献。</p>\n<p>第三问：“我的工作有没有进步？”</p>\n<p>再次，我们每天要问，是“自己担任的工作有没有进步？有，进步了多少”，为什么要这样问？因为工作的好坏影响我们的生活学习都是很大的。我对于工作也提出几点意见。以供大家参考。</p>\n<p>第一点最要紧的，是要“站岗位”。各人所负的责任不同，各人有各人的岗位，各人应该站在各人自己的岗位上，守牢自己的岗位，在本岗位上努力，把本岗位的职务做得好，这是尽责任的第一步。我最近在想，人人应该有“站岗位”的教育。站牢在自己的工作岗位上，教育自己知责任，明责任，负责任——教育着自己进步。</p>\n<p>第二点最要紧的，是要“敏捷正确”。人常说，做事要“敏捷”，这是对的。但我觉得做事只是做到敏捷还不够，敏捷是敏捷了，因敏捷而做错了怎么办？所以敏捷之下必须加上“正确”二字，工作敏捷而正确才有效力。一件工作在别人做起来需要四小时，你只要二小时或三小时就做好了，而且做得很正确，这才算是工作的效力。工作怎样能够做得敏捷正确呢？这就要靠熟练与精细。粗心大意，是最易弄错弄坏事情的。做事要像做算术的演算草一样，要演得快演得正确。</p>\n<p>第三点最要紧的，是要“做好为止”。有些人做事，有起头无煞尾，做东丢西，做西丢东，忙过不了，不是一事无成，就是半途而废。我们做事要按照计划，依限完成，就必须毅力坚持，一直到做好为止。</p>\n<p>第四问：“我的道德有没有进步？”</p>\n<p>最后，我们每天要问的，是“自己的道德有没有进步？有，进步了多少”，为什么要这样问？因为道德是做人的根本。根本一坏，纵然使你有一些学问和本领，也无甚用处。否则，没有道德的人，学问和本领愈大，就能为非作恶愈大，所以我在不久以前，就提出“人格防”来，要我们大家“建筑人格长城”。建筑人格长城的基础，就是道德。现在分“公德”和“私德”两方面来说。</p>\n<p>先说“公德”。一个集体能不能稳固，是否可以兴盛起来？就要看每一个集体的组成分子，能不能顾到公德，卫护公德，来衡量它。如果一个集体的组成分子，人人以公德为前提，注意着每一个行动，则这一个集体，必然是日益稳固，日益兴盛起来。否则，多数人只顾个人私利，不顾集体利益，则这个集体的基础必然动摇，并且一定是要衰败下去！要不然，就只有把这些不顾公德的分子清除出这个集体；这个集体才有转向新生机的希望。所以我们在每一个行动上，都要问一问是否妨碍了公德？是否有助于公德？妨碍公德的，没有做的即打定决心不做，已经开始做的，立刻停止不做。若是有助于公德的，大家齐心全力来助他成功。</p>\n<p>再说“私德”。私德不讲究的人，每每就是成为妨碍公德的人，所以一个人私德更是要紧，私德更是公德的根本，私德最重要的是“廉洁”。一切坏心术坏行为，都由不廉洁而起。所以我在讲“建筑人格长城”的时候，提到了杨震的“四知”，甘地的漏夜“还金”，华盛顿的勇敢承认错误，和冯焕章先生所讲的平老静“还金镯”的故事，这些，都是我们大家私德上的好榜样。我们每个人都可以效法这些榜样，把自己的私德建立起来，建筑起“人格长城”来。由私德的健全，而扩大公德的效用，来为集体谋利益，则我们的学校必然的到了四周年，是有一种高贵的品德成绩表现出来。</p>\n<p>我今天所讲的“每天四问”，提供大家作为进德修业的参考。如果灵活运用的说到做到，明年今日四周年纪念的时候，必然可以见出每个人身体健康上有着大的进步，学问进修上有着大的进步，工作效能上有着大的进步，道德品格上有着大的进步，显出“水到渠成”的进步，而有着大大的进步。</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://www.pinshiwen.com/cidian/yanjiang/201904087625.html\" rel=\"nofollow\">[中国]陶行知《每天四问》</a></li>\n<li><a href=\"https://www.jyxqxx.com/portal/subject/mb003/detail.jsp?articleId=13361&amp;subjectId=4\" rel=\"nofollow\">陶行知生平年表</a></li>\n</ul>"
  },
  {
    "id": 63,
    "title": "语文课本之古文",
    "labels": "文学爱好者",
    "created_at": "2019-09-09T02:20:46Z",
    "updated_at": "2019-09-09T02:21:48Z",
    "body_html": "<h2>目录</h2>\n<blockquote>\n<p>注：按时间分类</p>\n</blockquote>\n<h3>先秦两汉</h3>\n<ul>\n<li>劝学</li>\n<li>子墨子自鲁即齐 《墨子》</li>\n<li>关雎 《诗经》</li>\n<li>蒹葭 《诗经》</li>\n<li>生于忧患，死于安乐</li>\n<li>鱼我所欲也</li>\n<li>曹刿论战 《左传》</li>\n<li>邹忌讽齐王纳谏 《战国策》</li>\n<li>得道多助，失道寡助</li>\n</ul>\n<h3>唐代</h3>\n<ul>\n<li>谏太宗十思疏</li>\n<li>师说</li>\n<li>马说</li>\n<li>茅屋为秋风所破歌</li>\n<li>陋室铭</li>\n</ul>\n<h2>宋代</h2>\n<ul>\n<li>爱莲说</li>\n</ul>\n<h2>明代</h2>\n<ul>\n<li>送东阳马生序</li>\n</ul>\n<h2>原文</h2>\n<details>\n<summary><strong>劝学</strong></summary>\n<br>\n<p>作者：先秦 荀子</p>\n<br>\n<p>　　君子曰：学不可以已。</p>\n<p>　　青，取之于蓝，而青于蓝；冰，水为之，而寒于水。木直中绳，輮以为轮，其曲中规。虽有槁暴，不复挺者，輮使之然也。故木受绳则直，金就砺则利，君子博学而日参省乎己，则知明而行无过矣。</p>\n<p>　　故不登高山，不知天之高也；不临深溪，不知地之厚也；不闻先王之遗言，不知学问之大也。干、越、夷、貉之子，生而同声，长而异俗，教使之然也。诗曰：“嗟尔君子，无恒安息。靖共尔位，好是正直。神之听之，介尔景福。”神莫大于化道，福莫长于无祸。</p>\n<p>　　吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。(君子生 通：性)</p>\n<p>　　南方有鸟焉，名曰蒙鸠，以羽为巢，而编之以发，系之苇苕，风至苕折，卵破子死。巢非不完也，所系者然也。西方有木焉，名曰射干，茎长四寸，生于高山之上，而临百仞之渊，木茎非能长也，所立者然也。蓬生麻中，不扶而直；白沙在涅，与之俱黑。兰槐之根是为芷，其渐之滫，君子不近，庶人不服。其质非不美也，所渐者然也。故君子居必择乡，游必就士，所以防邪辟而近中正也。</p>\n<p>　　物类之起，必有所始。荣辱之来，必象其德。肉腐出虫，鱼枯生蠹。怠慢忘身，祸灾乃作。强自取柱，柔自取束。邪秽在身，怨之所构。施薪若一，火就燥也，平地若一，水就湿也。草木畴生，禽兽群焉，物各从其类也。是故质的张，而弓矢至焉；林木茂，而斧斤至焉；树成荫，而众鸟息焉。醯酸，而蚋聚焉。故言有招祸也，行有招辱也，君子慎其所立乎！</p>\n<p>　　积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；驽马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利，筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。</p>\n<p>　　是故无冥冥之志者，无昭昭之明；无惛惛之事者，无赫赫之功。行衢道者不至，事两君者不容。目不能两视而明，耳不能两听而聪。螣蛇无足而飞，鼫鼠五技而穷。《诗》曰：“尸鸠在桑，其子七兮。淑人君子，其仪一兮。其仪一兮，心如结兮！”故君子结于一也。</p>\n<p>　　昔者瓠巴鼓瑟，而流鱼出听；伯牙鼓琴，而六马仰秣。故声无小而不闻，行无隐而不形 。玉在山而草木润，渊生珠而崖不枯。为善不积邪？安有不闻者乎？</p>\n<p>　　学恶乎始？恶乎终？曰：其数则始乎诵经，终乎读礼；其义则始乎为士，终乎为圣人， 真积力久则入，学至乎没而后止也。故学数有终，若其义则不可须臾舍也。为之，人也；舍 之，禽兽也。故书者，政事之纪也；诗者，中声之所止也；礼者，法之大分，类之纲纪也。 故学至乎礼而止矣。夫是之谓道德之极。礼之敬文也，乐之中和也，诗书之博也，春秋之微 也，在天地之间者毕矣。 君子之学也，入乎耳，着乎心，布乎四体，形乎动静。端而言，蝡而动，一可以为法则。小人之学也，入乎耳，出乎口；口耳之间，则四寸耳，曷足以美七尺之躯哉！古之学者为己，今之学者为人。君子之学也，以美其身；小人之学也，以为禽犊。故不问而告谓之傲，问一而告二谓之囋。傲、非也，囋、非也；君子如向矣。</p>\n<p>　　学莫便乎近其人。礼乐法而不说，诗书故而不切，春秋约而不速。方其人之习君子之说，则尊以遍矣，周于世矣。故曰：学莫便乎近其人。</p>\n<p>　　学之经莫速乎好其人，隆礼次之。上不能好其人，下不能隆礼，安特将学杂识志，顺诗书而已耳。则末世穷年，不免为陋儒而已。将原先王，本仁义，则礼正其经纬蹊径也。若挈裘领，诎五指而顿之，顺者不可胜数也。不道礼宪，以诗书为之，譬之犹以指测河也，以戈舂黍也，以锥餐壶也，不可以得之矣。故隆礼，虽未明，法士也；不隆礼，虽察辩，散儒也。</p>\n<p>　　问楛者，勿告也；告楛者，勿问也；说楛者，勿听也。有争气者，勿与辩也。故必由其道至，然后接之；非其道则避之。故礼恭，而后可与言道之方；辞顺，而后可与言道之理；色从而后可与言道之致。故未可与言而言，谓之傲；可与言而不言，谓之隐；不观气色而言，谓瞽。故君子不傲、不隐、不瞽，谨顺其身。诗曰：“匪交匪舒，天子所予。”此之谓也。</p>\n<p>　　百发失一，不足谓善射；千里蹞步不至，不足谓善御；伦类不通，仁义不一，不足谓善学。学也者，固学一之也。一出焉，一入焉，涂巷之人也；其善者少，不善者多，桀纣盗跖也；全之尽之，然后学者也。</p>\n<p>　　君子知夫不全不粹之不足以为美也，故诵数以贯之，思索以通之，为其人以处之，除其害者以持养之。使目非是无欲见也，使耳非是无欲闻也，使口非是无欲言也，使心非是无欲虑也。及至其致好之也，目好之五色，耳好之五声，口好之五味，心利之有天下。是故权利不能倾也，群众不能移也，天下不能荡也。生乎由是，死乎由是，夫是之谓德操。德操然后能定，能定然后能应。能定能应，夫是之谓成人。天见其明，地见其光，君子贵其全也。</p>\n</details>\n<details>\n<summary><strong>子墨子自鲁即齐</strong></summary>\n<br>\n<p>作者：先秦 墨子弟子及再传弟子</p>\n<br>\n<p>　　子墨子自鲁即齐，过故人，谓子墨子曰：“今天下莫为义，子独自苦而为义，子不若已。”</p>\n<p>　　子墨子曰：“今有人于此，有子十人，一人耕而九人处，则耕者不可以不益急矣。何故？则食者众而耕者寡也。今天下莫为义，则子如劝我者也，何故止我？“</p>\n</details>\n<details>\n<summary><strong>关雎</strong></summary>\n<br>\n<p>作者：先秦 佚名</p>\n<br>\n<p>　　关关雎鸠，在河之洲。窈窕淑女，君子好逑。</p>\n<p>　　参差荇菜，左右流之。窈窕淑女，寤寐求之。</p>\n<p>　　求之不得，寤寐思服。悠哉悠哉，辗转反侧。</p>\n<p>　　参差荇菜，左右采之。窈窕淑女，琴瑟友之。</p>\n<p>　　参差荇菜，左右芼之。窈窕淑女，钟鼓乐之。</p>\n</details>\n<details>\n<summary><strong>蒹葭</strong></summary>\n<br>\n<p>作者：先秦 佚名</p>\n<br>\n<p>　　蒹葭苍苍，白露为霜。所谓伊人，在水一方。</p>\n<p>　　溯洄从之，道阻且长。溯游从之，宛在水中央。</p>\n<p>　　蒹葭萋萋，白露未晞。所谓伊人，在水之湄。</p>\n<p>　　溯洄从之，道阻且跻。溯游从之，宛在水中坻。</p>\n<p>　　蒹葭采采，白露未已。所谓伊人，在水之涘。</p>\n<p>　　溯洄从之，道阻且右。溯游从之，宛在水中沚。</p>\n</details>\n<details>\n<summary><strong>生于忧患，死于安乐</strong></summary>\n<br>\n<p>作者：先秦 孟子及其弟子</p>\n<br>\n<p>　　舜发于畎亩之中，傅说举于版筑之间，胶鬲举于鱼盐之中，管夷吾举于士，孙叔敖举于海，百里奚举于市。</p>\n<p>　　故天将降大任于是人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。(是人 一作：斯人)</p>\n<p>　　人恒过，然后能改；困于心，衡于虑，而后作；征于色，发于声，而后喻。入则无法家拂士，出则无敌国外患者，国恒亡。</p>\n<p>　　然后知生于忧患而死于安乐也。</p>\n</details>\n<details>\n<summary><strong>鱼我所欲也</strong></summary>\n<br>\n<p>作者：先秦 孟子及其弟子</p>\n<br>\n<p>　　鱼，我所欲也；熊掌，亦我所欲也，二者不可得兼，舍鱼而取熊掌者也。生，亦我所欲也；义，亦我所欲也。二者不可得兼，舍生而取义者也。生亦我所欲，所欲有甚于生者，故不为苟得也。死亦我所恶，所恶有甚于死者，故患有所不辟也。如使人之所欲莫甚于生，则凡可以得生者何不用也。使人之所恶莫甚于死者，则凡可以辟患者何不为也！由是则生而有不用也；由是则可以辟患而有不为也。是故所欲有甚于生者，所恶有甚于死者。非独贤者有是心也，人皆有之，贤者能勿丧耳。</p>\n<p>　　一箪食，一豆羹，得之则生，弗得则死。呼尔而与之，行道之人弗受；蹴尔而与之，乞人不屑也。</p>\n<p>　　万钟则不辩礼义而受之，万钟于我何加焉！为宫室之美，妻妾之奉，所识穷乏者得我与？乡为身死而不受，今为宫室之美为之；乡为身死而不受，今为妻妾之奉为之；乡为身死而不受，今为所识穷乏者得我而为之：是亦不可以已乎？此之谓失其本心。</p>\n</details>\n<details>\n<summary><strong>曹刿论战</strong></summary>\n<br>\n<p>作者：先秦 左丘明</p>\n<br>\n<p>　　十年春，齐师伐我。公将战。曹刿请见。其乡人曰：“肉食者谋之，又何间焉？”刿曰：“肉食者鄙，未能远谋。”乃入见。问：“何以战？”公曰：“衣食所安，弗敢专也，必以分人。”对曰：“小惠未徧，民弗从也。”公曰：“牺牲玉帛，弗敢加也，必以信。”对曰：“小信未孚，神弗福也。”公曰：“小大之狱，虽不能察，必以情。”对曰：“忠之属也。可以一战。战则请从。”（徧 同：遍)</p>\n<p>　　公与之乘，战于长勺。公将鼓之。刿曰：“未可。”齐人三鼓。刿曰：“可矣。”齐师败绩。公将驰之。刿曰：“未可。”下视其辙，登轼而望之，曰：“可矣。”遂逐齐师。</p>\n<p>　　既克，公问其故。对曰：“夫战，勇气也。一鼓作气，再而衰，三而竭。彼竭我盈，故克之，夫大国，难测也，惧有伏焉。吾视其辙乱，望其旗靡，故逐之。”</p>\n</details>\n<details>\n<summary><strong>邹忌讽齐王纳谏</strong></summary>\n<br>\n<p>作者：两汉 刘向</p>\n<br>\n<p>　　邹忌修八尺有余，而形貌昳丽。朝服衣冠，窥镜，谓其妻曰：“我孰与城北徐公美？”其妻曰：“君美甚，徐公何能及君也！”城北徐公，齐国之美丽者也。忌不自信，而复问其妾曰：“吾孰与徐公美？”妾曰：“徐公何能及君也！”旦日，客从外来，与坐谈，问之客曰：“吾与徐公孰美？”客曰：“徐公不若君之美也。”明日徐公来，孰视之，自以为不如；窥镜而自视，又弗如远甚。暮寝而思之，曰：“吾妻之美我者，私我也；妾之美我者，畏我也；客之美我者，欲有求于我也。”</p>\n<p>　　于是入朝见威王，曰：“臣诚知不如徐公美。臣之妻私臣，臣之妾畏臣，臣之客欲有求于臣，皆以美于徐公。今齐地方千里，百二十城，宫妇左右莫不私王，朝廷之臣莫不畏王，四境之内莫不有求于王：由此观之，王之蔽甚矣。”</p>\n<p>　　王曰：“善。”乃下令：“群臣吏民能面刺寡人之过者，受上赏；上书谏寡人者，受中赏；能谤讥于市朝，闻寡人之耳者，受下赏。”令初下，群臣进谏，门庭若市；数月之后，时时而间进；期年之后，虽欲言，无可进者。燕、赵、韩、魏闻之，皆朝于齐.此所谓战胜于朝廷。</p>\n</details>\n<details>\n<summary><strong>得道多助，失道寡助</strong></summary>\n<br>\n<p>作者：先秦 孟子及其弟子</p>\n<br>\n　　天时不如地利，地利不如人和。\n<p>　　三里之城，七里之郭，环而攻之而不胜。夫环而攻之，必有得天时者矣；然而不胜者，是天时不如地利也。</p>\n<p>　　城非不高也，池非不深也，兵革非不坚利也，米粟非不多也；委而去之，是地利不如人和也。</p>\n<p>　　故曰：域民不以封疆之界，固国不以山溪之险，威天下不以兵革之利。得道者多助，失道者寡助。寡助之至，亲戚畔之；多助之至，天下顺之。以天下之所顺，攻亲戚之所畔，故君子有不战，战必胜矣。</p>\n</details>\n<details>\n<summary><strong>谏太宗十思疏</strong></summary>\n<br>\n<p>作者：唐代 魏征</p>\n<br>\n<p>　　臣闻：求木之长者，必固其根本；欲流之远者，必浚其泉源；思国之安者，必积其德义。源不深而望流之远，根不固而求木之长，德不厚而思国之治，臣虽下愚，知其不可，而况于明哲乎？人君当神器之重，居域中之大，将崇极天之峻，永保无疆之休。不念居安思危，戒奢以俭，德不处其厚，情不胜其欲，斯亦伐根以求木茂，塞源而欲流长也。(望国 一作：思国)</p>\n<p>　　凡百元首，承天景命，莫不殷忧而道著，功成而德衰，有善始者实繁，能克终者盖寡。岂其取之易守之难乎？昔取之而有余，今守之而不足，何也？夫在殷忧必竭诚以待下，既得志则纵情以傲物；竭诚则吴、越为一体，傲物则骨肉为行路。虽董之以严刑，震之以威怒，终苟免而不怀仁，貌恭而不心服。怨不在大，可畏惟人；载舟覆舟，所宜深慎。奔车朽索，其可忽乎？</p>\n<p>　　君人者，诚能见可欲，则思知足以自戒；将有作，则思知止以安人；念高危，则思谦冲而自牧；惧满溢，则思江海下百川；乐盘游，则思三驱以为度；忧懈怠，则思慎始而敬终；虑壅蔽，则思虚心以纳下；惧谗邪，则思正身以黜恶；恩所加，则思无因喜以谬赏；罚所及，则思无以怒而滥刑。总此十思，宏兹九德，简能而任之，择善而从之，则智者尽其谋，勇者竭其力，仁者播其惠，信者效其忠；文武争驰，君臣无事，可以尽豫游之乐，可以养松乔之寿，鸣琴垂拱，不言而化。何必劳神苦思，代下司职，役聪明之耳目，亏无为之大道哉？</p>\n</details>\n<details>\n<summary><strong>师说</strong></summary>\n<br>\n<p>作者：唐代 韩愈</p>\n<br>\n　　古之学者必有师。师者，所以传道受业解惑也。人非生而知之者，孰能无惑？惑而不从师，其为惑也，终不解矣。生乎吾前，其闻道也固先乎吾，吾从而师之；生乎吾后，其闻道也亦先乎吾，吾从而师之。吾师道也，夫庸知其年之先后生于吾乎？是故无贵无贱，无长无少，道之所存，师之所存也。\n<p>　　嗟（jiē）乎！师道之不传也久矣！欲人之无惑也难矣！古之圣人，其出人也远矣，犹且从师而问焉；今之众人，其下圣人也亦远矣，而耻学于师。是故圣益圣，愚益愚。圣人之所以为圣，愚人之所以为愚，其皆出于此乎！爱其子，择师而教之；于其身也，则耻师焉，惑矣。彼童子之师，授之书而习其句读（dòu）者，非吾所谓传其道解其惑者也。句读之不知，惑之不解，或师焉，或不（fǒu）焉，小学而大遗，吾未见其明也。巫医乐师百工之人，不耻相师。士大夫之族，曰师曰弟子云者，则群聚而笑之。问之，则曰：“彼与彼年相若也，道相似也。位卑则足羞，官盛则近谀。”呜呼！师道之不复，可知矣。巫医乐师百工之人，君子不齿，今其智乃反不能及，其可怪也欤！</p>\n<p>　　圣人无常师。孔子师郯子（tán）、苌弘、师襄、老聃（dān）。郯子之徒，其贤不及孔子。孔子曰：三人行，则必有我师。是故弟子不必不如师，师不必贤于弟子，闻道有先后，术业有专攻，如是而已。</p>\n<p>　　李氏子蟠，年十七，好古文，六艺经传皆通习之，不拘于时，学于余。余嘉其能行古道，作《师说》以贻之。</p>\n</details>\n<details>\n<summary><strong>马说</strong></summary>\n<br>\n<p>作者：唐代 韩愈</p>\n<br>\n　　世有伯乐，然后有千里马。千里马常有，而伯乐不常有。故虽有名马，祇（zhǐ）辱于奴隶人之手，骈（pián）死于槽（cáo）枥（lì）之间，不以千里称也。\n<p>　　马之千里者，一食（shi）或尽粟（sù）一石(dàn)。食（sì）马者不知其能千里而食（sì）也。是马也，虽有千里之能，食（shí）不饱，力不足，才美不外见（xiàn），且欲与常马等不可得，安求其能千里也？</p>\n<p>　　策之不以其道，食（sì）之不能尽其材，鸣之而不能通其意，执策而临之，曰：“天下无马！”呜呼！其真无马邪（yé）？其真不知马也。</p>\n</details>\n<details>\n<summary><strong>茅屋为秋风所破歌</strong></summary>\n<br>\n<p>作者：唐代 杜甫</p>\n<br>\n<p>　　八月秋高风怒号，卷我屋上三重茅。<br>\n　　茅飞渡江洒江郊，高者挂罥长林梢，下者飘转沉塘坳。</p>\n<p>　　南村群童欺我老无力，忍能对面为盗贼，公然抱茅入竹去。<br>\n　　唇焦口燥呼不得，归来倚杖自叹息。</p>\n<p>　　俄顷风定云墨色，秋天漠漠向昏黑。<br>\n　　布衾多年冷似铁，娇儿恶卧踏里裂。<br>\n　　床头屋漏无干处，雨脚如麻未断绝。<br>\n　　自经丧乱少睡眠，长夜沾湿何由彻？</p>\n<p>　　安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山！<br>\n　　呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足！</p>\n</details>\n<details>\n<summary><strong>陋室铭</strong></summary>\n<br>\n<p>作者：唐代 刘禹锡</p>\n<br>\n<p>　　山不在高，有仙则名；水不在深，有龙则灵。斯是陋室，惟吾德馨。</p>\n<p>　　苔痕上阶绿，草色入帘青；谈笑有鸿儒，往来无白丁。</p>\n<p>　　可以调素琴，阅金经。无丝竹之乱耳，无案牍之劳形。</p>\n<p>　　南阳诸葛庐，西蜀子云亭。</p>\n<p>　　孔子云：“何陋之有？”</p>\n</details>\n<details>\n<summary><strong>爱莲说</strong></summary>\n<br>\n<p>作者：宋代 周敦颐</p>\n<br>\n<p>　　水陆草木之花，可爱者甚蕃。晋陶渊明独爱菊。自李唐来，世人甚爱牡丹。予独爱莲之出淤泥而不染，濯清涟而不妖，中通外直，不蔓不枝，香远益清，亭亭净植，可远观而不可亵玩焉。(甚爱 一作：盛爱)</p>\n<p>　　予谓菊，花之隐逸者也；牡丹，花之富贵者也；莲，花之君子者也。噫！菊之爱，陶后鲜有闻。莲之爱，同予者何人?牡丹之爱，宜乎众矣!</p>\n</details>\n<details>\n<summary><strong>送东阳马生序</strong></summary>\n<br>\n<p>作者：明代 宋濂</p>\n<br>\n<p>　　余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 ，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p>\n<p>　　当余之从师也，负箧曳屣，行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。</p>\n<p>　　今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p>\n<p>　　今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵《诗》《书》，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p>\n<p>　　东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达，与之论辩，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣！其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知余者哉！</p>\n</details>"
  },
  {
    "id": 62,
    "title": "我的歌声里",
    "labels": "音乐爱好者",
    "created_at": "2019-09-07T10:46:05Z",
    "updated_at": "2019-09-07T11:52:24Z",
    "body_html": "<h2>国语</h2>\n<h3>信仰告白</h3>\n<ul>\n<li>这一生最美的祝福</li>\n<li>十字架的传达者</li>\n<li>我愿为你去</li>\n<li>愿为你歌唱</li>\n<li>活祭</li>\n<li>活石</li>\n<li>只愿得着你</li>\n<li>幸福</li>\n<li>宁静的伯利恒</li>\n<li>竭诚献上</li>\n<li>哈利路亚（哈利路亚，你真实奇妙）</li>\n<li>祂的爱 - 以斯拉</li>\n<li>靠着耶稣得胜</li>\n<li>主如明亮晨星</li>\n<li>耶和华神已掌权</li>\n</ul>\n<h3>爱</h3>\n<ul>\n<li>白 - 吴奇隆</li>\n<li>爱的故事上集 - 孙耀威</li>\n<li>Take Me To Your Heart - Michael Learns To Rock</li>\n<li>每天爱你多一些 - 张学友</li>\n<li>爱很简单 - 张学友</li>\n<li>当你老了 - 李健</li>\n<li>第一次遇见 - 信心使者音乐事工</li>\n<li>爱你一万年 - 刘德华</li>\n<li>一路上有你 - 张学友</li>\n<li><a href=\"https://www.zanmeishi.com/player/zan.html\" rel=\"nofollow\">永远爱你</a></li>\n</ul>\n<h3>释放</h3>\n<ul>\n<li>狂流 - 齐秦</li>\n<li>故乡 - 许巍</li>\n<li>给你们 - 张宇</li>\n<li>男人哭吧不是罪-刘德华</li>\n<li>笨小孩 - 刘德华</li>\n<li>Hi！自由</li>\n</ul>\n<h3>歌手</h3>\n<ul>\n<li>刘德华\n<ul>\n<li>忘情水</li>\n<li><a href=\"https://music.163.com/#/artist?id=3691\" rel=\"nofollow\">天意</a></li>\n<li><a href=\"https://music.163.com/#/artist?id=3691\" rel=\"nofollow\">冰雨</a></li>\n<li>练习</li>\n<li>今天</li>\n<li>缠绵</li>\n<li>谢谢你的爱</li>\n<li>男儿志</li>\n<li>谢谢你的爱</li>\n<li>真永远</li>\n<li>如果你是我的传说</li>\n</ul>\n</li>\n<li>张学友\n<ul>\n<li>爱我别走</li>\n<li>心如刀割</li>\n<li>忘记你我做不到</li>\n<li><a href=\"https://music.163.com/#/song?id=187950\" rel=\"nofollow\">爱如潮水</a></li>\n<li>情书</li>\n<li>如果这都不算爱</li>\n<li>吻别</li>\n<li>一千个伤心的理由</li>\n</ul>\n</li>\n<li>张卫健\n<ul>\n<li>月圆了</li>\n<li>一夜年少</li>\n<li>其实你爱我像谁</li>\n<li>真英雄</li>\n<li>身体健康</li>\n</ul>\n</li>\n<li>张国荣\n<ul>\n<li>我</li>\n<li>当爱已成往事</li>\n<li>月亮代表我的心</li>\n</ul>\n</li>\n<li>张宇\n<ul>\n<li>雨一直下</li>\n<li>月亮惹的祸</li>\n<li>用心良苦</li>\n<li>囚鸟</li>\n</ul>\n</li>\n<li>任贤齐\n<ul>\n<li>春天花会开</li>\n<li><a href=\"https://music.163.com/#/song?id=144083\" rel=\"nofollow\">还有我</a></li>\n</ul>\n</li>\n<li>陈奕迅\n<ul>\n<li>稳稳的幸福</li>\n<li>等你爱我</li>\n<li>好久不见 -</li>\n</ul>\n</li>\n</ul>\n<h3>其他</h3>\n<ul>\n<li>心升明月-李健</li>\n<li><a href=\"https://music.163.com/#/song?id=145454\" rel=\"nofollow\">珍惜-苏有朋</a></li>\n<li><a href=\"https://music.163.com/#/song?id=145644\" rel=\"nofollow\">背包-苏有朋</a></li>\n<li><a href=\"https://music.163.com/#/artist?id=6731\" rel=\"nofollow\">成都-赵雷</a></li>\n<li><a href=\"https://music.163.com/#/playlist?id=569020058\" rel=\"nofollow\">牵挂你的我-林志颖</a></li>\n<li><a href=\"https://music.163.com/#/song?id=147179\" rel=\"nofollow\">我知道你在等我-孙耀威</a></li>\n<li><a href=\"https://music.163.com/#/artist?id=8329\" rel=\"nofollow\">胆小鬼-梁咏琪</a></li>\n<li>当 - 动力火车</li>\n<li>挪威的森林 - 伍佰</li>\n<li>我可以抱你吗 - 张惠妹</li>\n<li>因为爱所以爱 - 谢霆锋</li>\n<li>爱情木瓜 - 龙飞龙泽</li>\n<li><a href=\"https://music.163.com/#/artist?id=10558\" rel=\"nofollow\">笔记-周笔畅</a></li>\n<li><a href=\"https://music.163.com/#/song?id=5272940\" rel=\"nofollow\">飘摇-周迅</a></li>\n<li>爱不爱我</li>\n<li>黄昏 - 周传雄</li>\n<li>斑马斑马</li>\n<li>爱相随 - 周华健</li>\n<li>有多少爱可以重来 - 迪克牛仔</li>\n</ul>\n<h2>粤语</h2>\n<ul>\n<li>Beyond\n<ul>\n<li>海阔天空</li>\n<li>光辉岁月</li>\n<li>真的爱你</li>\n<li>喜欢你</li>\n<li>大地</li>\n<li>长城</li>\n</ul>\n</li>\n<li>刘德华\n<ul>\n<li>17 岁</li>\n<li>如果有一天</li>\n<li><a href=\"http://www.kugou.com/song/3qdc37.html?frombaidu#hash=DDD043F7F3500B8E1298838DF6C6E060&amp;album_id=0\" rel=\"nofollow\">当我遇上你</a></li>\n<li><a href=\"https://music.163.com/#/song?id=29723022\" rel=\"nofollow\">暗里着迷</a></li>\n<li><a href=\"http://www.kugou.com/song/5bwbe5.html#hash=829155218275AA66F99716174B3FDB9E&amp;album_id=0\" rel=\"nofollow\">谢谢你的爱</a></li>\n<li>一起走过的日子</li>\n</ul>\n</li>\n<li>张国荣\n<ul>\n<li>千千阙歌</li>\n<li>风继续吹</li>\n<li>当年情</li>\n</ul>\n</li>\n<li>张学友\n<ul>\n<li>遥远的她</li>\n<li><a href=\"https://music.163.com/#/song?id=35041000\" rel=\"nofollow\">道道道</a> -</li>\n<li><a href=\"https://music.163.com/#/song?id=190803\" rel=\"nofollow\">只愿一生爱一人</a></li>\n<li>约定</li>\n</ul>\n</li>\n</ul>\n<h3>其他</h3>\n<ul>\n<li>男儿当自强 - 林子祥</li>\n<li><a href=\"https://music.163.com/#/song?id=152392\" rel=\"nofollow\">讲不出再见-谭咏麟</a></li>\n<li>明年今日 - 陈奕迅</li>\n</ul>\n<h2>期待尝试</h2>\n<ul>\n<li>遥望 - Beyond</li>\n<li>谁伴我闯荡  - Beyond</li>\n<li>你是我的女人 - 刘德华</li>\n<li>等你等到我心痛 - 张学友</li>\n<li><a href=\"https://music.163.com/#/song?id=376417\" rel=\"nofollow\">一生有你 - 水木年华</a></li>\n<li>今天是你的生日，妈妈 - 李健</li>\n<li>小城大事 - 杨千嬅</li>\n<li>终身美丽 - 郑秀文</li>\n<li><a href=\"https://music.163.com/#/song?id=2080326\" rel=\"nofollow\">Nothing's Gonna Change My Love For You</a></li>\n<li><a href=\"https://music.163.com/#/song?id=1210461\" rel=\"nofollow\">What Are Words</a></li>\n<li><a href=\"https://music.163.com/#/song?id=3986241\" rel=\"nofollow\">Yesterday Once More</a></li>\n</ul>"
  },
  {
    "id": 61,
    "title": "你爱我吗？",
    "labels": "语思",
    "created_at": "2019-09-02T04:06:33Z",
    "updated_at": "2019-12-30T04:42:33Z",
    "body_html": "<h1>你爱我吗</h1>\n<p>—— 莱尔《圣洁》</p>\n<h2>第十五章 你爱我吗？</h2>\n<p>　　你爱我吗？（约21:16）</p>\n<p>　　这是基督问使徒彼得的问题。不会有一个比这更重要的问题了。自从这问题问了以来，已经有一千八百多年过去了。然而，对于今日的我们来说，这个问题仍是最深刻的、最有益的。</p>\n<p>　　想要去爱别人的倾向，是上帝放在人之天性里面的一个自然的感受。不幸的是，太多时候，人们把他们的感情用在不配的对象之上。今日我想要宣告，唯独基督自己才配得我们心中最美好的感情。我愿人们能去爱这一位爱我们、为我们舍己的圣者。在我们所有爱的情怀中，不要忘记爱基督。</p>\n<p>　　读者，请容我将这个重大的主题深深地刻印在你的心中。这不只是“狂热分子”才关心的问题。每一个相信圣经的基督徒都要认真思考这个问题。我们的得救与此紧密相联。或生或死，或天堂或地狱，都与我们如何回答这个问题相连：“你爱基督吗？”</p>\n<p>　　首先我要讨论两点。</p>\n<h2>一、一个真基督徒对基督独有的情感</h2>\n<p>　　首先，让我说明一个真基督徒对基督独有的感情是什么——他爱他。</p>\n<p>　　一位真基督徒并不只是一个受过洗的人，他要比这更多。他并不只是一个在星期天形式上去教会，在一周里却活得好像没有上帝的人。形式主义不是基督教，有口无心的敬拜也不是真信仰。圣经说得很明白：“从以色列生的，不都是以色列人。”（罗9:6）这些话的实际应用是显而易见的。所有在一个可见教会中的成员并不都是真基督徒。</p>\n<p>　　对于一个真基督徒而言，信仰是在他的心中，在他的生命中。信仰是被他的心灵真实感受的：别人从他的日常行事为人中看到他的信仰。他感受到自己的罪性、过犯和败坏，并为此悔改。他看基督是他的灵魂所需要的那一位救主，并且委身于他。他脱去旧人及旧人败坏的、属肉体的恶习，并且穿上新人。他活出一个全新、圣洁的生命，不断地与世界、肉体和魔鬼争战。基督自己是他的信仰的中心和基石。你若问他，他靠着什么获得罪的赦免，他会告诉你，是靠着基督的受死。你若问他，在审判之日，他凭着什么称义，被看为无罪，他会告诉你，是靠着基督的义。你若问他，他的生活是以什么为标准，他会告诉你，他是以基督作为榜样。</p>\n<p>　　然而，在这些之外，有一样事情对于真基督徒而言，是格外独有的。那就是对基督的爱。知识、信心、盼望、敬畏、顺服都是一个真基督徒之性情的特征。但是如果没有对他的主人的爱，这幅图画就会残缺不全。他不仅认识、信靠和顺服，他要比这行得更远——他爱。</p>\n<p>　　圣经中常常提及这一真基督徒所特有的记号。我们都很熟悉这样的话：“对我们的主耶稣基督的信心。”让我们永远不要忘记，圣灵强调爱，就像强调信心一样。对于“不信之人”，存在怎样的危险，对于“不爱之人”，也存在怎样的危险。不信以及不爱，都会导致永远的灭亡。</p>\n<p>　　听听保罗是如何对哥林多人说的：“若有人不爱主，这人可咒可诅。”（林前16:22）对于不爱基督的人，保罗绝不留任何余地。保罗不给他任何退路或借口。一个人也许在头脑的知识上不足，但是他可以得救。他可能在勇气上缺乏，因着对人的惧怕而跌倒，就像彼得。他可能像大卫一样大大地跌倒了，但是他还能兴起。然而，如果一个人不爱基督，他就不是行在生命之路上。咒诅在他的身上，他是走在引向灭亡的宽路上。</p>\n<p>　　听听保罗是如何对以弗所人说的：“愿所有诚心爱我们主耶稣基督的人都蒙恩惠！”（弗6:24）使徒在这里发出他的祝福，宣告他对所有真信徒的美好心愿。毫无疑问，对其中许多人，保罗素未谋面。我们也能比较确定地知道，在早期教会中，有许多信徒他们的信心是软弱的，在知识上和舍己上都不够。那么，保罗在给他们的信中，如何描述他们呢？用什么话，才可以不使这些软弱的弟兄们灰心呢？保罗选择了一个表达方式，适用全体真基督徒。无论是在教义知识上，还是在生命实践上，各人的地步都不同，但他们都有一个共同点，就是诚心地爱基督。</p>\n<p>　　听听主耶稣自己是如何对犹太人说的：“倘若上帝是你们的父，你们就必爱我。”（约8:42）他看到他的敌人对自己的属灵光景有一种虚假的满足，单单是因为他们是亚伯拉罕的后裔。他们认为自己是上帝的儿女，只是因为他们受了割礼，他们属于犹太教的群体。今天的许多基督徒也是如此地无知。主给出一个原则，就是人若不爱上帝的独生子，他就不是上帝的儿女。若一个人不爱基督，他就无权称上帝为他的父。若今日的基督徒能够知道，这一原则不仅适用于犹太人，也适用于今天的我们，就会使我们大得益处了。没有对基督的爱，就没有儿子的名分！</p>\n<p>　　让我们再来听听复活后的主是如何对彼得说的。他三次问他这个问题：“约翰的儿子西门，你爱我吗？”（约21:15—17）请注意问这个问题的场合。主是要温柔地提醒彼得的三次失败。主想要使彼得有重新的认信，然后再公开地恢复彼得牧养群羊的使命。主问他的问题是什么呢？主本可以问他：“你信我吗？”“你归正了吗？”“你准备口中承认我吗？”“你顺服我吗？”但主没有问这些问题。主只是问：“你爱我吗？”主要让我们知道，我们的信仰与这一点紧密相联。虽然这个问题看起来很简单，但是却非常深刻。这个问题是如此简单和直白，以至于最没有学问的人也可以明白，它所包含的内容，使最有学问的人面对自己的真相。如果一个人真的爱基督，那么一切都好，如果不是，那么都是错的。</p>\n<p>　　这样对基督独有的爱，使真基督徒区别出来，你想知道这样爱的秘诀是什么吗？在使徒约翰那里有答案：“我们爱，是因为他先爱了我们。”（约一4:19）这句经文无疑是指父神，但同样也是指圣子。</p>\n<p>　　一个真基督徒因基督为他所做的而爱他。基督替他受难，并且为他死在十字架上。借着自己的血，基督把他从罪的权势、刑罚和后果中拯救了出来。借着圣灵，基督呼召一个人进入觉醒、悔改、信、望和圣洁的地步。他赦免了他许多的罪，将它们洁除干净。基督又救他脱离世界、肉体和魔鬼的辖制。基督救他脱离了地狱，使他走在窄路之上，并且使他定睛在天国。基督使他出黑暗入光明，以良心的平安代替内心的不安，以盼望代替迷茫，以生命代替死亡。一个真基督徒会爱基督，你奇怪吗？</p>\n<p>　　他也为基督仍旧为他所做的一切而爱他。他感受到基督在每天中洁除他的过犯与软弱，并且为他灵魂的缘故在上帝的面前代求。基督供应他每日灵魂的需要，并且在每一刻以怜悯和恩慈待他。在每一天中，基督以圣灵引领他走向上帝之城，在他软弱和无知的时候忍耐他，当他跌倒和摇摆的时候兴起他，保护他脱离许多的仇敌，为他在天上预备了一个永恒的家园。一个真基督徒会爱基督，你奇怪吗？</p>\n<p>　　一个人因欠债住进了监狱，他的朋友出乎他意料之外偿还了他所有的债务，提供给他新的资金，并且愿意和他建立伙伴关系，这个人难道不爱他的这位朋友吗？一个人在战场上被俘虏，他的朋友冒着生命危险，突入敌后，把他救了出来，他难道不爱他的这位朋友吗？一个水手，就快淹死了，他的朋友跳入海中，向他游去，抓住他，竭尽全力把他从水的坟墓中救了出来，他难道不爱他的这位朋友吗？一个孩子都能回答这样的问题。同样道理，基于同样原则，一个真基督徒会爱耶稣基督。</p>\n<p>　　<strong>1.对基督的爱，是与得救的信心不可分割的。魔鬼的信，只是在知识上的信，人也可以有这样的信，却没有爱，而这样的信不能救人。爱不能篡夺信的功用，爱不能使人称义，爱不能使灵魂与基督联合，爱也不能给良心带来平安。但是有真正的在基督里称义之信心的地方，就总是有对基督的发自内心的爱。赦免多的，他的爱就多（路7:47）。如果一个人对基督没有爱，我们可以肯定他不具有信心。</strong></p>\n<p>　　<strong>2.对基督的爱是为主做工的泉源。若只是出于责任，或是出于对是非的知道，那么我们在地上能为主做的就非常有限。在手开始工作、并且持续工作之前，我们的心必须产生兴趣。兴奋感或许能一时激励基督徒去做一阵子的工作，但是若没有爱，人没有持续行善的耐心，无论在家，还是在外，都不能不知疲倦地做工。一个护士能够在医院中很好地完成她的职责，在恰当的时候给病人吃药，给病人喂饭，服侍他，照顾他的需要。但是在这个护士和一位照看自己的孩子的母亲，或照看自己丈夫的妻子之间有很大的区别。前者所做的是出于责任，后者所做的是出于爱和关怀。前者完成她的责任是因为她为此得到工资，后者是发自内心。对于服侍基督，也是如此。教会中那些伟大的工人，那些在宣教工场上孤独地战斗的人，那些改变了世界的人，他们都对基督有着热忱的爱。</strong></p>\n<p>　　看一看欧文和巴克斯特，看一看拉瑟福德和乔治·赫伯特（George Herbert），看一看莱顿（Leighton）和赫维（Hervey），看一看怀特菲尔德和卫斯理，看一看亨利·马廷和贾德森（Judson），看一看比克斯特思（Bickersteth）和西米恩（Simeon），看一看休伊森（Hewitson）和麦克谦，看一看斯托厄尔（Stowell）和麦尼尔（M’Neile）。这些人都影响了这个世界。他们共有的特征是什么呢？他们都爱基督。他们不只是有一些信条。他们爱那一位，就是耶稣基督。</p>\n<p>　　<strong>3.在我们教育孩童的时候，对基督的爱是我们特别需要注意的一点。拣选、义的归算、原罪、称义、成圣，甚至信心的教义，有时会使一个幼童感到难懂。但是他们似乎更容易明白对基督的爱。基督爱他们，甚至为他们死了，他们也应该爱基督，这是他们容易明白的。这话是多么的对：“你从婴孩和吃奶的口中完全了赞美的话。”（太21:16）有一些基督徒通晓《阿塔那修信经》、《尼西亚信经》和《使徒信经》，但是他们的信仰可能不比只懂得爱基督的孩子实在。</strong></p>\n<p>　　<strong>4.对基督的爱是地上基督教会不同派别信徒的共同点。无论是主教制还是长老会，浸信会还是公理会，加尔文主义者还是阿明尼乌主义者，卫理会还是摩拉维亚弟兄会，信义宗还是改革宗，联合教会还是独立教会——至少在这一点上，他们都同意。在形式和礼仪上，在教会建制和敬拜方式上，他们常常有很大的不同。但是在这一点上，他们是一致的。他们对那一位赐给他们救恩盼望的，都怀着同样的感情。他们诚心爱主耶稣基督（弗6:24）。他们中间的许多人，可能不知道系统神学，也可能不能很好地为自己所持的信条争辩，但是他们晓得他们对为他们而死的那一位怀着怎样的情感。一位没有受过什么教育的老太太对查尔默斯（Chalmers）博士说：“我不会说什么，但是若我不能为基督说什么，我愿为他而死!”</strong></p>\n<p>　　<strong>5.在天国，对基督的爱是所有得救圣徒的特有记号。那许许多多数不过来的人，他们有同一个心思。旧有的分歧在同一份感情里化解了。原来曾为之激烈争辩过的教义上的细节，现在被共同的对基督的感恩遮盖了。路德和茨温利不会再争辩了，卫斯理和托普莱迪（Toplady）也不会再花时间冲突了，从国教者和不从国教者也不会再彼此相咬相吞了。所有人都会口唱心和于这一首赞美诗：“他爱我们，用自己的血使我们脱离罪恶，又使我们成为国民，作他父神的祭司。但愿荣耀、权能归给他，直到永永远远。阿们！”（启1:5—6）</strong></p>\n<p>　　班扬所描写的“坚定先生”（Mr. Standfast），当他站在死亡河旁边时所说的话，真是非常优美：“对许多人来说，此河使人望而生畏；确实，过去我想到它时也是胆战心惊，可现在我觉得自己站立得很稳。我立足之处，正是当年以色列人过约旦河时抬约柜的祭司站立的地方。河水的确尝起来味苦，又冰冷，但一想到我要去见神，以及在对岸等待我、迎接我的人时，我的心就炽如炭火。我知道我已经走完了我的路程，我劳苦的日子即将结束。我即将看到戴着荆棘冠冕和为我而遭人吐唾沬在脸上的耶稣。我以前靠传闻和信心而生活，而现在我是去住在那里，能亲眼看见他，在那里能喜乐地与主相伴。我素来喜欢听人称道我主；凡我主在世上走过的地方，我总渴望能走在他的脚印上。主的名对我犹如一只麝香盒，比一切的香料更芳香！主的声音最甜美，我渴望见到主的面容，胜过那些渴慕见到阳光的人!”那些能够体认这些话的人有福了！那些预备好进入天国的人，必须晓得对基督的爱。那些在死时也不懂这样的爱的人，他们最好从来不曾生在这世上。</p>\n<h2>二、对基督的爱彰显出来的记号</h2>\n<p>　　现在让我说明，对基督的爱，是如何显明其自身的。</p>\n<p>　　这一点非常重要。如果没有对基督的爱，就显明没有救恩，如果不爱基督的人，将面对永远被咒诅的境地，那么，我们就应明确地知道对基督的爱是怎样的。基督在天上，我们在地上，我们如何知道我们爱他呢？</p>\n<p>　　好在这并不是一件非常难的事。在地上，我们如何知道我们爱一个人呢？在地上的人与人之间、丈夫妻子之间、父母儿女之间、弟兄姐妹之间以及朋友和朋友之间，爱是以怎样的方式来表达自己的呢？借着观察与常识，我们可以回答这些问题。让我们本着诚实来回答这些问题，解开这个结。在我们中间，情感是如何表达的呢？</p>\n<p>　　<strong>1.如果我们爱一个人，我们喜欢常常想念他。我们不需要被提醒去想他。我们不会忘记他的名字，他的性格，他的观点，他的口味，他的立场，他的职业。一天中，他常常出现在我们的心中。或许离得很远，但是他总在我们的思绪中。噢，在基督和真基督徒之间也是如此啊！基督住在他的心里，每一天或多或少都被思念（弗3:17）。真基督徒不需被提醒，他有一位主，为他钉了十字架。他总在想他。他不会忘记，基督的再来，基督的使命和基督的百姓，而他是他的百姓之一。在信仰中，有一个好的记忆，在于要有感情。除非谈到了，世上的人不会想起基督，因为他们对他毫无感情。真基督徒在他活着的每一天中都会思想基督，只是因为一个理由，就是他爱他。</strong></p>\n<p>　　<strong>2.如果我们爱一个人，我们会喜欢听到关于他的事情。我们喜欢听别人讲论他，对任何关于他的报道，我们都兴趣十足。当别人谈论他，描述他的行事为人，他说的话，他的所行和他的计划，我们就会全神贯注地听。别人听到他被提及的时候无动于衷，但是当我们听到他的名字的时候，我们的心就会跳动。噢，在基督和真基督徒之间也是如此啊！真基督徒喜欢听到有关他的主人的事情。他最喜欢那些被基督充满的讲道。他最喜欢和谈论基督的人在一起。我曾听说过一个威尔士老姊妹的故事，她听不懂一句英文，但是她在每个主日走好几里路去听一位英国传道人的讲道。有人问她为何如此，她回答说，是因为这位英国传道人在他的讲道中不断提到基督的名字，这便使她受益。单单是她的救主的名字被提到，她就喜欢。</strong></p>\n<p>　　<strong>3.如果我们爱一个人，我们会喜欢读到有关他的事情。一个离家在外的丈夫写来的信，能带给妻子多大的喜乐；一个远在异地他乡儿子的来信，能给母亲带来多大的欢欣！然而别人却不会为这样的信动容，他们甚至很难把信读一遍。但是那些爱写信者的人，他们能够读到别人不能读到的东西。他们会把信当作宝物随身携带。他们读了一遍又一遍。噢，在基督和真基督徒之间也是如此啊！真基督徒喜欢读圣经，因为圣经讲的是关乎他的救主的故事。读它不会使他感到疲倦。当他出门的时候，也不用提醒他要把圣经带上。若没有圣经，他不会快乐。为何如此？因为圣经所见证的乃是他灵魂所深爱的，就是基督。</strong></p>\n<p>　　<strong>4.如果我们爱一个人，我们想要讨他喜悦。我们很乐意考虑他的口味和观点，采纳他的建议，并且做他所认可的事情。我们可以舍己去满足他的愿望，避免去做那些我们知道他不喜欢的事情，而我们会去学那些我们本不喜欢的事情，只是因为我们想那会使他喜悦。噢，在基督和真基督徒之间也是如此啊！真基督徒借着保守身体和内心的圣洁来努力讨主的喜悦。若他知道在他的日常行为中有什么事是让基督憎恶的，他就不再去做。任何讨基督喜悦的事情，他就努力去做。他不会像一个今世之子一样，抱怨基督的命令太严苛或太难。对他而言，基督的命令不是令人忧愁的，基督的担子是轻省的。为何如此呢？单单是因为他爱他</strong>。</p>\n<p>　　<strong>5.如果我们爱一个人，我们会爱他的朋友。在我们认识他们之前，我们就已经和他们心有灵犀。对同一个人共同的爱使我们连结在一起。当我们相遇的时候，我们并不觉得彼此有陌生感。有一样东西把我们连结。他们爱的正是我们所爱之人，这就拉近了我们彼此。噢，在基督和真基督徒之间也是如此啊！真基督徒把基督的朋友都当作自己的朋友，是同一个身体上的肢体，是同一个家庭里的儿女，是同一支军队中的战友，是同有一个天家的天路客。当我们遇到他们的时候，我们感觉好像已经认识很久了。与他们只相处片时，我们就觉得是一家人，胜过和我们相识多年的世上的朋友。这一切的秘密是什么？单单是因为我们爱的是同一位主和救主。</strong></p>\n<p>　　<strong>6.如果我们爱一个人，我们会为他的名和他的尊严大发热心。我们不喜欢听到别人说敌对他的话，我们必然会为他争辩，会为他说话。我们感到有责任维护他的利益和他的名誉。对任何敌对他的人，我们几乎感到就是敌对我们。噢，在基督和真基督徒之间也是如此啊！对任何羞辱基督的名、基督的道、基督的教会和基督的审判的作为，真基督徒都会怀着神圣的憎恶。若必要，他会在君王面前为基督作见证，并敏感于哪怕最微小的加在基督身上的不敬。如果有人羞辱他主人的名，一个真基督徒不会视而不见却心里平安，他会为主争辩。为何如此呢？只是因为他爱他。</strong></p>\n<p>　　<strong>7.如果我们爱一个人，我们会喜欢和他讲话。我们会把自己的想法都告诉他，我们会向他倾心吐意。我们会有说不完的话题。也许我们会对别人沉默和保留，但是对我们所爱的人，我们会爱说话。尽管我们和所爱的人常见面，但是我们彼此间的话题永不枯竭。我们总有太多要说的，太多要问的，太多要描述的，太多要交流的。噢，在基督和真基督徒之间也是如此啊！真基督徒发觉对他的救主说话不是一件困难的事。每一天中，他总有事情要和他讲，若不说出来，他就不快乐。早上和晚上，在祷告中他向主诉说。他告诉他自己的需要和愿望，自己的感受和惧怕。在艰难时刻，他会寻求他的带领。在患难时刻，他会寻求他的安慰。他不能不这么做。他必须要不住地和他的救主交通，否则他就会无力行路。为何如此？只是因为他爱他。</strong></p>\n<p>　　<strong>8.最后，我们若爱一个人，我们喜爱和他在一起。想他，听他，读他，间或和他说说话，这都是自然而然的事情。但是如果我们真爱一个人，我们想要的不止于此。我们总想和他们结伴而行。我们想要不断地和他们处在一个交往圈子中，不会被打扰，也不会分离。噢，在基督和真基督徒之间也是如此啊！真基督徒的心渴望那美好的一天，就是和他的主就要面对面的那一天，并从此不再分开。他渴望结束今生不断认罪、悔改、凭着信心而活的生活，渴望开始那永恒的生活，那时，他认识主，就像今天被主认识一样，并且永远不会再犯罪了。今天凭着信心生活，在他是甜蜜的事情，而将来与主面对面而活，对他来讲，更为甘美。今天他在心中喜悦听到基督，谈论基督，读到基督。那么，有一天他要亲眼见到基督，并且永永远远不再分离，那又该是怎样的美妙！“眼睛所看的，比心里妄想的倒好。”（传6:9）为何如此呢？单单因为他爱他。</strong></p>\n<p>　　这些就是我们发现的真爱的标记。它们都是很直白、简单的，都是一目了然的。没有什么幽暗、抽象和神秘之处。诚实地使用这些标记，合理地对待它们，你一定会从这篇文字中得着益处。</p>\n<p>　　也许你有一个所爱的儿子在印度叛乱时期或克里米亚战争时期参军了。也许他上了前线，并且参与了战斗。你难道不记得你对儿子的思念是怎样地强烈、深沉和充满挂虑吗？那就是爱！</p>\n<p>　　也许你的丈夫在海军服役，因着任务，常常离家很多个月，甚至多年。难道你不记得分别时的忧伤吗？那就是爱！</p>\n<p>　　也许此时此刻你就有一个兄弟在伦敦谋生，他是第一次去到那个大城市，面对许多的试探。他的前景会怎么样呢？他会发展得如何呢？你会再见到他吗？难道你不会常常思念你的兄弟吗？那就是爱！</p>\n<p>　　也许你已经和一个与你非常相配的女子订婚了，但是出于深思熟虑，你们要再等候一段时间才结婚，同时因为工作需要，你又要离开你所爱的未婚妻到很远的地方。难道你不承认，她常常浮现在你的心中，你想要听到她的消息，听到她的声音，想要见到她吗？那就是爱！</p>\n<p>　　我所说的是每个人都很熟悉的事情。我不必再多说了。它们和天地一样古老。它们为全世界的人所了解。亚当的后裔中，恐怕很难找到不明白爱与情感的人。既是这样，我们就不要说，我们不知道自己是否真的爱基督。这是可以知道的，是可以被发觉的，证据已经在你的掌握之中。今天你已经听到它们了。对主耶稣基督的爱不是隐藏的、秘密的、捉摸不透的事。这爱却如同光，是可以被察觉的。这爱如同声音，是可以被听到的。这爱如同热，是可以被感知的。这爱所在的地方，它就不被隐藏。在这爱不被看见之处，你就可以肯定这爱不在那里。</p>\n<p>　　现在我要作结论了，但是对每一位读到本文的读者，我还要把这个题目牢牢地印在他们的良知之中。我愿以完全的爱和深情对你说话。写此文的时候，我心所愿，和我在上帝面前的祷告，就是愿你的灵魂能够蒙造就。</p>\n<p>　　<strong>1.让我请求你做一件事，就是直面基督问彼得的问题，并且你自己来回答它。严肃地面对它，认真地思考它，好好地权衡它，读过了我所写的，你能诚实地说自己爱基督吗？</strong></p>\n<p>　　你说你相信基督教的教义，并且承认基督教的信条，这不是我要的回答。这样的信仰并不能拯救你的灵魂。“鬼魔也信，却是战惊。”（雅2：19）真正的、救人的基督教，并不只是相信一套观点，或是承认某些理论，它的核心是认识、信靠并且爱那一位为我们舍命的活着的主，就是主基督。早期的基督徒，像非比（Phoebe）、彼息氏（Persis）、土非拿氏（Tryphena）、土富撒氏（Tryphosa）、该犹（Gaius），以及腓利门（Philemon），他们可能对教义神学知道得很少，但是他们在自己的信仰中都有一个突出的特点，就是爱基督。</p>\n<p>　　你说你不赞同一个强调情感的宗教，这也不是我要的回答。如果你的意思是，你反对一个只谈感觉，不谈其他的宗教，我完全赞同你。但如果你的意思是完全把情感排除在外，你就是对基督信仰知之甚少。圣经清楚地告诉我们，一个人可能感觉良好，但是他没有真信仰。然而，圣经也同样清楚地告诉我们，一个真正的信仰，不会没有对基督某种程度的情感。</p>\n<p>　　隐藏一个事实是徒劳的，就是你若不爱基督，你的灵魂落在极大的危险之中。当你活着的时候，你的信仰不能救你。当你死的时候，你也不适合天堂。那些在活着时候不爱基督的人，他们感受不到对基督的任何责任；那些在死的时候不爱基督的人，要知道他们在天堂也不会幸福，因为在天上基督是一切，又在一切之中。醒过来吧，知道你所处的险境。睁开你的眼睛吧，认真考虑你前面的道路，三思而行。我只能作为一个朋友来劝告你，但我是真心实意的。愿上帝使这警告不落空！</p>\n<p>　　<strong>2.其次，如果你不爱基督，让我直截了当地告诉你为什么。你对他没有欠债之感。你感受不到对他的亏负。你没有持久的从他蒙恩的记忆。若是这种情形，你没有可能，没有理由，也没有道理爱他。</strong></p>\n<p>　　对于此种情形，只有一个解决办法，就是认识自己以及圣灵的教导。你悟性的眼睛必须要张开。你必须要明白你的本相是怎样的。你必须领悟到那个至大的秘密，就是你的罪咎和你在上帝眼中的完全贫乏。</p>\n<p>　　也许你从来没有读过你的圣经，或只是偶尔翻阅一下，当作一种形式，你没有兴趣，不能明白，也不能应用在自己身上。今天请接受我的建议，改变你的方向。开始以热心来读圣经，绝不放弃，直到你熟悉它。读一读上帝所要求的律法，以及主耶稣是如何在登山宝训中解释它们的。读一读保罗在《罗马书》的前两章中对人性的描写。以祷告的心研读这些经文，祈求圣灵的带领，然后你自己判断，在上帝面前你是否是一个亏负者，你的亏缺是如此巨大，以至于你需要耶稣这一位朋友的帮助。</p>\n<p>　　也许你从来不知道什么是真诚的、发自肺腑的、正式的祷告。也许你一直以为信仰不过是去聚会，上教堂，是一种形式，是礼拜天的程序，却不晓得信仰要求我们心灵深处真切的、严肃的感受。今天请接受我的建议，改变你的方向。开始养成以热忱之心为你的灵魂向上帝恳求的习惯。向上帝祈求光照、教导与自我认识。恳求上帝启示给你一切关乎你灵魂得救之事。全心全意地做这一件事，我相信，不久你就会发觉你对基督的需要。</p>\n<p>　　我的建议看起来很简单，并且了无新意，请不要因此就轻看它。这是许多人走过的美好古道，并且因此使他们的灵魂获得平安。若无对基督的爱，面对的便是永远毁灭的危险。看到你对基督的需要，看到你对基督极大的亏负，是你迈向爱他的第一步。认识你自己，发现你在上帝面前的本相，是你看到你的需要的唯一途径。好好读上帝启示的圣经，在祷告中请求上帝的光照，这是你获得救恩知识的正确方法。不要自以为比我的建议髙明。接受我的建议吧，以致得救。</p>\n<p>　　<strong>3.最后，如果你真的晓得爱基督，那么请接受我末了的两句安慰与劝勉之言。愿上帝使用它们来使你获益。</strong></p>\n<p>　　首先，如果你在真理中，并在行动上爱基督，因此欢喜快乐吧，因为这显明了你的灵魂处在良好的光景中。今天我告诉你，爱是蒙恩的一个明证。</p>\n<p>　　但是，如果有的时候你还是感到疑惑和恐惧怎么办？如果你觉得不能确知自己的信是否真诚，自己的蒙恩是否真实，怎么办？如果你的眼睛常常被泪水蒙住，你不能清楚地晓得你的蒙召与被上帝拣选，怎么办？如果你的心见证说你爱基督，那么就有盼望与安慰的牢固基础。有爱，就说明有信心，有恩典。你若不觉得基督为你做了什么，你就不会爱他。你对基督的爱，是一个美好的证据。</p>\n<p>　　其次，如果你爱基督，就不要羞于叫别人看到并知道这一点。为基督说话，为基督作见证，为基督而活，为基督劳作。如果基督爱了你，用他自己的血洗净了你的罪，你就不要羞于叫别人知道你如何感受到了这一点，并且你愿以爱他作为回报。</p>\n<p>　　一个不敬虔的、粗鲁的英国游客问一位北美印第安土著基督徒：“哥们儿，是什么使你如此把基督当作一回事，常把他挂在嘴边？基督为你做了什么，使你不断提到他？”这位印第安基督徒没有用话来回答他，而是聚拢了一些干树叶，把它们围成了一个圈，然后拣来一只虫子，把它放在这个圈的中央。接着，划根火柴，点燃了这堆干树叶。火焰燃起来，烤到了这只虫子，它在痛苦中蜷曲，试着从各个方向逃离，但是无法挣脱，只好在绝望中等死。这时，印第安基督徒伸出手来，把这只虫子温柔地捡起来，放在手心，对英国人说：“陌生的朋友，你看到这只虫子了吗？我曾经就是这只将死的虫子。我死在我的罪中，毫无盼望，完全无助，就在地狱永火的边缘。是耶稣基督伸出了他的恩典之手，把我从永远的灭亡中拯救了出来。是耶稣基督，把我这一只可怜的、在罪中的虫子，看作他心所爱的。朋友，这就是我为什么总在谈论基督的原因，这就是我为什么把基督看作一切的原因。我不以此为耻，因为我爱他。”</p>\n<p>　　若我们晓得一些对基督的爱，就让我们拥有这个印第安基督徒的心肠！让我们永远不要觉得，我们会太爱基督了，我们会太彻底地为他而活，我们会太勇敢地为他作见证了，我们会太全然地把自己奉献给他了！在复活之时，会有许多事情使我们惊奇，我相信其中最会令我们惊奇的就是：在我们活在世上的时候，我们没有爱基督更多！</p>"
  },
  {
    "id": 60,
    "title": "九江行 ",
    "labels": "光与盐",
    "created_at": "2019-09-02T03:46:29Z",
    "updated_at": "2019-09-02T03:46:40Z",
    "body_html": "<h2>前言</h2>\n<ul>\n<li>天气 5 月 2日，5 月 3 日多云，无雨，昼夜温差大，观察自<a href=\"http://www.weather.com.cn/weather/101240201.shtml\" rel=\"nofollow\">天气预报</a></li>\n<li>山下不冷，山上温差7度，推荐带个外套</li>\n</ul>\n<h4>待办</h4>\n<ul>\n<li>确认庐山交通枢纽，可选择路线</li>\n<li>手电</li>\n</ul>\n<h4>注意事项</h4>\n<ul>\n<li>合理使用观光车切换景点，如：到街心公园</li>\n<li>采购东西到镇子上超市，要是储备粮食水和买纸</li>\n<li>山上有WiFi可以连一下，山上信号不错，可以全程开导航</li>\n<li>庐山的公交末班车都是在下午5点6点左右，拼了一个小面包 一人10块钱，不贵</li>\n<li>到了含鄱口不要去大口瀑布</li>\n</ul>\n<h4>装备</h4>\n<ul>\n<li>合脚的运动鞋</li>\n<li>学生票带上</li>\n<li>日常用品，庐山酒店不提供一次性洗漱用品</li>\n<li>花露水</li>\n<li>带好遮阳伞、草帽</li>\n<li>手电</li>\n</ul>\n<h4>惦记特产</h4>\n<ul>\n<li>茶饼 （不一定非要在庐山上买，超市里的跟山上的差不多 而且还便宜）</li>\n</ul>\n<h2>05/02</h2>\n<h3>清晨</h3>\n<p>抵达九江站 =&gt; 步行或公交到九江汽车站 =》乘坐流水班汽车到庐山(预计9点到达)</p>\n<ul>\n<li>买票\n<ul>\n<li>地点：庐山 成人全价 180元，学生票 90 元（支付宝微信支付）</li>\n<li>观光车：100元(可用7天) （可支付宝微信支付）</li>\n<li>内部景点小门票，如：索道=》需要现金</li>\n</ul>\n</li>\n<li>进山 预计 8:00 左右\n<ul>\n<li>山园门口买票后上山注意，400多个弯，防晕车（晕车药，袋子已备）</li>\n</ul>\n</li>\n<li>查看住处，放东西？\n<ul>\n<li>记忆客栈，牯岭街</li>\n</ul>\n</li>\n</ul>\n<h3>上午</h3>\n<blockquote>\n<p>东谷看建筑</p>\n</blockquote>\n<p>街心公园出发=》别墅群=》 古教堂=》 庐山会议=》芦林湖=》返回</p>\n<h3>下午</h3>\n<blockquote>\n<p>西谷看风景</p>\n</blockquote>\n<p>如琴湖(美)=》花径=》白居易草堂=》险峰=》锦绣谷=》仙人洞=》御碑亭=》黄昏？=》返回</p>\n<h4>看黄昏</h4>\n<p>时间： 6点左右</p>\n<ul>\n<li>狮子峰\n<ul>\n<li>位于锦绣谷附近</li>\n<li>附近观光车站：环山路口站、西线卡口站</li>\n<li>适合人群：摄影发烧友</li>\n</ul>\n</li>\n<li>仙人洞\n<ul>\n<li>附近观光车站：仙人洞站</li>\n<li>适合人群：游客、摄影爱好者</li>\n</ul>\n</li>\n<li>小天池诺那塔\n<ul>\n<li>小天池山海拔1213米，山脊上屹立着一座藏式白塔——诺那塔</li>\n<li>附近观光车站：小天池站</li>\n<li>适合人群：游客、摄影爱好者</li>\n</ul>\n</li>\n<li>大天池\n<ul>\n<li>龙首崖</li>\n<li>附近观光车站：仙人洞站、大天池站</li>\n<li>适合人群：游客、摄影爱好者</li>\n</ul>\n</li>\n</ul>\n<h3>晚上</h3>\n<ul>\n<li>庐山恋电影院看《庐山恋》电影，提前踩点（街心公园附近）\n<ul>\n<li>找最爱的那个人然后一起去看一次，哈哈</li>\n</ul>\n</li>\n<li>逛逛 牯岭街</li>\n</ul>\n<h2>05/03</h2>\n<h3>清晨</h3>\n<ul>\n<li>含鄱口看日出，朝阳从对面的五老峰探出头来（提前约车，或者与刚好顺路的包车）\n<ul>\n<li>有一个小亭子是绝佳的视觉点，大家便一窝蜂的挤在那</li>\n</ul>\n</li>\n</ul>\n<h3>上午</h3>\n<ul>\n<li>三叠泉 3 小时\n<ul>\n<li>路不好走，考验体力</li>\n</ul>\n</li>\n<li>白鹿洞书院（看五老峰最佳地）1小时</li>\n</ul>\n<h4>离开庐山</h4>\n<ul>\n<li>庐山东门=》海会镇=》九江市</li>\n</ul>\n<h3>下午</h3>\n<ul>\n<li>八里湖\n<ul>\n<li>沙滩风景，吹吹风，傍晚去可以看落日，也可以在桥上骑自行车</li>\n</ul>\n</li>\n</ul>\n<h3>晚上</h3>\n<ul>\n<li>甘棠湖，甘棠公园\n<ul>\n<li>九江市城区，天然湖泊，面积约80万平方米，由庐山泉水汇聚而成， 湖中心的小岛上<strong>烟水亭</strong></li>\n</ul>\n</li>\n<li>南湖，南湖公园（免费,可晚上）</li>\n</ul>\n<h4>不推荐</h4>\n<ul>\n<li>浔阳楼古时的一个酒楼，距离码头进，眺望长江</li>\n<li>庐山西海岸</li>\n</ul>\n<h3>返回</h3>\n<ul>\n<li>九江站=》大同站 23:00=》第二天下午5点半</li>\n</ul>\n<h2>备选地方</h2>\n<blockquote>\n<p>交通不便,合适就去</p>\n</blockquote>\n<ul>\n<li>三清山</li>\n<li>婺源</li>\n<li>鄱阳湖国家湿地公园 九江站 到鄱阳站 1小时左右</li>\n</ul>"
  },
  {
    "id": 59,
    "title": "保持生命健康的七个元素",
    "labels": "光与盐",
    "created_at": "2019-09-02T03:42:32Z",
    "updated_at": "2019-09-02T03:42:42Z",
    "body_html": "<ol>\n<li>彼前2:2(爱慕神的话语，灵奶和干粮)</li>\n<li>雅歌1:2(因你的爱情比酒更美，约会)</li>\n<li>雅各1:22(行道)</li>\n<li>希伯来书10:25(不可停止聚会)</li>\n<li>希伯来书13:17(顺服)，</li>\n<li>雅各1:13(神不会试探你，抵挡试探到流血，胜过试探)，</li>\n<li>路加福音10:27(尽心，尽性，尽力，尽意爱主你的神) 先求神的国与义</li>\n</ol>"
  },
  {
    "id": 58,
    "title": "恩典卡",
    "labels": "光与盐",
    "created_at": "2019-09-02T03:41:46Z",
    "updated_at": "2019-09-02T03:42:49Z",
    "body_html": "<h2>恩典卡</h2>\n<h3>2019/05/25 鹤哥</h3>\n<p>我亲爱的孩子：</p>\n<p>有时你感到困惑：“为什么神的家里也有这些嫉妒纷争、贪慕虚荣的事呢？”孩子，“凡属基督耶稣的人，是已经把肉体连肉体的邪情私欲同钉在十字架上了。你若是靠圣灵得生，就当靠圣灵行事。不要贪图虚名，彼此惹气，互相嫉妒。”（加 5：24-26）要起来，为你所察觉到的付出代祷，堵住那些破口，我要因你的代祷而祝福我的教会和羊群。当我兴起旁人时，你别惊讶！因我拣选他，我也拣选你。</p>\n<p>深爱你的天父上帝-244</p>\n<h3>2016~2017 静茹姐</h3>\n<p>我亲爱的孩子：</p>\n<p>“耶和华不像人看人：人看的是外貌；我看的是内心。”（撒上 16:7）我赐你尊贵荣耀为冠冕（诗 8：5）但你却常被容貌和穿着的事给牵绊住；无论如何装扮，你仍不觉得满意。孩子，你被仇敌和错误的认知给迷惑了。生命不胜于饮食吗？内在不胜于外在吗？灵性不胜于美貌吗？我的儿子耶稣在世上无佳形美容，但却是我深爱的，因他按着我的形象和样式活着。来爱我，跟随我，我要使你成为真正俊美的人。</p>\n<p>深爱你的天父上帝-223</p>\n<h3>2014~2015 风英阿姨</h3>\n<p>我亲爱的孩子：</p>\n<p>你是与我立约的选民，你要圣洁，因为我是圣洁的（彼前 1:16）孩子，你的心要与我立约，除去一切的负面的思想和谎言，来同意和宣告真理；你的眼目要与我立约，不再恋慕世界、物质和你配偶之外的人；你的耳朵要与我立约，滤掉谎言与使你不安的声音；你的口要与我立约，除去虚假、埋怨、批评和苦毒的话，只说造就、赞美感恩的话。你全人要分别归我为圣，我兴起你作谦卑又尊贵的器皿。</p>\n<p>深爱你的天父上帝-236</p>"
  },
  {
    "id": 57,
    "title": "路得记经文分享",
    "labels": "光与盐",
    "created_at": "2019-09-02T03:40:58Z",
    "updated_at": "2019-09-02T03:41:10Z",
    "body_html": "<h2>书名及解释</h2>\n<p>圣经正典中以女子姓名命名的两卷经卷其一，主人公之一摩押女子路得</p>\n<h2>作者</h2>\n<p>撒母耳？更多作者？写于以斯拉-尼希米时代？ 未知...</p>\n<h2>写作时地</h2>\n<p>时间：公元前约1000年，大卫王朝统一建国的时期(推测最早的时期，最晚不得而知)</p>\n<p>非士师时代写成，距离士师记已经很远</p>\n<p>证据：</p>\n<ol>\n<li>4章7节，旧约以色列人脱鞋之约，\"从前在以色列人中间\"，不是此时此刻流行的事情。</li>\n<li>4章17-22节，波阿斯家谱大卫名字的出现</li>\n</ol>\n<h2>写作动机</h2>\n<p>背景及人物：婆婆和一个媳妇之间的故事</p>\n<p>写作目的：见证大卫王权的合法性（证明大卫的家是神主权的拣选），支持大卫做王（主要讲给大卫王朝的听众来听）</p>\n<p>大卫王朝初期舆论焦点：大卫的王权是否合法</p>\n<p>因素1：大卫到底是不是叛变者，是不是篡夺了王位；(最著名)</p>\n<p>因素2：摩押人竟然进入了大卫的谱系中（大卫家族本身，天大的挑战）。这意味着大卫的王权可以被全盘的否认，因为他不正统，正统必须出于以色列，生于以色列，来自一个正统血脉的犹大支派，可怕的是外邦人出现在大卫家谱中，而且她还是一个摩押人，这已经足够成为反对大卫王权的理由（可对比以色列人不承认撒玛利亚人地位，血统观念，种族观念非常重要）；</p>\n<p>圣经一致的对摩押人全盘否定：</p>\n<ol>\n<li>\n<p>旧约中摩押人对于以色列来说是一个最大的敌人，士师时代以色列强敌，压制，欺压以色列人18年，军事政治上都是仇敌；</p>\n</li>\n<li>\n<p>耶和华眼中摩押人，亚扪人和以色列人是信仰中的仇敌，在民数记中有很大的信仰冲突，比如摩押人引诱以色列人犯奸淫；</p>\n</li>\n<li>\n<p>申命记23章3节，\"亚扪人或是摩押人不可入耶和华的会；他们的子孙，虽过十代，也不可入耶和华的会\"，耶和华全盘否定，尼西米记宗教改革，从教义到生命上专门以申命记23章第3节对整个以色列进行改革，尤其是对以色列人婚姻的问题，全体以色列人立志永远不让摩押人进入到以色列人的家庭当中，立志让自己的孩子不可娶摩押人为妻；</p>\n</li>\n</ol>\n<h2>主旨要意</h2>\n<p>路得记，见证大卫王权，向读者辩证大卫是一个合法的以色列王（针对大卫家谱中出现摩押人的挑战），证明大卫王权的合法性，见证弥赛亚王权的合法性</p>\n<p>切入点：摩亚人路得是如何被接纳为以色列人，以至于大卫的王权得以被确立</p>\n<ol>\n<li>\n<p>路得不是一个单纯的摩亚人(一般意义上，圣经一贯否认的，敬拜摩押神明的人，神反对迦南七族的宗教，信仰，偶像问题，会影响到以色列人)，路得是一个归信耶和华的人，经卷开始一章16-17节路得真以色列人的信仰告白，彻底弃绝摩押的信仰完全委身于以色列的神</p>\n</li>\n<li>\n<p>路得是以合乎律法传统的标准嫁给波阿斯，和以色列人非法的与异教人通婚有本质的区别，整个婚姻一步一步都是按着律法的精神和传统，最后公开的时候，公开性律法性的十长老见证婚姻，路得记强调摩押人路得过渡成为一个以色列人，因此他们的后代为正统子孙</p>\n</li>\n<li>\n<p>路得被所有的以色列人接纳，不单是被波阿斯，10位长老证婚人所接纳，路得与婆婆拿俄米的母亲与女儿之间的关系，在众人的眼中也是这样，她们的生命关系发生变化，俄备得出生，妇女们也完全的接受，一起起来颂赞，说：“耶和华是应当称颂的！因为今日没有撇下你，使你无至近的亲属。愿这孩子在以色列中得名声。他必提起你的精神，奉养你的老，因为是爱慕你的那儿妇所生的。有这儿妇比有七个儿子还好！” ，大家赞扬的焦点是路得，全村的人从上到下，男女老少，从长老到婢女，到妇人每一个人都接纳了路得，他们完全可以代表以整个以色列人，就是以色列人接纳了路得为以色利人。</p>\n</li>\n<li>\n<p>本书的名字并非其他人名，而为“路得记”，被记录在犹太人的正典当中，路得记称路得为“摩押人路得”，就更加的表明神起初就要让人认同这件事，路得已经成为一个真正意义的属灵的以色列人，犹太人不得不接受，在圣经开篇就有路得记，也就告诉我们神也接纳了一个外族人路得成为真以色列人（与新约思想完全一致，真以色利人不是以血统来划分，而是以信仰来划分）</p>\n</li>\n</ol>\n<p>总结：路得毫无争议的成为以色列家族的一员，成功证明大卫王权的合法性，如果没有路得记，大卫的王权合法性直到今天依然存在争议，所以路得记夹杂在士师记后面和国度初行建立的撒母耳记前面，是有意义的，并且意义很重大，有力证明了大卫王权的合法性，用罗马书的一句话来说，按着肉体说路得是摩押人，按着属灵来说路得是真以色列人，大卫家谱中出现摩押人的身份得到圆满解决。</p>\n<h2>主题</h2>\n<p>解经学主要有以下几种认定的路得记主题：</p>\n<ol>\n<li>救恩临到外邦人（很主流）</li>\n<li>真以色利人的定义（以色列信仰的典范，讽刺以色列人）</li>\n<li>神的主权与神的救赎（我们选这个，隐藏的神的主权，第二章开始每章有主线，第二章路得为主线，第三章拿俄米为主导事情的发展，第四章波阿斯主导，一切的事情很顺利，这三个人并没有本书重点描述的对象，虽然书名叫路得记。宏观上看是神在眷顾这个家庭，是神在引导每一件事情向前的发展，是神在掌控每一个事情的细节，甚至是偶然性）</li>\n</ol>\n<h2>内容大纲</h2>\n<p>壹、往摩押地去（一1～5）</p>\n<p>　1. 士师秉政的时候（1）</p>\n<p>　2. 从伯利恒到摩押地（1、2）</p>\n<p>　3. 以利米勒一家人</p>\n<p>　4. 迁居原因</p>\n<p>　5. 迁居结果（3～5）</p>\n<p>　6. 以利米勒的表现</p>\n<p>贰、回犹大地去（一6、7）</p>\n<p>　1. 神的管教</p>\n<p>　2. 听见神的恩眷</p>\n<p>　3. 起身归回</p>\n<p>参、三个寡妇的抉择（一8～18）</p>\n<p>　1. 拿俄米的抉择</p>\n<p>　2. 俄珥巴的抉择</p>\n<p>　3. 路得的抉择</p>\n<p>肆、回到伯利恒（一19～22）</p>\n<p>　1. 二人同行（19）</p>\n<p>　2. 众人的惊讶（19）</p>\n<p>　3. 拿俄米的感慨（20）</p>\n<p>　4. 拿俄米的觉醒（20～22）</p>\n<p>伍、往波阿斯田里（二）</p>\n<p>　1. 到波阿斯田里拾穗（1～3）</p>\n<p>　2. 与波阿斯相识（4～8）</p>\n<p>　3. 得波阿斯厚待（8～16）</p>\n<p>　4. 婆媳间的关爱（17～23）</p>\n<p>陆、拿俄米的引导（三1～5）</p>\n<p>　1. 拿俄米关怀路得（1）</p>\n<p>　2. 告知波阿斯是近亲（2）</p>\n<p>　3. 告知要在今晚行动（2）</p>\n<p>　4. 告知路得当有的准备（3）</p>\n<p>　5. 告知路得当有的行动（3、4）</p>\n<p>　6. 波阿斯被告知当行的事（4）</p>\n<p>柒、路得求波阿斯（三5～18）</p>\n<p>　1. 求波阿斯用衣襟遮盖（5～9）</p>\n<p>　2. 波阿斯的称赞和应许（10～15）</p>\n<p>　3. 告知路得要等候（16～18）</p>\n<p>捌、波阿斯赎以利米勒田产（四1～9）</p>\n<ol>\n<li>邀请至近亲属会谈（1）</li>\n</ol>\n<p>　2. 邀请长老作见证（2）</p>\n<p>　3. 说明代赎缘由（3）</p>\n<p>　4. 至近亲属表明意愿（4～6）</p>\n<p>　5. 波阿斯表明意愿（9）</p>\n<p>玖、波阿斯娶路得（四10～12）</p>\n<ol>\n<li>波阿斯的义</li>\n</ol>\n<p>　2. 波阿斯的爱</p>\n<p>　3. 众民与长老的见证、祝福（11～12）</p>\n<p>拾、耶和华赐福（四13～22）</p>\n<p>　1. 路得生子（13）</p>\n<p>　2. 拿俄米的福气（14～17）</p>\n<p>　3. 法勒斯的家谱（18～22）</p>"
  },
  {
    "id": 56,
    "title": "危机，益处，寻求神",
    "labels": "光与盐",
    "created_at": "2019-09-02T03:40:15Z",
    "updated_at": "2019-09-02T03:40:26Z",
    "body_html": "<h2>危机</h2>\n<ul>\n<li>按着自己的形象再造一位神</li>\n<li>献给他错误的敬拜</li>\n<li>对神的怀疑、小信</li>\n<li>对罪满不在乎</li>\n<li>无法无天</li>\n<li>审判</li>\n</ul>\n<p>你行了这些事，我还闭口不言，你想我恰和你一样；其实我要责备你，将这些事摆在你眼前。【诗篇 50:21】</p>\n<p>你们所拜的，你们不知道；我们所拜的，我们知道，因为救恩是从犹太人出来的。【 约翰福音 4:22】</p>\n<p>然而人未曾信他，怎能求他呢？未曾听见他，怎能信他呢？没有传道的，怎能听见呢？【罗马书 10:14】</p>\n<p>信就是所望之事的实底，是未见之事的确据。【 希伯来书 11:1】</p>\n<p>你们要醒悟为善，不要犯罪，因为有人不认识神。我说这话是要叫你们羞愧。【哥林多前书 15:34】</p>\n<p>没有异象(默示)，民就放肆，惟遵守律法的，便为有福。【箴言 29:18】</p>\n<p>凡称呼我'主啊，主啊'的人，不都能进天国；惟独遵行我天父旨意的人，才能进去。我就明明地告诉他们说：“我从来不认识你们，你们这些作恶的人，离开我去吧！”【 马太福音 7:21.23】</p>\n<p>以色列人啊，你们当听耶和华的话。耶和华与这地的居民争辩，因这地上无诚实，无良善，无人认识神。但起假誓，不践前言，杀害，偷盗，奸淫，行强暴，杀人流血，接连不断。【何西阿书 4:1.2】</p>\n<p>我的民因无知识而灭亡。你弃掉知识，我也必弃掉你，使你不再给我做祭司。你既忘了你神的律法，我也必忘记你的儿女。【何西阿书 4:6】</p>\n<blockquote>\n<p>认识神最好的途径：读圣经<br>\n你知道这是真理，但我们必须与肉体作战，我们必须死，也必须得胜，借着读经，祷告。</p>\n</blockquote>\n<h2>寻求神</h2>\n<ul>\n<li>我们应该如何在神的知识上长进</li>\n<li>我们应该有什么样的正确回应</li>\n</ul>\n<p>要寻求耶和华与他的能力，时常寻求他的面。他仆人亚伯拉罕的后裔，他所拣选雅各的子孙哪，你们要纪念他奇妙的作为和他的奇事，并他口中的判语。【诗篇 105:4-6】</p>\n<p>我们务要认识耶和华，竭力(奔跑，穷追不舍，紧抓不放)追求认识他；他出现确如晨光，他必临到我们像甘雨，像滋润田地的春雨。【何西阿书 6:3】</p>\n<p>侧耳听智慧专心求聪明，呼求明哲，扬声求聪明。寻找它，如寻找银子，搜求它，如搜求隐藏的珍宝，你就明白敬畏耶和华，得以认识神。【箴言 2:2-5】</p>\n<p>你说：“你们当寻求我的面。”那时我心向你说：“耶和华啊，你的面我正要寻求。”【诗篇 27:8】</p>\n<p>他们对神说：“离开我们吧！我们不愿晓得你的道。全能者是谁，我们何必侍奉他呢？求告他有什么益处呢？”【约伯记 21:14-15】</p>\n<p>耶和华从天上垂看世人，要看有明白的没有，有寻求神的没有。他们都偏离正路，一同变为污秽；并没有行善的，连一个都没有。【诗篇 14:2-3】</p>\n<p>只是我先前以为与我有益的，我现在因基督都当做有损的。不但如此，我也将万事当做有损的，因我以认识我主基督耶稣为至宝。我为他已经失弃万事，看作粪土，为要得着基督。【腓立比书 3:7-8】</p>\n<blockquote>\n<p>认识神是谁是世界上最大的知识，对神无知是最危险的。</p>\n</blockquote>\n<h2>益处</h2>\n<ul>\n<li>智慧</li>\n<li>信靠</li>\n<li>属灵的力量</li>\n<li>坚忍到底</li>\n</ul>\n<p>不要做糊涂人，要明白主的旨意如何。【 以弗所书 5:17】</p>\n<p>认识你独一的真神，并且认识你所差来的耶稣基督，这就是永生。【约翰福音 17:3】</p>\n<p>敬畏耶和华是智慧的开端，认识至圣者便是聪明。【箴言 9:10】</p>\n<p>耶和华如此说：“智慧人不要因他的智慧夸口，勇士不要因他的勇力夸口，财主不要因他的财物夸口。夸口的却因他有聪明，认识我是耶和华，又知道我喜悦世上施行慈爱公平和公义，以此夸口。这是耶和华说的”。【耶利米书 10:23-24】</p>\n<p>耶和华啊，认识你名的人要倚靠你，因为你没有离弃寻求你的人。【诗篇 9:10】</p>\n<p>唯独认识神的子民必刚强行事。【但以理书 11:32】</p>\n<p>为这缘故，我也受这些苦难，然而我不以为耻。因为知道我所信的是谁，也深信他能保全我所交付他的，直到那日。【提摩太后书 1:12】</p>"
  },
  {
    "id": 55,
    "title": "Rainbow 计划 (下)",
    "labels": "光与盐",
    "created_at": "2019-09-02T03:39:24Z",
    "updated_at": "2019-09-02T03:39:36Z",
    "body_html": "<pre><code>我是极微小的人，何等不配，祂竟顾念我；\n\n我是坏到极处的，何其有愧，祂竟眷顾我。\n\n耶和华神是应当称颂的 ！\n</code></pre>\n<p>愿我们行在神的旨意中@虹佑，小孩子求阿爸父带领  ······</p>"
  },
  {
    "id": 54,
    "title": "Rainbow 计划 (上) ",
    "labels": "光与盐",
    "created_at": "2019-09-02T03:38:35Z",
    "updated_at": "2019-09-02T03:38:42Z",
    "body_html": "<h2>前言</h2>\n<p>弟兄姊妹们，大家好！今天是6月30日晚上7点，思前想后，我鼓起勇气有一件大而好的事情和大家分享：我与闫虹佑姊妹相识3年，倾心已久。此时此刻，我决定向她表明我的心意，我的喜欢。我邀请大家加入祝福的行列，需要大家的支持与帮助，我们一起好吗？</p>\n<h2>关于我们</h2>\n<h3>初次相识</h3>\n<p>我与虹佑相识于2016年山西平遥的夏令营聚会，因着这次把本不在一个团契的我们聚集在一起，而紧接着的在郑州为期20多天的宣教之路也把我们分在同一小组。一点一滴对她的好感在累积，从我的目光来看，这个姊妹极好，她爱主的心吸引着我。</p>\n<h3>彼此相知</h3>\n<p>短宣结束后，存着彼此对对方的好感我们开始有了联系，渐渐地就如同习惯适应了对方存在一样，了解着对方，也彼此心照不宣的把对方当成自己最重要的异性。我的心里暗暗想着以后可能会发生的......，将来的时间，关系如何呢？我们会不会这样就稳固了？我像一个偷心的小贼一样暗自庆幸，觉以为好。</p>\n<h3>No game 赌约</h3>\n<p>2018年3月，曾沉溺与网络游戏的我在她的帮助下，走了出来。</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/yue/hovercard\" href=\"https://github.com/yue\">@yue</a><br>\n如果玩了一次游戏，你和我说一下，从那天算起，一年不要和我说话，我也不和你说话，这怎么样</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hy\">@hy</a><br>\n你真好，真的，这个办法也好，我怕自己失言，但这是最好的戒掉的办法</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/yue/hovercard\" href=\"https://github.com/yue\">@yue</a><br>\n你如果答应了，就要小心谨慎了，上面我打的是一年</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hy\">@hy</a><br>\n嗯，我答应你</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/yue/hovercard\" href=\"https://github.com/yue\">@yue</a><br>\n这就包括你自己不能玩，你同事让你陪他玩也不能玩，只要打开界面就算，目的是不让你玩游戏，不是让我们沉默一年</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/hy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hy\">@hy</a><br>\n我明白</p>\n<h3>2年相识，3年分别？</h3>\n<p>2018年夏，她升本，在将要进入大学的前夕。我们也经受了新的考验，在关于我们的事情上虹佑向上帝求了一个印证，期望能听到上帝的肯定回应。事与愿违的是，7月尾声临近，到最后也没有听到上帝的声音。因着这个结果，她的心渐渐的冷淡了，因这不是主所喜悦祝福的。而我想到的是虽然此时上帝不喜悦我们，但愿我们能经历三年的分别，不做联系，重新审视，时间过后我们再向上帝求印证（我坚定我的心不会改变）。</p>\n<p>从虹佑7月31得到的印证来看，上帝并不看好我们。在得知没有结果的一刻，我的内心一片支撑碎了，没有了力量，前途仿佛黯淡无光。从人的角度来看，我极不愿意顺服这个结果，我也不想尝试失去...</p>\n<p>但在这样的时刻，结果尘埃落定，静下心来，我突然想要顺服上帝的带领，纵然自己内心有的抗拒。不知从哪儿来的大的信心，虽然在现在来看霎时的结果又苦又涩，但想到<a href=\"http://www.jidujiao.com/jianzheng/2729.html\" rel=\"nofollow\">王祖蓝和李亚男</a>两人的爱情见证，又充满了对未来上帝旨意的向往，愿一切的结果被神所允许，愿从神而来。</p>\n<p>此刻我们尝到这样的结果来说也未尝不是好事，利大于弊。扪心自问，此刻的我实在是糟糕透了，是我配不上她。可曾想过把我们的关系交在主的里面？这是“暗地”里面的行动吗？自觉我们就像是两个未经“父母”同意而想私定终身的孩子一样。如果得到的是明确的印证又有何用呢?倒不如先苦后甜，用敬虔的生活操练自己，是否是真的渴想，只是有点想听上帝的话吗。若不合神的心意，愿将爱的心拿去，若合神的心意，然后同心再向上帝求问。</p>\n<p>此刻的我们冲破了很多的自我的阻隔，因为第一次如此明确的将看重上帝在我们婚姻道路上的带领放在首位。如此的美好，不再是凭借着自己傻傻的做出愚蠢的行为，妄图偷心，而是操练我们彼此，将目光定睛在神那里。对于是否能结果我此刻的信心变得异常的大，并充满了美好的盼望，我们的言语也从未有过的打开，当我们渴求神的认同，对于未来，此刻的平安让我一扫先前的自我中心，当顺服神的带领！</p>\n<h3>新的方向</h3>\n<p>在联系停滞，我们可能面临分别，虹佑发现自己的心里是有我的，另一方面自己所求的印证因着出发点，信心的一些问题，或许求印证的行为是不合神的心意，而在未认识我以先所求的印证我是满足的。于是，我们又渐渐恢复了正常的联系。在之后的联系中，我们仿佛更加把自己讲给对方听，也有了心上的沟通以及内里面的共鸣。经历了这件事之后，我们也知道了在寻求神的旨意带领上是多么的重要。</p>\n<h3>此刻的我们</h3>\n<p>现在的我身在北京从事IT工作已近2年，而我的她在山西求学。彼此之间联系更多的是用QQ，或是电话。有时间和感动的时候我们会相见，一起坐在操场，围着校园走啊走。此刻的内心生发出表白的感动，有真的喜欢藏在我的心里。我们的爱情对于我来说就如一眼清泉，平静安稳，又如那青翠的果实等待成熟，却已有肥甘流出。</p>\n<p>我们面对将来所要面对的，依然不知该怎么寻求神的旨意，但愿神在我们中间，全然带领。</p>\n<p>从来没有如此靠近她，从来没有如此贴近她的心，面对世上的风风雨雨，希望我可以陪在她身边，让我们走下去。</p>\n<h2>表白行动</h2>\n<p>发起时间：2019年7月1日至7月7日</p>\n<p>注意：请大家尽量7月7日周日下午7点前发给我，如果有特别的情况，晚一两天也没关系</p>\n<p>由家人朋友们每一位录制祝福的视频，对着镜头说一段话，语言长短不限，内容不限，时间不限，或是予以祝福鼓励，或是教导我们以智慧，亦或是带给我们不一样的看见，其他的更多更多···</p>\n<p>把录制好的视频发给我的方式，可以通过微信，百度云，以及其他的方式给我。</p>\n<p>也希望收到祝福邀请的家人们监督我们，帮助我们继续在主爱的怀抱中成长。</p>\n<p>表白计划最后会由我完成后期制作，7月中旬会到她身边，带着大家的祝福，表白，撒花...</p>\n<h2>感谢</h2>\n<p>闫越在此诚挚感谢每一位为我们付出的家人朋友们，感谢大家花费时间，精力的摆上。</p>\n<p>我与虹佑也会带着大家的祝福，经营好我们这一段爱情，愿能同心过好信仰生活。</p>\n<p>拜托啦，感谢大家...</p>"
  },
  {
    "id": 53,
    "title": "人生次序",
    "labels": "光与盐",
    "created_at": "2019-09-02T03:37:51Z",
    "updated_at": "2019-09-07T10:19:35Z",
    "body_html": "<ol>\n<li>上帝</li>\n<li>爱人</li>\n<li>父母</li>\n<li>朋友</li>\n<li>工作</li>\n</ol>\n<h2>读经亮光</h2>\n<p>“人到我这里来，若不爱我胜过爱（“爱我胜过爱”原文作“恨”）自己的父母、妻子、儿女、弟兄、姐妹，和自己的性命，就不能作我的门徒。凡不背着自己十字架跟从我的，也不能作我的门徒。    ——  路14:26-27</p>\n<p>我所见为善为美的，就是人在　神赐他一生的日子吃喝，享受日光之下劳碌得来的好处，因为这是他的分。 —— 传5:18</p>"
  },
  {
    "id": 52,
    "title": "怎样来看新闻？",
    "labels": "观点与感想",
    "created_at": "2019-08-26T03:47:33Z",
    "updated_at": "2019-09-02T03:19:07Z",
    "body_html": "<h2>前言</h2>\n<p>何为新闻？</p>\n<p>不断新鲜的看世界角度，使人知世界，明是非，辨善恶，修身心。大到似魏源《海国图志》看世界大势，小又如黄秋实《大国风范》般独立思考。</p>\n<p>为什么需要看新闻？</p>\n<p>面对大航海时代，清政府闭关锁国，与世界脱钩，天朝大国梦碎；</p>\n<p>面对互联网时代，国内防火墙禁网，绝外部世界，信息王国当道。</p>\n<h2>怎样看</h2>\n<h4>观点立场</h4>\n<ul>\n<li><strong>懂历史而知新闻</strong></li>\n<li><strong>兼听则明，偏听则暗</strong></li>\n</ul>\n<h4>推荐视角</h4>\n<ul>\n<li>官媒\n<ul>\n<li>BBC News</li>\n</ul>\n</li>\n<li>地区\n<ul>\n<li>端傳媒 Initium Media：立足香港，放眼全球；探求本源，不偏不倚；深度調查，數據挖掘，華語媒體新開端。</li>\n</ul>\n</li>\n<li>自媒体\n<ul>\n<li>Youtube</li>\n<li>Twitter</li>\n</ul>\n</li>\n<li>As President\n<ul>\n<li>Donald J. Trump</li>\n<li>蔡英文 Tsai Ing-wen</li>\n</ul>\n</li>\n<li>个人\n<ul>\n<li>外国人</li>\n</ul>\n</li>\n</ul>\n<h2>总结</h2>\n<p>在路上，修心......</p>"
  },
  {
    "id": 51,
    "title": "彩虹文摘",
    "labels": "文学爱好者",
    "created_at": "2019-08-14T12:06:26Z",
    "updated_at": "2019-12-30T04:42:49Z",
    "body_html": "<h2>目录</h2>\n<ul>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/51#issuecomment-521509379\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/51/hovercard\">問誰未發聲</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/51#issuecomment-521514499\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/51/hovercard\">宣告◎北岛</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/51#issuecomment-523278774\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/51/hovercard\">長城 - Beyond</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/51#issuecomment-561030272\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/51/hovercard\">大學問 (光輝歲月改)</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/51#issuecomment-561034289\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/51/hovercard\">願榮光歸香港</a></li>\n</ul>"
  },
  {
    "id": 50,
    "title": "从 React 渲染原理看性能优化@黄琼",
    "labels": "精读",
    "created_at": "2019-08-13T03:23:14Z",
    "updated_at": "2019-12-30T04:43:04Z",
    "body_html": "<blockquote>\n<p>学而不思则惘，思而不学则怠</p>\n</blockquote>\n<h2>前言</h2>\n<ul>\n<li><a href=\"https://node.fequan.com/playvideo/701606bc91d477799dbecd98cbae0ecf_7\" rel=\"nofollow\">Video - 从 React 渲染原理看性能优化@黄琼</a></li>\n<li>Article：<a href=\"https://zhuanlan.zhihu.com/p/43145754\" rel=\"nofollow\">首次渲染</a> | <a href=\"https://zhuanlan.zhihu.com/p/43566956\" rel=\"nofollow\"> 更新渲染</a></li>\n<li>PPT：<a href=\"https://img.w3ctech.com/%E4%BB%8E%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%88%B0%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BF%AE%E6%94%B9%E7%89%88.pptx\" rel=\"nofollow\">从 React 渲染原理看性能优化</a></li>\n</ul>\n<p>相信很多人都用过 React ，那么大家是否遇到过海量 DOM render 卡顿的问题？ React 16 对渲染机制做了大改动，很大的提升了交互体验，背后的原理又是什么？ 实践出真知，本次分享深入挖掘 React 的渲染机制，同时结合实例来解决实践中遇到的性能问题，从而写出高性能的 React 应用。</p>\n<h2>JSX 如何生成 element</h2>\n<blockquote>\n<p>当我们写下一段 JSX 代码的时候，react 是如何根据我们的 JSX 代码来生成虚拟 DOM 的组成元素 element 的。</p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">return</span> (\n  <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cn<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-k\">&lt;</span>Header<span class=\"pl-k\">&gt;</span> Hello, This is React <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Header<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>Start to learn right now<span class=\"pl-k\">!</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    Right Reserve.\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n);</pre></div>\n<p>中间过程经过 babel 编译, createElement 的参数有三个，其一： type -&gt; 标签类型，其二 ：attributes -&gt; 标签属性，没有的话，可以为 null，其三： children -&gt; 标签的子节点</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">return</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-c1\">createElement</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>,\n  { className<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cn<span class=\"pl-pds\">'</span></span> },\n  <span class=\"pl-smi\">React</span>.<span class=\"pl-c1\">createElement</span>(Header, <span class=\"pl-c1\">null</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello, This is React<span class=\"pl-pds\">'</span></span>),\n  <span class=\"pl-smi\">React</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Start to learn right now!<span class=\"pl-pds\">'</span></span>),\n  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Right Reserve<span class=\"pl-pds\">'</span></span>\n);</pre></div>\n<p>简化版本的 dom 树</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>div<span class=\"pl-pds\">\"</span></span>: {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attributes<span class=\"pl-pds\">\"</span></span>: [{ <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>classname<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>value<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cn<span class=\"pl-pds\">\"</span></span> }],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>childNodes<span class=\"pl-pds\">\"</span></span>: [\n      { <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeName<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#text<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeType<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">3</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeValue<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>↵<span class=\"pl-pds\">\"</span></span> },\n      {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeName<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>HEADER<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeType<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">1</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeValue<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">null</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>innerText<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello, This is React<span class=\"pl-pds\">\"</span></span>\n      },\n      {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeName<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#text<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeType<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">3</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeValue<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>↵<span class=\"pl-pds\">\"</span></span>\n      },\n      {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeName<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DIV<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeType<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">1</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nodeValue<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">null</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>innerText<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Start to learn right now!<span class=\"pl-pds\">\"</span></span>\n      }\n    ],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>children<span class=\"pl-pds\">\"</span></span>: [\n      { <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tagName<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>HEADER<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>textContent<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> Hello, This is React <span class=\"pl-pds\">\"</span></span> },\n      { <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tagName<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DIV<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>textContent<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Start to learn right now!<span class=\"pl-pds\">\"</span></span> }\n    ],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tagName<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DIV<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>innerHTML<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>↵      &lt;header&gt; Hello, This is React &lt;/header&gt;↵      &lt;div&gt;Start to learn right now!&lt;/div&gt;↵      Right Reserve.↵    <span class=\"pl-pds\">\"</span></span>\n  }\n}</pre></div>\n<p>对比 render 函数被调用的时候，会返回的 element 对象</p>\n<div class=\"highlight highlight-source-js\"><pre>{\n  type<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>,\n    props<span class=\"pl-k\">:</span> {\n      className<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>cn<span class=\"pl-pds\">'</span></span>,\n        children<span class=\"pl-k\">:</span> [\n          {\n            <span class=\"pl-en\">type</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> Header,\n            <span class=\"pl-en\">props</span><span class=\"pl-k\">:</span> {\n                <span class=\"pl-en\">children</span><span class=\"pl-k\">:</span> 'Hello, This is React'\n            }\n          },\n          {\n            <span class=\"pl-en\">type</span><span class=\"pl-k\">:</span> 'div',\n            <span class=\"pl-en\">props</span><span class=\"pl-k\">:</span> {\n                <span class=\"pl-en\">children</span><span class=\"pl-k\">:</span> 'start to learn right now！'\n            }\n          },\n          'Right Reserve'\n      ]\n  }\n}</pre></div>\n<p>我们来观察一下这个对象的 children，现在有三种类型：</p>\n<p>1、string</p>\n<p>2、原生 DOM 节点</p>\n<p>3、React Component - 自定义组件</p>\n<p>除了这三种，还有两种类型：</p>\n<p>4、false ,null, undefined, number</p>\n<p>5、数组 - 使用 map 方法的时候</p>\n<p>这里需要记住一个点：element 不一定是 Object 类型。</p>\n<h2>二、element 如何生成真实节点</h2>\n<blockquote>\n<p>在生成 elment 之后，react 又如何将其转成浏览器的真实节点。首次渲染以及更新渲染的流程是怎样的 ？</p>\n</blockquote>\n<p>转化的规则如下：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/f3060bf6198c5184cf66068129cd5a8b70d595ae/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357961666a303268776a3231397130666977686c2e6a7067\"><img src=\"https://camo.githubusercontent.com/f3060bf6198c5184cf66068129cd5a8b70d595ae/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357961666a303268776a3231397130666977686c2e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5yafj02hwj219q0fiwhl.jpg\" style=\"max-width:100%;\"></a></p>\n<p>ReactDOMComponent, ReactCompositeComponentWrapper 是 React 自己使用私有类，不会暴露给用户,常用方法：mountComponent, updateComponent 等是私有类的方法由于涉及创建，更新操作生命周期方法被暴露给用户使用</p>\n<h3>ReactDOMComponent</h3>\n<p>核心关键是 ReactMComponent 的 mountComponent 方法（直接操作浏览器 DOM 元素），作用是 将 element 转成真实 DOM 节点，并且插入到相应的 container 里 ，然后返回 markup（realDOM),最后暴露生命周期钩子给用户</p>\n<h3>ReactCompositeComponentWrapper</h3>\n<p>mountComponent: 实例化自定义组件，不直接生成 DOM 节点，最后是通过递归调用到 <strong>ReactDOMComponent</strong> 的 mountComponent 方法来得到真实 DOM</p>\n<p>假设我们有一个 Example 的组件，它返回</p><div>hello world</div> 这样一个标签。<p></p>\n<h2>首次渲染</h2>\n<p>过程如下：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/735172f703ccd878dd2003fd7165eeca4cbd3e4d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316735797a6234316968776a32313379306e7a7137362e6a7067\"><img src=\"https://camo.githubusercontent.com/735172f703ccd878dd2003fd7165eeca4cbd3e4d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316735797a6234316968776a32313379306e7a7137362e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5yzb41ihwj213y0nzq76.jpg\" style=\"max-width:100%;\"></a></p>\n<p>首先从 React.render 开始， render 函数被调用的时候会返回一个 element</p>\n<div class=\"highlight highlight-source-js\"><pre>{\n  <span class=\"pl-en\">type</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> Example,\n  <span class=\"pl-en\">props</span><span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">children</span><span class=\"pl-k\">:</span> null\n  }\n}</pre></div>\n<p>由于这个 type 是一个自定义组件类，此时要初始化的类是 ReactCompositeComponentWrapper,接着调用它的 mountComponent 方法。这里面会做四件事情，详情可以看上图。其中，第二步的 render 的得到的 element 为</p>\n<div class=\"highlight highlight-source-js\"><pre>{\n  type<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>,\n    props<span class=\"pl-k\">:</span> {\n    children<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello World<span class=\"pl-pds\">'</span></span>\n  }\n}</pre></div>\n<p>由图可知，在第一步得到 instance 对象之后，就会去看 instance.componentWillMount 是否有被定义，有的话调用，而在整个渲染过程结束之后调用 componentDidMount。</p>\n<p>以上，就是渲染原理的部分，让我们来总结以下：</p>\n<ol>\n<li>JSX 代码经过 babel 编译之后变成 React.createElement 的表达式，这个表达式在 render 函数被调用的时候执行生成一个 element。</li>\n<li>在首次渲染的时候，先去按照规则初始化 element，接着 ReactCompositeComponentWrapper 通过递归，最终调用 ReactDOMComponent 的 mountComponent 方法来帮助生成真实 DOM 节点。</li>\n</ol>\n<p>React v15</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/2d82648764f0020aa06dfde435e4c8c97e303fb1/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a36687a307971796a32316a6b30706f3079362e6a7067\"><img src=\"https://camo.githubusercontent.com/2d82648764f0020aa06dfde435e4c8c97e303fb1/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a36687a307971796a32316a6b30706f3079362e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5z6hz0yqyj21jk0po0y6.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>渲染更新</h2>\n<p>触发组件的更新有两种更新方式：props 以及 state 改变带来的更新。本次主要解析 state 改变带来的更新。整个过程流程图如下</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/15b4eab5aaedb47bbd7bf7f8638538d0242b5f4b/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a36756d723569316a323163633072306165352e6a7067\"><img src=\"https://camo.githubusercontent.com/15b4eab5aaedb47bbd7bf7f8638538d0242b5f4b/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a36756d723569316a323163633072306165352e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5z6umr5i1j21cc0r0ae5.jpg\" style=\"max-width:100%;\"></a></p>\n<p>1、一般改变 state，都是从 setState 开始，这个函数被调用之后，会将我们传入的 state 放进 pendingState 的数组里存起来，然后判断当前流程是否处于批量更新，如果是，则将当前组件的 instance 放进 dirtyComponent 里，当这个更新流程中所有需要更新的组件收集完毕之后（这里面涉及到事务的概念，感兴趣的可以自己去了解一下）就会遍历 dirtyComponent 这个数组，调用他们的 uptateComponent 对组件进行更新。当然，如果当前不处于批量更新的状态，会直接去遍历 dirtyComponent 进行更新。</p>\n<p>2、在我们这个例子中，由于 Example 是自定义组件，所以调用的是 ReactCompositeComponentWrapper 这个类的 updateComponent 方法，这个方法做三件事。</p>\n<p>计算出 nextState<br>\nrender()得到 nextRenderElement<br>\n与 prevElement 进行 Diff 比较（这个过程后面会介绍）,更新节点<br>\n最后这个需要去更新节点的时候，跟首次渲染一样，也需要调用 ReactDOMComponent 的 updateComponent 来更新。其中第二步 render 得到的也是自定义组件的话， 会形成递归调用。</p>\n<h3>shouldComponentUpdate</h3>\n<p>由图可知，shouldComponentUpdate 在第一步调用得到 nextState 之后调用，因为 nextState 也是它的其中一个参数嘛~这个函数很重要，它是我们性能优化的一个很关键的点：<strong>由图可以看到，当 shouldComponentUpdate 返回 false 的时候，下面的一大块都不会被去执行，包括已经被优化的 diff 算法</strong>。</p>\n<p>当 shouldComponentUpdate 返回 true 的时候，会先调用 componentWillUpdate，在整个更新过程结束之后调用 componentDidUpdate。</p>\n<p>以上就是更新渲染的过程。</p>\n<h3>Diff 算法</h3>\n<p>React 基于两个假设：</p>\n<ol>\n<li>两个相同的组件产生类似的 DOM 结构，不同组件产生不同 DOM 结构</li>\n<li>对于同一层次的一组子节点，它们可以通过唯一的 id 区分</li>\n</ol>\n<p>发明了一种叫 Diff 的算法来比较两棵 DOM tree，它极大的优化了这个比较的过程，将算法复杂度从 O(n^3)降低到 O(n)。</p>\n<p>同时，基于第一点假设，我们可以推论出，Diff 算法只会对同层的节点进行比较。如图，它只会对颜色相同的节点进行比较</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/a5e6dedfddec2418d827d886a3f73096f0db45f0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a39326532376a736a3230657930386d676e332e6a7067\"><img src=\"https://camo.githubusercontent.com/a5e6dedfddec2418d827d886a3f73096f0db45f0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a39326532376a736a3230657930386d676e332e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5z92e27jsj20ey08mgn3.jpg\" style=\"max-width:100%;\"></a></p>\n<p>也就是说如果父节点不同，React 将不会在去对比子节点。因为不同的组件 DOM 结构会不相同，所以就没有必要在去对比子节点了。这也提高了对比的效率。</p>\n<p>下面，我们具体看下 Diff 算法是怎么做的，这里分为三种情况考虑</p>\n<ul>\n<li>节点类型不同</li>\n<li>节点类型相同</li>\n<li>子节点比较</li>\n</ul>\n<h4>不同节点类型</h4>\n<p>对于不同的节点类型，react 会基于第一条假设，直接删去旧的节点，新建一个新的节点。</p>\n<p>比如：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">A</span><span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">C</span><span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">A</span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 由shape1到shape2</span>\n<span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">B</span><span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">C</span><span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">B</span><span class=\"pl-k\">&gt;</span></pre></div>\n<p>生命周期打印结果：</p>\n<div class=\"highlight highlight-source-js\"><pre>Shape1 <span class=\"pl-k\">:</span>\n<span class=\"pl-c1\">A</span> is created\n<span class=\"pl-c1\">A</span> render\n<span class=\"pl-c1\">C</span> is created\n<span class=\"pl-c1\">C</span> render\n<span class=\"pl-c1\">C</span> componentDidMount\n<span class=\"pl-c1\">A</span> componentDidMount\n\nShape2 <span class=\"pl-k\">:</span>\n<span class=\"pl-c1\">A</span> componentWillUnmount\n<span class=\"pl-c1\">C</span> componentWillUnmount\n<span class=\"pl-c1\">B</span> is created\n<span class=\"pl-c1\">B</span> render\n<span class=\"pl-c1\">C</span> is created\n<span class=\"pl-c1\">C</span> render\n<span class=\"pl-c1\">C</span> componentDidMount\n<span class=\"pl-c1\">B</span> componentDidMount\n\nShape2 <span class=\"pl-k\">-</span> <span class=\"pl-c1\">2019</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">08</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">14</span><span class=\"pl-k\">:</span>\n<span class=\"pl-c1\">B</span> is created\n<span class=\"pl-c1\">B</span> render\nis created\n<span class=\"pl-c1\">C</span> render\n<span class=\"pl-c1\">A</span> componentWillUnmount\n<span class=\"pl-c1\">C</span> componentWillUnmount\n<span class=\"pl-c1\">C</span> componentDidMount\n<span class=\"pl-c1\">B</span> componentDidMount</pre></div>\n<p>由此可以看出，A 与其子节点 C 会被删除，然后重新建一个 B，C 插入。这样就给我们的性能优化提供了一个思路，就是我们要<strong>保持 DOM 标签的稳定性</strong>。</p>\n<p>打个比方，如果写了一个 <code>&lt;div&gt;&lt;List /&gt;&lt;/div&gt;</code>（List 是一个有几千个节点的组件），切换的时候变成了<code>&lt;section&gt;&lt;List /&gt;&lt;/section&gt;</code>，此时即使 List 的内容不变，它也会先被卸载在创建，其实是很浪费的。</p>\n<h4>相同节点类型</h4>\n<p>当对比相同的节点类型比较简单，这里分为两种情况，一种是 DOM 元素类型，对应 html 直接支持的元素类型：div，span 和 p，还有一种是自定义组件。</p>\n<ul>\n<li>DOM 元素类型</li>\n</ul>\n<p>react 会对比它们的属性，只改变需要改变的属性</p>\n<ul>\n<li>自定义组件类型</li>\n</ul>\n<p>由于 React 此时并不知道如何去更新 DOM 树，因为这些逻辑都在 React 组件里面，所以它能做的就是根据新节点的 props 去更新原来根节点的组件实例，触发一个更新的过程，最后在对所有的 child 节点在进行 diff 的递归比较更新。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">-</span>shouldComponentUpdate <span class=\"pl-k\">-</span>\n  componentWillReceiveProps <span class=\"pl-k\">-</span>\n  componentWillUpdate <span class=\"pl-k\">-</span>\n  render <span class=\"pl-k\">-</span>\n  componentDidUpdate;</pre></div>\n<p>子节点比较</p>\n<div class=\"highlight highlight-source-js\"><pre>div<span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">A</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">B</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 列表一到列表二</span>\n<span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">A</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">C</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">B</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span></pre></div>\n<p>因为 React 在没有 key 的情况下对比节点的时候，是一个一个按着顺序对比的。从列表一到列表二，只是在中间插入了一个 C，但是如果没有 key 的时候，react 会把 B 删去，新建一个 C 放在 B 的位置，然后重新建一个节点 B 放在尾部。</p>\n<p>生命周期打印结果：</p>\n<div class=\"highlight highlight-source-js\"><pre>列表一：\n<span class=\"pl-c1\">A</span> is created\n<span class=\"pl-c1\">A</span> render\n<span class=\"pl-c1\">B</span> is created\n<span class=\"pl-c1\">B</span> render\n<span class=\"pl-c1\">A</span> componentDidMount\n<span class=\"pl-c1\">B</span> componentDidMount\n\n列表二：\n<span class=\"pl-c1\">A</span> render\n<span class=\"pl-c1\">B</span> componentWillUnmount\n<span class=\"pl-c1\">C</span> is created\n<span class=\"pl-c1\">C</span> render\n<span class=\"pl-c1\">B</span> is created\n<span class=\"pl-c1\">B</span> render\n<span class=\"pl-c1\">A</span> componentDidUpdate\n<span class=\"pl-c1\">C</span> componentDidMount\n<span class=\"pl-c1\">B</span> componentDidMount\n\n列表二 <span class=\"pl-k\">-</span> <span class=\"pl-c1\">2019</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">08</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">14</span><span class=\"pl-k\">:</span>\n<span class=\"pl-c1\">A</span> render\n<span class=\"pl-c1\">C</span> is created\n<span class=\"pl-c1\">C</span> render\n<span class=\"pl-c1\">B</span> is created\n<span class=\"pl-c1\">B</span> render\n<span class=\"pl-c1\">B</span> componentWillUnmount\n<span class=\"pl-c1\">A</span> componentDidUpdate\n<span class=\"pl-c1\">C</span> componentDidMount\n<span class=\"pl-c1\">B</span> componentDidMount</pre></div>\n<p>当节点很多的时候，这样做是非常低效的。有两种方法可以解决这个问题：</p>\n<p>1、<strong>保持 DOM 结构的稳定性</strong>，我们来看这个变化，由两个子节点变成了三个，其实是一个不稳定的 DOM 结构，我们可以通过通过加一个 null，保持 DOM 结构的稳定。这样按照顺序对比的时候，B 就不会被卸载又重建回来。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">A</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n  {<span class=\"pl-c1\">null</span>}\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">B</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 列表一到列表二</span>\n<span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">A</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">C</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-c1\">B</span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span></pre></div>\n<p>更新时的打印结果：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">B</span> is created\n<span class=\"pl-c1\">C</span> is created\n<span class=\"pl-c1\">A</span> componentWillUnmount\n<span class=\"pl-c1\">C</span> componentWillUnmount\n<span class=\"pl-c1\">C</span> componentDidMount\n<span class=\"pl-c1\">B</span> componentDidMount</pre></div>\n<p>2、<strong>key</strong></p>\n<p>通过给节点配置 key，让 React 可以识别节点是否存在。</p>\n<p>配上 key 之后，再跑一遍的打印结果。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">A</span> render\n<span class=\"pl-c1\">C</span> is created\n<span class=\"pl-c1\">C</span> render\n<span class=\"pl-c1\">B</span> render\n<span class=\"pl-c1\">A</span> componentDidUpdate\n<span class=\"pl-c1\">C</span> componentDidMount\n<span class=\"pl-c1\">B</span> componentDidUpdate</pre></div>\n<p>果然，配上 key 之后，列表二的生命周期就如我所愿，只在指定的位置创建 C 节点插入。</p>\n<p>这里要注意的一点是，key 值必须是稳定（所以我们不能用 Math.random()去创建 key），可预测，并且唯一的。</p>\n<p>这里给我们性能优化也提供了两个非常重要的依据：</p>\n<ul>\n<li><strong>保持 DOM 结构的稳定性</strong></li>\n<li><strong>map 的时候，加 key</strong></li>\n</ul>\n<h2>性能优化</h2>\n<blockquote>\n<p>结合渲染原理，通过实际例子，看看如何优化组件。</p>\n</blockquote>\n<p>1、Mount/Unmount</p>\n<ul>\n<li>Key</li>\n<li>稳定性\n<ul>\n<li>保持标签的稳定 <code>&lt;div&gt; -&gt; &lt;section&gt;</code></li>\n<li>保持 DOM 结构的稳定</li>\n</ul>\n</li>\n</ul>\n<p>2、避免重复渲染</p>\n<ul>\n<li>shouldComponentUpdate</li>\n<li>PureComponent(immutable.js)</li>\n<li>分离组件，只传入关心的值</li>\n</ul>\n<p>3、使用 Pure Functional Component <a href=\"https://github.com/acdlite/recompose\">recompose</a></p>\n<p>目前 react 性能优化的点主要集中在<strong>防止重复渲染，DOM 稳定性</strong>的方面：</p>\n<p>但是大家看一个<a href=\"https://codesandbox.io/s/mpx8wzl2x\" rel=\"nofollow\">问题</a>,如例子中所展示，点击改变计数按钮后，开始有大量组件重新渲染，但比较阶段不可被打断，input 输入框不可使用。</p>\n<p><strong>更新机制</strong>：一边对比一边更新，操作 dom 结构同步，从上到下是不间断的，主线程用于大批量更新时会被卡住，导致其他的用户操作无法响应，体验很差</p>\n<p>现在 React 16 将异步渲染方案分为了两个阶段，第一阶段专注比较，第二阶段专注更新</p>\n<h4>工具</h4>\n<ul>\n<li><a href=\"https://github.com/maicki/why-did-you-update\">why-did-you-update</a></li>\n<li><a href=\"https://www.npmjs.com/package/react-addons-perf\" rel=\"nofollow\">react-addons-perf</a></li>\n</ul>\n<h2>React 16 异步渲染方案</h2>\n<blockquote>\n<p>到目前为止，这些优化组件的方法还不能解决什么问题，所以我们需要引入异步渲染，以及异步渲染的原理是什么。</p>\n</blockquote>\n<p><strong>React 16 改动</strong></p>\n<p>1、比较阶段 – 可被打断</p>\n<p>2、commit 阶段 – 不可被打断</p>\n<p>主线程不间断使用(同步比较 + 同步更新) =》 自由释放主线程（可打断的比较 + 异步更新）</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/71552a77f42911287c010433cd5496e9ecff8081/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a656833393076306a32307a7a306a7737376c2e6a7067\"><img src=\"https://camo.githubusercontent.com/71552a77f42911287c010433cd5496e9ecff8081/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a656833393076306a32307a7a306a7737376c2e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5zeh390v0j20zz0jw77l.jpg\" style=\"max-width:100%;\"></a></p>\n<p>由于 React 16 异步方案的引入，异步 render 函数之前的函数可能被打断，调用多次，所以 render 之前的函数变得不安全，从而新增了 <code>getDerivedStateFromProps</code> API 代替 componentWillMount<br>\n，componentWillReceiveProps，componentWillUpdate，在此静态方法里面专门做 state 的更新初始化操作</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/3a748f53467c491c94e98f44f78822b0a8f9055a/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a65687863766c6a6a32307a77306b3974617a2e6a7067\"><img src=\"https://camo.githubusercontent.com/3a748f53467c491c94e98f44f78822b0a8f9055a/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a65687863766c6a6a32307a77306b3974617a2e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5zehxcvljj20zw0k9taz.jpg\" style=\"max-width:100%;\"></a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/4ed4fbcca96ce61a07622ee6e5664a5e09ca472a/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a66616a347730346a3230796b306c687134652e6a7067\"><img src=\"https://camo.githubusercontent.com/4ed4fbcca96ce61a07622ee6e5664a5e09ca472a/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357a66616a347730346a3230796b306c687134652e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5zfaj4w04j20yk0lhq4e.jpg\" style=\"max-width:100%;\"></a></p>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://facebook.github.io/react/docs/reconciliation.htm\" rel=\"nofollow\">https://facebook.github.io/react/docs/reconciliation.htm</a></li>\n<li><a href=\"https://codesandbox.io/s/lyop4w9x9m\" rel=\"nofollow\">渲染更新 - Diff Codesandbox Demo</a></li>\n<li><a href=\"https://codesandbox.io/s/mpx8wzl2x\" rel=\"nofollow\">为什么需要 React 16 异步渲染 - Codesandbox Demo</a></li>\n</ul>\n<h4>拓展阅读</h4>\n<ul>\n<li>function component\n<ul>\n<li><a href=\"https://hackernoon.com/react-stateless-functional-components-nine-wins-you-might-have-overlooked-997b0d933dbc\" rel=\"nofollow\">九个推荐使用 functional component 的原因</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/7-reasons-to-outlaw-reacts-functional-components-ff5b5ae09b7c/\" rel=\"nofollow\">七个不使用 functional component 的 原因</a></li>\n</ul>\n</li>\n</ul>"
  },
  {
    "id": 49,
    "title": "开发技巧挑战 100 楼",
    "labels": "开发者笔记",
    "created_at": "2019-06-11T02:48:54Z",
    "updated_at": "2019-12-30T04:43:31Z",
    "body_html": "<h2>目录</h2>\n<ul>\n<li><a href=\"https://github.com/xiaoyueyue165/blog/issues/49#issuecomment-500670848\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">001. JS 剔除对象中不需要的属性 + 惰性载入函数</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-502031242\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">002. JS-根据条件给对象插入属性</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-503424141\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">003. Node.js 的 Error-First Callbacks</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-504898752\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">004. 数组，对象映射优化 if... else...</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-507575777\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">005. 从数组循环的 forEach 方法中删除元素</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-513622461\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">006. 优化表单验证逻辑判断</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-513625745\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">007. JS 的加减乘除运算</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-517110241\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">008. VSCode - ESLint, Prettier &amp; Airbnb Setup</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-534374895\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">009. Cannot use arrow keys to choose options on Windows</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-541755874\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">010. Markdown 使用</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-542274435\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">011. Git commit log</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-544528248\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">012. 代码片段编写</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/49#issuecomment-549655653\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/49/hovercard\">013. Ve2x base64 解密</a></li>\n</ul>"
  },
  {
    "id": 48,
    "title": "同步你的 Github fork",
    "labels": "开发者笔记",
    "created_at": "2019-05-19T03:13:37Z",
    "updated_at": "2019-12-02T05:36:19Z",
    "body_html": "<h2>前言</h2>\n<p>选择拥抱开源，无疑参与 <code>github</code>的开源项目是最好的选择,先从同步 fork 仓库开始做起！</p>\n<h2>一、确认本地 fork 仓库版本是否落后于原仓库</h2>\n<h3>1. 查看 github fork 仓库后的 <code>commit</code>数量及提交日志</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/4946cea0e73c4c120e1e7dcca5e5d137174b4171/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167333665696c386578696a32307a73306e716e30642e6a7067\"><img src=\"https://camo.githubusercontent.com/4946cea0e73c4c120e1e7dcca5e5d137174b4171/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167333665696c386578696a32307a73306e716e30642e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36eil8exij20zs0nqn0d.jpg\" style=\"max-width:100%;\"></a></p>\n<p>本地 <code>clone</code> 自己仓库 后的 <code>commit log</code> 日志，与 gihub 上一致</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/628d5d2cef533086543ff25b955415f594047dab/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673336656f357138666f6a32307a35306a6c7767372e6a7067\"><img src=\"https://camo.githubusercontent.com/628d5d2cef533086543ff25b955415f594047dab/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673336656f357138666f6a32307a35306a6c7767372e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36eo5q8foj20z50jlwg7.jpg\" style=\"max-width:100%;\"></a></p>\n<h3>2. 查看原仓库的相关信息，比较</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/61a638e963e9db4d4b62e827affdd7c4c5bc1a20/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673336657564636234726a3230777a306e683076672e6a7067\"><img src=\"https://camo.githubusercontent.com/61a638e963e9db4d4b62e827affdd7c4c5bc1a20/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673336657564636234726a3230777a306e683076672e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36eudcb4rj20wz0nh0vg.jpg\" style=\"max-width:100%;\"></a></p>\n<blockquote>\n<p><strong>比较后得知</strong>：本地 <code>fork</code>仓库的版本落后于原始仓库</p>\n</blockquote>\n<p>下一步计划，准备开始同步！</p>\n<h2>二、 同步</h2>\n<h3>1. 查看本地仓库设置的远端仓库，是否有连接上游原始远端仓库</h3>\n<p>如果未连接上游仓库，添加远程仓库的变量地址</p>\n<div class=\"highlight highlight-source-shell\"><pre>$  git remote -v\n\norigin  https://github.com/xiaoyueyue165/taro.git (fetch)\norigin  https://github.com/xiaoyueyue165/taro.git (push)</pre></div>\n<ul>\n<li>添加上游仓库</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>$ git remote add upsteream https://github.com/NervJS/taro.git</pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/e55e4f2077cb63385762415f24ea3fe2c5dc78a9/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316733366668336f3068616a32307a6c306e727768672e6a7067\"><img src=\"https://camo.githubusercontent.com/e55e4f2077cb63385762415f24ea3fe2c5dc78a9/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316733366668336f3068616a32307a6c306e727768672e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36fh3o0haj20zl0nrwhg.jpg\" style=\"max-width:100%;\"></a></p>\n<ul>\n<li>再次查看远程仓库指向地址列表，确认添加</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>$  git remote -v\norigin  https://github.com/xiaoyueyue165/taro.git (fetch)\norigin  https://github.com/xiaoyueyue165/taro.git (push)\nupsteream  https://github.com/NervJS/taro.git (fetch)\nupsteream  https://github.com/NervJS/taro.git (push)</pre></div>\n<h3>2. fetch，取回原仓库的更新</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ git fetch upsteream</pre></div>\n<blockquote>\n<p>默认情况下，git fetch 取回所有分支（branch）的更新</p>\n</blockquote>\n<h3>3. 将 fetch 后的更新内容合并至主分支</h3>\n<p>所取回的更新，在本地主机上要用\"远程主机名/分支名\"的形式读取。比如<code>upsteream</code>主机的<code>master</code>，就要用 <code>upsteream/master</code> 读取。</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ git merge upsteream/master</pre></div>\n<p>此时会发现本地 master 分支的 <code>commit</code> 日志已经与原仓库的日志保持一致</p>\n<ul>\n<li>本地 master</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/32c9c92a247ca87fa22c56291fa1b5990cbfa199/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167333666646d6d6534776a323161353068343736302e6a7067\"><img src=\"https://camo.githubusercontent.com/32c9c92a247ca87fa22c56291fa1b5990cbfa199/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167333666646d6d6534776a323161353068343736302e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36fdmme4wj21a50h4760.jpg\" style=\"max-width:100%;\"></a></p>\n<ul>\n<li>原始仓库</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/55f1942cbe2b6008e9b21b8df7d6164bd879da5f/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167333666697439767a686a32307864306e7474627a2e6a7067\"><img src=\"https://camo.githubusercontent.com/55f1942cbe2b6008e9b21b8df7d6164bd879da5f/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167333666697439767a686a32307864306e7474627a2e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36fit9vzhj20xd0nttbz.jpg\" style=\"max-width:100%;\"></a></p>\n<h3>4.更新，推送至远端 master 分支</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ git push origin master</pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/9e749dab7931ecb5ac430230831b562881e4627d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673336666d30697630626a32306c3830366a3074362e6a7067\"><img src=\"https://camo.githubusercontent.com/9e749dab7931ecb5ac430230831b562881e4627d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673336666d30697630626a32306c3830366a3074362e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36fm0iv0bj20l806j0t6.jpg\" style=\"max-width:100%;\"></a></p>\n<ul>\n<li>自己 fork 的 仓库变化， <code>commit</code> 数量与 最新日志与原仓库一致</li>\n</ul>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/dc877fdcceb543a07bb626aad12eed25ca991036/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673336667472357a306f6a3230776f306e7334316e2e6a7067\"><img src=\"https://camo.githubusercontent.com/dc877fdcceb543a07bb626aad12eed25ca991036/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673336667472357a306f6a3230776f306e7334316e2e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36ftr5z0oj20wo0ns41n.jpg\" style=\"max-width:100%;\"></a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/6a1c67f4bc554d564146e709f6f839e3c089b55d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316733366676733935656c6a32307735306e6d77686e2e6a7067\"><img src=\"https://camo.githubusercontent.com/6a1c67f4bc554d564146e709f6f839e3c089b55d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316733366676733935656c6a32307735306e6d77686e2e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g36fvs95elj20w50nmwhn.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/06/git_remote.html\" rel=\"nofollow\">Git 远程操作详解</a> ， by 阮一峰</li>\n<li><a href=\"https://www.youtube.com/watch?v=-zvHQXnBO6c\" rel=\"nofollow\">Syncing Your GitHub Fork</a> , by <a href=\"https://www.youtube.com/channel/UCnVzApLJE2ljPZSeQylSEyg\" rel=\"nofollow\">Data School</a></li>\n<li><a href=\"https://github.com/selfteaching/the-craft-of-selfteaching/issues/67\" data-hovercard-type=\"issue\" data-hovercard-url=\"/selfteaching/the-craft-of-selfteaching/issues/67/hovercard\">Github进行fork后如何与原仓库同步</a></li>\n</ul>"
  },
  {
    "id": 47,
    "title": "2019,帮助你更好的开发小程序",
    "labels": "开发者笔记",
    "created_at": "2019-03-21T14:59:08Z",
    "updated_at": "2019-05-18T01:45:44Z",
    "body_html": "<h2>前言</h2>\n<p><code>原生</code>开发小程序有了两个项目，在原生开发小程序经验技巧方面有一些自己的总结，此篇文章做原创分享！</p>\n<p>本文适合老手查看，新手请参阅<a href=\"https://developers.weixin.qq.com/miniprogram/dev/index.html?t=18122618\" rel=\"nofollow\">官方文档</a>，同步至<a href=\"https://github.com/xiaoyueyue165/blog/issues/47\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/47/hovercard\">github</a>。</p>\n<h2>1.发布订阅处理复杂逻辑</h2>\n<blockquote>\n<p>支持先订阅后发布，以及先发布后订阅</p>\n</blockquote>\n<ul>\n<li>方法源码</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-c1\">Event</span> <span class=\"pl-k\">=</span> (<span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">var</span> clientList <span class=\"pl-k\">=</span> {},\n    pub,\n    sub,\n    remove;\n\n  <span class=\"pl-k\">var</span> cached <span class=\"pl-k\">=</span> {};\n\n  <span class=\"pl-en\">sub</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">fn</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>clientList[key]) {\n      clientList[key] <span class=\"pl-k\">=</span> [];\n    }\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 使用缓存执行的订阅不用多次调用执行</span>\n    cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">==</span> <span class=\"pl-c1\">undefined</span> <span class=\"pl-k\">?</span> clientList[key].<span class=\"pl-c1\">push</span>(fn) <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-k\">if</span> (cached[key] <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Array</span> <span class=\"pl-k\">&amp;&amp;</span> cached[key].<span class=\"pl-c1\">length</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span>说明有缓存的 可以执行</span>\n      <span class=\"pl-smi\">fn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>, cached[key]);\n      cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>;\n    }\n  };\n  <span class=\"pl-en\">pub</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">var</span> key <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">shift</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>),\n      fns <span class=\"pl-k\">=</span> clientList[key];\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fns <span class=\"pl-k\">||</span> <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span>初始默认缓存</span>\n      cached[key] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">slice</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>, <span class=\"pl-c1\">0</span>);\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    }\n\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>, fn; (fn <span class=\"pl-k\">=</span> fns[i<span class=\"pl-k\">++</span>]); ) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 再次发布更新缓存中的 data 参数</span>\n      cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">undefined</span>\n        <span class=\"pl-k\">?</span> (cached[key] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">slice</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>, <span class=\"pl-c1\">0</span>))\n        <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>;\n      <span class=\"pl-smi\">fn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-c1\">arguments</span>);\n    }\n  };\n  <span class=\"pl-en\">remove</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">fn</span>) {\n    <span class=\"pl-k\">var</span> fns <span class=\"pl-k\">=</span> clientList[key];\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 缓存订阅一并删除</span>\n    <span class=\"pl-k\">var</span> cachedFn <span class=\"pl-k\">=</span> cached[key];\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fns <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>cachedFn) {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    }\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fn) {\n      fns <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>);\n      cachedFn <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>);\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-k\">if</span> (cachedFn) {\n        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> m <span class=\"pl-k\">=</span> <span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>; m <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>; m<span class=\"pl-k\">--</span>) {\n          <span class=\"pl-k\">var</span> _fn_temp <span class=\"pl-k\">=</span> cachedFn[m];\n          <span class=\"pl-k\">if</span> (_fn_temp <span class=\"pl-k\">===</span> fn) {\n            <span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">splice</span>(m, <span class=\"pl-c1\">1</span>);\n          }\n        }\n      }\n      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> n <span class=\"pl-k\">=</span> <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>; n <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>; n<span class=\"pl-k\">--</span>) {\n        <span class=\"pl-k\">var</span> _fn <span class=\"pl-k\">=</span> fns[n];\n        <span class=\"pl-k\">if</span> (_fn <span class=\"pl-k\">===</span> fn) {\n          <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">splice</span>(n, <span class=\"pl-c1\">1</span>);\n        }\n      }\n    }\n  };\n  <span class=\"pl-k\">return</span> {\n    pub<span class=\"pl-k\">:</span> pub,\n    sub<span class=\"pl-k\">:</span> sub,\n    remove<span class=\"pl-k\">:</span> remove\n  };\n})();</pre></div>\n<ul>\n<li>全局挂载使用</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> app.js</span>\n<span class=\"pl-en\">App</span>({\n  <span class=\"pl-en\">onLaunch</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">e</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 注册 storage，这是第二条</span>\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">Storage</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Storage</span>;\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 注册发布订阅模式</span>\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Event</span>;\n  }\n});</pre></div>\n<ul>\n<li>使用实例</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 添加收货地址页面订阅</span>\n <span class=\"pl-en\">onLoad</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">options</span>) {\n        <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span>.<span class=\"pl-c1\">sub</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addAddress<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">data</span>) {\n            <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">setData</span>({\n                addAddress<span class=\"pl-k\">:</span> data\n            })\n        })\n }\n<span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * 生命周期函数--监听页面隐藏</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n <span class=\"pl-en\">onHide</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 取消多余的事件订阅</span>\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">Storage</span>.<span class=\"pl-c1\">removeItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addAddress<span class=\"pl-pds\">\"</span></span>);\n},\n <span class=\"pl-en\">onUnload</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 取消多余的事件订阅</span>\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span>.<span class=\"pl-c1\">remove</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addAddress<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 传递地址页面获取好数据传递</span>\n<span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span>.<span class=\"pl-en\">pub</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addAddress<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">data</span>.<span class=\"pl-smi\">info</span>);\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 补充跳转返回</span></pre></div>\n<blockquote>\n<p>注意:使用完成数据后要注意卸载，在页面被关闭时操作</p>\n</blockquote>\n<h2>2.Storage</h2>\n<blockquote>\n<p>storage 管理封装，用法和上面的一致，挂载在全局对象上调用，使用介绍就不列了</p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">Storage</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>  第一个 key 参数可以省略，直接传递 obj 对象，支持 callback</span>\n  <span class=\"pl-en\">setItem</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">obj</span>, <span class=\"pl-smi\">callback</span>) {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">getType</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">a</span>) {\n      <span class=\"pl-k\">var</span> typeArray <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">toString</span>.<span class=\"pl-c1\">call</span>(a).<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>);\n      <span class=\"pl-k\">return</span> typeArray[<span class=\"pl-c1\">1</span>].<span class=\"pl-c1\">slice</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>);\n    };\n    <span class=\"pl-k\">var</span> firstParamType <span class=\"pl-k\">=</span> <span class=\"pl-en\">getType</span>(<span class=\"pl-c1\">arguments</span>[<span class=\"pl-c1\">0</span>]);\n    <span class=\"pl-k\">if</span> (firstParamType <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Object<span class=\"pl-pds\">\"</span></span>) {\n      <span class=\"pl-k\">var</span> keyArrayLength <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">keys</span>(<span class=\"pl-c1\">arguments</span>[<span class=\"pl-c1\">0</span>]).<span class=\"pl-c1\">length</span>;\n      <span class=\"pl-k\">var</span> index <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> keyName <span class=\"pl-k\">in</span> <span class=\"pl-c1\">arguments</span>[<span class=\"pl-c1\">0</span>]) {\n        index<span class=\"pl-k\">++</span>;\n        <span class=\"pl-smi\">wx</span>.<span class=\"pl-en\">setStorage</span>({\n          key<span class=\"pl-k\">:</span> keyName,\n          data<span class=\"pl-k\">:</span> <span class=\"pl-c1\">arguments</span>[<span class=\"pl-c1\">0</span>][keyName],\n          success<span class=\"pl-k\">:</span> index <span class=\"pl-k\">==</span> keyArrayLength <span class=\"pl-k\">?</span> <span class=\"pl-c1\">arguments</span>[<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {}\n        });\n      }\n    }\n    <span class=\"pl-k\">if</span> (firstParamType <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>String<span class=\"pl-pds\">\"</span></span>) {\n      <span class=\"pl-smi\">wx</span>.<span class=\"pl-en\">setStorage</span>({\n        key<span class=\"pl-k\">:</span> key,\n        data<span class=\"pl-k\">:</span> obj,\n        success<span class=\"pl-k\">:</span> callback <span class=\"pl-k\">||</span> <span class=\"pl-k\">function</span>() {}\n      });\n    }\n  },\n  <span class=\"pl-en\">getItem</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">wx</span>.<span class=\"pl-en\">getStorageSync</span>(key);\n  },\n  <span class=\"pl-en\">removeItem</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>) {\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-en\">removeStorage</span>({\n      key<span class=\"pl-k\">:</span> key\n    });\n  }\n};</pre></div>\n<h3>例子</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">Storage</span>.<span class=\"pl-c1\">setItem</span>(\n  {\n    class_pid<span class=\"pl-k\">:</span> <span class=\"pl-smi\">that</span>.<span class=\"pl-c1\">data</span>.<span class=\"pl-smi\">class_pid</span>,\n    class_id<span class=\"pl-k\">:</span> <span class=\"pl-smi\">that</span>.<span class=\"pl-c1\">data</span>.<span class=\"pl-smi\">class_id</span>,\n    is_import<span class=\"pl-k\">:</span> <span class=\"pl-smi\">that</span>.<span class=\"pl-c1\">data</span>.<span class=\"pl-smi\">is_import</span>,\n    shop_type<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>\n  },\n  <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Storage 已设置完毕！<span class=\"pl-pds\">\"</span></span>);\n  }\n);</pre></div>\n<h2>3.filter 计算属性</h2>\n<blockquote>\n<p>小程序也有计算属性，你知道吗？</p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 文件名称为 ：filter.wxs</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 不支持es6，Date,Number</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">filterOrderTitleName</span>(<span class=\"pl-smi\">status</span>) {\n  <span class=\"pl-k\">switch</span> (status) {\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>:\n      <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>待支付<span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2<span class=\"pl-pds\">\"</span></span>:\n      <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>待配送<span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>3<span class=\"pl-pds\">\"</span></span>:\n      <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>配送中<span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>4<span class=\"pl-pds\">\"</span></span>:\n      <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>已完成<span class=\"pl-pds\">\"</span></span>;\n  }\n}\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">filterPrice</span>(<span class=\"pl-smi\">str</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 四舍五入 格式化数字</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> toFix(8440.55,1) =&gt; 8440.6</span>\n  <span class=\"pl-k\">var</span> times <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">pow</span>(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">2</span>);\n  <span class=\"pl-k\">var</span> roundNum <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">round</span>(str <span class=\"pl-k\">*</span> times) <span class=\"pl-k\">/</span> times;\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">roundNum</span>.<span class=\"pl-en\">toFixed</span>(<span class=\"pl-c1\">2</span>);\n}\n\n<span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  filterOrderTitleName<span class=\"pl-k\">:</span> filterOrderTitleName,\n  filterPrice<span class=\"pl-k\">:</span> filterPrice\n};</pre></div>\n<ul>\n<li>使用实例，过滤处理打折后的金额小数位数</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 当前文件名：shoppingCart.wxml</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> wxs 文件顶部导入</span>\n<span class=\"pl-k\">&lt;</span>wxs src<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>../../filter/filter.wxs<span class=\"pl-pds\">\"</span></span> <span class=\"pl-c1\">module</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filter<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;&lt;</span><span class=\"pl-k\">/</span>wxs<span class=\"pl-k\">&gt;</span>\n <span class=\"pl-k\">&lt;</span>view <span class=\"pl-k\">class</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>offerPrice nowrap<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>¥{{<span class=\"pl-smi\">filter</span>.<span class=\"pl-en\">filterPrice</span>(<span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">plus</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">100</span><span class=\"pl-k\">*</span><span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">price</span><span class=\"pl-k\">/</span><span class=\"pl-c1\">1000</span>)}}\n    <span class=\"pl-k\">&lt;</span>image <span class=\"pl-k\">class</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>youhuiBox<span class=\"pl-pds\">'</span></span> src<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>../../assets/youhuiBox.png<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>view <span class=\"pl-k\">class</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>youhuiText<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">&gt;</span>会员{{<span class=\"pl-smi\">item</span>.<span class=\"pl-smi\">dazhe</span>}}折<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>view<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>image<span class=\"pl-k\">&gt;</span>\n <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>view<span class=\"pl-k\">&gt;</span></pre></div>\n<h2>4.flex Style</h2>\n<blockquote>\n<p>分享我常使用的自定义的一套 flex 样式,快速实现布局</p>\n</blockquote>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/*</span> -------------------------------------------------------------flex------------------------------------------------------- <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.center</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 单行水平垂直 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.oneLineCenter</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">center</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 单行垂直居中，水平向左 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.oneLineStart</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">flex-start</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 单行垂直居中，水平向右 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.oneLineEnd</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">flex-end</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 单行垂直居中，水平保持间距 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.oneLineAround</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">space-around</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 单行垂直居中，两端对齐 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.oneLineBetween</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">space-between</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 超过单行设置的最大宽度，允许换行显示 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.f-wrap</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-wrap</span></span>: <span class=\"pl-c1\">wrap</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 多轴线方向，一般配合  wrap 使用 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 宽度不足换行后，垂直方向靠上排列 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.mulitLineStart</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-wrap</span></span>: <span class=\"pl-c1\">wrap</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-content</span></span>: <span class=\"pl-c1\">flex-start</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 宽度不足换行后，垂直方向居中排列 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.mulitLineCenter</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-wrap</span></span>: <span class=\"pl-c1\">wrap</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-content</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 宽度不足换行后，垂直方向靠下排列 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.mulitLineEnd</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-wrap</span></span>: <span class=\"pl-c1\">wrap</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-content</span></span>: <span class=\"pl-c1\">flex-end</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 宽度不足换行后，垂直方向上保持间隔排列 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.mulitLineAround</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-wrap</span></span>: <span class=\"pl-c1\">wrap</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-content</span></span>: <span class=\"pl-c1\">space-around</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 宽度不足换行后，垂直方向上靠两侧最顶开始间隔排列 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.mulitLineBetween</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-wrap</span></span>: <span class=\"pl-c1\">wrap</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-content</span></span>: <span class=\"pl-c1\">space-between</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 纵轴变主轴，垂直靠上，水平居中 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.columnStart</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">-webkit-flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-direction</span></span>: <span class=\"pl-c1\">column</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">flex-start</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 纵轴变主轴，垂直靠下，水平居中 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.columnEnd</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-direction</span></span>: <span class=\"pl-c1\">column</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">flex-end</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 纵轴变主轴，垂直居中，水平居中 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.columnCenter</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-direction</span></span>: <span class=\"pl-c1\">column</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">center</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 纵轴变主轴，垂直间隔排列，水平居中 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.columnAround</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-direction</span></span>: <span class=\"pl-c1\">column</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">space-around</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 纵轴变主轴，垂直上下两侧按间隔排列，水平居中 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.columnBetween</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-direction</span></span>: <span class=\"pl-c1\">column</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">space-between</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">center</span>;\n}\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 纵轴变主轴，垂直上下两侧按间隔排列，水平靠左 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.columnBetweenStart</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-direction</span></span>: <span class=\"pl-c1\">column</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">space-between</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">flex-start</span>;\n}\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 纵轴变主轴，垂直上下两侧按间隔排列，水平靠右 <span class=\"pl-c\">*/</span></span>\n\n<span class=\"pl-e\">.columnBetweenEnd</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">flex</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">flex-direction</span></span>: <span class=\"pl-c1\">column</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">justify-content</span></span>: <span class=\"pl-c1\">space-between</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">align-items</span></span>: <span class=\"pl-c1\">flex-end</span>;\n}</pre></div>\n<h2>5.async await</h2>\n<p>使用<a href=\"https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js\">runtime.js</a>，使小程序支持 async await，拷贝文件至项目目录下。</p>\n<ul>\n<li>实例用法</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">regeneratorRuntime</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>../../utils/runtime.js<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-en\">Page</span>({\n  <span class=\"pl-en\">shopCartInit</span>() {\n    <span class=\"pl-k\">var</span> y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 拿到商铺位置信息再去渲染购物计算当前的address符合不符合规定</span>\n    <span class=\"pl-k\">var</span> <span class=\"pl-en\">showCartList</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 显示全局的地址信息</span>\n      <span class=\"pl-k\">var</span> globalAddress <span class=\"pl-k\">=</span> <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">Storage</span>.<span class=\"pl-c1\">getItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>globalAddress<span class=\"pl-pds\">\"</span></span>);\n      <span class=\"pl-k\">if</span> (globalAddress) {\n        <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">setData</span>({\n          globalAddress<span class=\"pl-k\">:</span> globalAddress,\n          addr_id<span class=\"pl-k\">:</span> <span class=\"pl-smi\">globalAddress</span>.<span class=\"pl-c1\">id</span>\n        });\n        <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">calculateDistance</span>(\n          qqmapsdk,\n          <span class=\"pl-smi\">globalAddress</span>.<span class=\"pl-smi\">latitude</span>,\n          <span class=\"pl-smi\">globalAddress</span>.<span class=\"pl-smi\">longitude</span>\n        );\n      } <span class=\"pl-k\">else</span> {\n        <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">setData</span>({\n          globalAddress<span class=\"pl-k\">:</span> {}\n        });\n      }\n    };\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> await 等待获取商铺位置信息</span>\n    <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getShopPosTionMsg</span>() {\n      <span class=\"pl-k\">await</span> <span class=\"pl-smi\">util</span>.<span class=\"pl-en\">promiseRequest</span>(<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">merchant_addr</span>, {}).<span class=\"pl-c1\">then</span>(<span class=\"pl-smi\">res</span> <span class=\"pl-k\">=&gt;</span> {\n        <span class=\"pl-k\">var</span> data <span class=\"pl-k\">=</span> <span class=\"pl-smi\">res</span>.<span class=\"pl-c1\">data</span>.<span class=\"pl-smi\">response_data</span>.<span class=\"pl-smi\">lists</span>[<span class=\"pl-c1\">0</span>];\n        <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">setData</span>({\n          shop_lat<span class=\"pl-k\">:</span> <span class=\"pl-smi\">data</span>.<span class=\"pl-smi\">latitude</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 商铺纬度</span>\n          shop_lng<span class=\"pl-k\">:</span> <span class=\"pl-smi\">data</span>.<span class=\"pl-smi\">longitude</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 商铺经度</span>\n          peiSongFanWei<span class=\"pl-k\">:</span> <span class=\"pl-smi\">data</span>.<span class=\"pl-c1\">scope</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 配送范围</span>\n        });\n      });\n    }\n\n    <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">initData</span>() {\n      <span class=\"pl-k\">await</span> <span class=\"pl-en\">getShopPosTionMsg</span>();\n      <span class=\"pl-k\">await</span> <span class=\"pl-en\">showCartList</span>();\n      <span class=\"pl-smi\">util</span>.<span class=\"pl-en\">closeLoading</span>();\n      <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">setData</span>({\n        loading<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>\n      });\n    }\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 开始执行</span>\n    <span class=\"pl-en\">initData</span>();\n  }\n});</pre></div>\n<h2>6.addKey Api</h2>\n<blockquote>\n<p>使用自定义属性的方法辅助完成业务逻辑，已发布至 <a href=\"https://github.com/xiaoyueyue165/addKey\">addKey</a></p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * 为数组添加新的自定义键值以及过滤每个子项的方法</span>\n<span class=\"pl-c\"> *</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> <span class=\"pl-en\">{*}</span> <span class=\"pl-smi\">arr</span></span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> <span class=\"pl-en\">{*}</span> <span class=\"pl-smi\">obj</span> { isShow:false,isStar:false}</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> <span class=\"pl-en\">{*}</span> <span class=\"pl-smi\">filterFn</span></span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@returns</span></span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">addKey</span>(<span class=\"pl-smi\">sourceArray</span>, <span class=\"pl-smi\">extendObj</span>, <span class=\"pl-smi\">filterFn</span>) {\n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">getType</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">a</span>) {\n    <span class=\"pl-k\">var</span> typeArray <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">toString</span>.<span class=\"pl-c1\">call</span>(a).<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>);\n    <span class=\"pl-k\">return</span> typeArray[<span class=\"pl-c1\">1</span>].<span class=\"pl-c1\">slice</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>);\n  };\n  <span class=\"pl-k\">var</span> secondParamType <span class=\"pl-k\">=</span> <span class=\"pl-en\">getType</span>(<span class=\"pl-c1\">arguments</span>[<span class=\"pl-c1\">1</span>]);\n\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-en\">getType</span>(sourceArray) <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Array<span class=\"pl-pds\">\"</span></span>) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>The first argument must be an array type<span class=\"pl-pds\">\"</span></span>);\n  }\n  <span class=\"pl-k\">if</span> (secondParamType <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Object<span class=\"pl-pds\">\"</span></span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">sourceArray</span>.<span class=\"pl-c1\">forEach</span>((<span class=\"pl-smi\">v</span>, <span class=\"pl-smi\">index</span>, <span class=\"pl-smi\">sourceArray</span>) <span class=\"pl-k\">=&gt;</span> {\n      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> key <span class=\"pl-k\">in</span> extendObj) {\n        v[key] <span class=\"pl-k\">=</span> extendObj[key];\n      }\n      <span class=\"pl-k\">typeof</span> filterFn <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>function<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">?</span> <span class=\"pl-en\">filterFn</span>(v, index, sourceArray) <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>;\n    });\n  } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (secondParamType <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Function<span class=\"pl-pds\">\"</span></span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">sourceArray</span>.<span class=\"pl-c1\">forEach</span>((<span class=\"pl-smi\">v</span>, <span class=\"pl-smi\">index</span>, <span class=\"pl-smi\">sourceArray</span>) <span class=\"pl-k\">=&gt;</span> {\n      <span class=\"pl-c1\">arguments</span>[<span class=\"pl-c1\">1</span>](v, index, sourceArray);\n    });\n  } <span class=\"pl-k\">else</span> {\n    <span class=\"pl-k\">return</span> sourceArray;\n  }\n}</pre></div>\n<ul>\n<li>使用实例</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">util</span>.<span class=\"pl-en\">addKey</span>(data, { y_isCheck<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span> }, <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">v</span>) {\n  <span class=\"pl-smi\">v</span>.<span class=\"pl-smi\">dazhe</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Number</span>(<span class=\"pl-smi\">v</span>.<span class=\"pl-smi\">plus</span>);\n});\n<span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setData</span>({\n  cartList<span class=\"pl-k\">:</span> data\n});</pre></div>\n<h2>7. 组件化复用开发实践</h2>\n<blockquote>\n<p>组件化解构项目元件，提高开发效率,可参照<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/\" rel=\"nofollow\">官方介绍</a>起步 !</p>\n</blockquote>\n<p>这里介绍一个自定义的跑马灯的轮播图组件实例</p>\n<h3>(1) 第一步，查看目录结构划分，主要为 <code>Carousel</code> 组件 在 <code>index</code> 页面的使用</h3>\n<div class=\"highlight highlight-source-shell\"><pre>│\n├───component\n│   └───Carousel\n│           Carousel.js\n│           Carousel.json\n│           Carousel.wxml\n│           Carousel.wxss\n│\n├───filter\n│       filter.wxs\n│\n├───pages\n│   └───index\n│           index.js\n│           index.json\n│           index.wxml\n│           index.wxss\n│\n└───utils\n        api.js\n        runtime.js\n        util.js</pre></div>\n<h3>(2) 第二步我们分析看如何使用,设计 组件需要的 <code>props</code></h3>\n<ul>\n<li>数据项，必须 <code>bannerList</code></li>\n<li>轮播图的固定高度 <code>swiperHeight</code></li>\n<li>自定义轮播按钮小点，宽与高一致，圆形 <code>dotWidthAndHeight</code></li>\n<li>轮播按钮盒子距离顶部的高度 <code>dotTop</code></li>\n</ul>\n<p>** 最终在 index.wxml 的实际使用**</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">view</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Carousel<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">Carousel</span>\n    <span class=\"pl-e\">swiperHeight</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>260rpx<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">bannerList</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{bannerList}}<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">dotWidthAndHeight</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>12rpx<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">dotTop</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-20rpx<span class=\"pl-pds\">\"</span></span>\n  &gt;&lt;/<span class=\"pl-ent\">Carousel</span>&gt;\n&lt;/<span class=\"pl-ent\">view</span>&gt;</pre></div>\n<h3>(3).业务代码编写</h3>\n<ul>\n<li>Carousel.json<br>\n开启自定义组件模式</li>\n</ul>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>component<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">true</span>\n}</pre></div>\n<ul>\n<li>Carousel.wxml</li>\n</ul>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">view</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Carousel_wrap<span class=\"pl-pds\">\"</span></span>&gt;\n  <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 图片区 <span class=\"pl-c\">--&gt;</span></span>\n  &lt;<span class=\"pl-ent\">swiper</span>\n    <span class=\"pl-e\">current</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{swiperCurrentIndex}}<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">circular</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>true<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">bindchange</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>swiperChange<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">indicator-dots</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{indicatorDots}}<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">autoplay</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>true<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">interval</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>5000<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">duration</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1000<span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-e\">style</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-s1\"><span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>:{{swiperHeight}}</span><span class=\"pl-pds\">\"</span></span>\n  &gt;\n    &lt;<span class=\"pl-ent\">swiper-item</span>\n      <span class=\"pl-e\">wx:for</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{bannerList}}<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">bindtap</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>toHref<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">wx:key</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{index}}<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">bindtap</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>toHref<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">data-type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{item.type}}<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">data-id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{item.goods_id}}<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">data-content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{item.content}}<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">data-link</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{item.link}}<span class=\"pl-pds\">\"</span></span>\n    &gt;\n      &lt;<span class=\"pl-ent\">image</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{item.img_url}}<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>slide-image<span class=\"pl-pds\">\"</span></span> /&gt;\n    &lt;/<span class=\"pl-ent\">swiper-item</span>&gt;\n  &lt;/<span class=\"pl-ent\">swiper</span>&gt;\n  <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 关联按钮 <span class=\"pl-c\">--&gt;</span></span>\n  &lt;<span class=\"pl-ent\">view</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>boxCell<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">style</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-s1\"><span class=\"pl-c1\"><span class=\"pl-c1\">top</span></span>:{{dotTop}}</span><span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">block</span>\n      <span class=\"pl-e\">wx:for</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{bannerList.length &gt; 1 ? bannerList:[]}}<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">wx:for-index</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>index<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">wx:key</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{item.banner}}<span class=\"pl-pds\">\"</span></span>\n    &gt;\n      &lt;<span class=\"pl-ent\">view</span>\n        <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{index}}<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dot {{index === swiperCurrentIndex ? 'dot_active':''}}<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-e\">style</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-s1\"><span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>:{{dotWidthAndHeight}},<span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>:{{dotWidthAndHeight}}</span><span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-e\">bindtap</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>selectCarouselByIndex<span class=\"pl-pds\">\"</span></span>\n      /&gt;\n    &lt;/<span class=\"pl-ent\">block</span>&gt;\n  &lt;/<span class=\"pl-ent\">view</span>&gt;\n&lt;/<span class=\"pl-ent\">view</span>&gt;</pre></div>\n<ul>\n<li>Carousel.js</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">Component</span>({\n  <span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\">   * 组件的属性列表 必须</span>\n<span class=\"pl-c\">   <span class=\"pl-c\">*/</span></span>\n  properties<span class=\"pl-k\">:</span> {\n    bannerList<span class=\"pl-k\">:</span> {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 属性名</span>\n      type<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Array</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span>\n      value<span class=\"pl-k\">:</span> [], <span class=\"pl-c\"><span class=\"pl-c\">//</span> 属性初始值（可选），如果未指定则会根据类型选择一个</span>\n      <span class=\"pl-en\">observer</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">newVal</span>, <span class=\"pl-smi\">oldVal</span>) {} <span class=\"pl-c\"><span class=\"pl-c\">//</span> 属性被改变时执行的函数（可选），也可以写成在methods段中定义的方法名字符串, 如：'_propertyChange'</span>\n    },\n    dotWidthAndHeight<span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span>,\n    swiperHeight<span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span> swiper 高度</span>\n    dotTop<span class=\"pl-k\">:</span> <span class=\"pl-c1\">String</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 小点距离顶部高度</span>\n  },\n\n  <span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\">   * 组件的初始数据</span>\n<span class=\"pl-c\">   <span class=\"pl-c\">*/</span></span>\n  data<span class=\"pl-k\">:</span> {\n    swiperCurrentIndex<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>,\n    indicatorDots<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> 自定义轮播按钮</span>\n  },\n  <span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\">   * 组件的方法列表</span>\n<span class=\"pl-c\">   <span class=\"pl-c\">*/</span></span>\n  methods<span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">swiperChange</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">e</span>) {\n      <span class=\"pl-k\">var</span> source <span class=\"pl-k\">=</span> <span class=\"pl-smi\">e</span>.<span class=\"pl-smi\">detail</span>.<span class=\"pl-c1\">source</span>;\n      <span class=\"pl-k\">if</span> (source <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>autoplay<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">||</span> source <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>touch<span class=\"pl-pds\">\"</span></span>) {\n        <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setData</span>({\n          swiperCurrentIndex<span class=\"pl-k\">:</span> <span class=\"pl-smi\">e</span>.<span class=\"pl-smi\">detail</span>.<span class=\"pl-c1\">current</span>\n        });\n      }\n    },\n    <span class=\"pl-en\">selectCarouselByIndex</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">e</span>) {\n      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setData</span>({\n        swiperCurrentIndex<span class=\"pl-k\">:</span> <span class=\"pl-c1\">Number</span>(<span class=\"pl-smi\">e</span>.<span class=\"pl-smi\">currentTarget</span>.<span class=\"pl-c1\">id</span>)\n      });\n    },\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 轮播图跳转至内部页面</span>\n    <span class=\"pl-en\">toHref</span>(<span class=\"pl-smi\">e</span>) {\n      <span class=\"pl-k\">const</span> <span class=\"pl-c1\">data</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">e</span>.<span class=\"pl-smi\">currentTarget</span>.<span class=\"pl-smi\">dataset</span>;\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> type = 2，根据 goods_id 展示商品详情</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> type = 3, 展示富文本的活动详情页面</span>\n      <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">data</span>.<span class=\"pl-c1\">type</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2<span class=\"pl-pds\">\"</span></span>) {\n        <span class=\"pl-smi\">wx</span>.<span class=\"pl-en\">navigateTo</span>({\n          url<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>../sort_detail/sort_detail?id=<span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">data</span>.<span class=\"pl-c1\">id</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>\n        });\n      } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">data</span>.<span class=\"pl-c1\">type</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>3<span class=\"pl-pds\">\"</span></span>) {\n        <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span>.<span class=\"pl-en\">pub</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>renderData<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">data</span>.<span class=\"pl-c1\">content</span>);\n        <span class=\"pl-smi\">wx</span>.<span class=\"pl-en\">navigateTo</span>({\n          url<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>../activity_detail/activity_detail<span class=\"pl-pds\">`</span></span>\n        });\n      }\n    }\n  }\n});</pre></div>\n<h3>更多</h3>\n<ul>\n<li><a href=\"https://github.com/xiaoyueyue165/wxapp-rainbow\">wxapp-rainbow</a> 安利一下自己写的小程序组件库（偏功能性）\n<ul>\n<li>uploadImg 上传图片</li>\n<li>carousel 轮播图</li>\n<li>authorization 授权登录</li>\n<li>loading 加载中</li>\n</ul>\n</li>\n</ul>\n<h2>8. 自定义 headerBar</h2>\n<blockquote>\n<p>后续分享...</p>\n</blockquote>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://juejin.im/post/5c14b253e51d452f8e603896\" rel=\"nofollow\">https://juejin.im/post/5c14b253e51d452f8e603896</a></li>\n</ul>\n<h3>生态圈</h3>\n<ul>\n<li><a href=\"https://github.com/weilanwl/ColorUI\">ColorUI</a> 鲜亮的高饱和色彩，专注视觉的小程序组件库</li>\n<li><a href=\"https://github.com/NervJS/taro\">taro</a> 多端统一开发框架，支持用 React 的开发方式编写一次代码，生成能运行在微信小程序、H5 、 React Native 等的应用</li>\n<li><a href=\"https://github.com/dcloudio/uni-app\">uni-app</a> 使用 Vue.js 开发跨平台应用的前端框架</li>\n<li><a href=\"https://github.com/justjavac/awesome-wechat-weapp\">微信小程序开发资源汇总</a></li>\n</ul>"
  },
  {
    "id": 46,
    "title": "2018年终总结",
    "labels": "观点与感想",
    "created_at": "2019-01-01T12:28:54Z",
    "updated_at": "2019-01-01T17:31:46Z",
    "body_html": "<h2>年初目标</h2>\n<p>在2018年1月13日，参加恩泽小组在亚男家的聚餐时写下了2018年的目标，这是去年自己的方向。</p>\n<ol>\n<li>《我的心你要称颂耶和华》持续坚持一年，不断更</li>\n<li>读经跟上诗班的进度，完成一遍通读</li>\n<li>在佳美诗班中的摆上与成长，赞美神</li>\n<li>保持与虹佑的关系，愿合神的心意</li>\n<li>自考本科考试</li>\n<li>工作中的成长，前端技术之路的长进</li>\n</ol>\n<h2>年终检验</h2>\n<h3>一、公众号分享</h3>\n<p>没有坚持。在年初以后由于没有新的牧者分享，公众号的分享停了下来。</p>\n<h3>二、读经计划</h3>\n<p>10月份之前已完成一遍通读。追求这个目标有一点出于形式化，因为从来没有这样做过，完整的读过一遍圣经。</p>\n<h3>三、佳美诗班</h3>\n<p>圆满完成。每周回录音作业的时候有拖延症，总是挨到星期六完成。以及正确看待敬拜与讲道的关系。</p>\n<blockquote>\n<p>在整部新约的教训，重点更多放在布道宣教，建立教会，真理的教导与传递等重大事工上，唱诗赞美敬拜显然并不是特别被强调的，新约中论宣教，讲道，祷告及相爱生活的教训就远比论唱诗多。但反观今日有不少教会却以唱诗作为崇拜会的主要部分，对讲道反觉有点不耐烦，真个本末倒置！</p>\n</blockquote>\n<ul>\n<li><a href=\"http://chs.goldenlampstand.org/glb/print.php?GLID=10204\" rel=\"nofollow\">唱诗，赞美与敬拜</a></li>\n</ul>\n<h3>四、我的虹佑</h3>\n<p>4月份我们一起在汾阳参加了婚恋营会，明白“你就是我”；</p>\n<p>8 月份经历了她对神许下印证不被应允的灰心，也有我删除微信联系方式，立定三年之约盼望神回转心意所发的热心；</p>\n<p>9月1日经历了最心灰意冷，前路渺茫的环境，所有通道全部都被堵死，发生的细节没有记日记 ...</p>\n<p>紧接着的几天后我们恢复了联系，通过qq与电话交流；</p>\n<p>11月2日去学校看她，说说话，一起参加主日，认识吕姨；</p>\n<p>1月1日的元旦假期，没有考虑的完全就拒绝了，放假前两天怕完成不了工作上的任务，项目1月8日上线，准备假期加班，实则效果不如在一起学校，她复习功课备考，我做一些学习工作，如此美好的计划，你可知我愿意把几天前打定不去的心意回转，从为自己创造更好的学习环境来说，无疑我过去更合适...</p>\n<h3>五、自考本</h3>\n<p>4月份5过2，缺考一门；</p>\n<p>10月份4过3门，近代史第二次没有通过，客观题得分34分，主观题以及论述题各得10分，剩余6门科目。</p>\n<h3>六、工作</h3>\n<p>8月份基本开发完成 Hybrid APP，价值几何，技术方面的长进?</p>\n<p>9月初开始有离职想法开始面试，在没有拿到 offer的情况下，十一过后，冲散了我的离职计划，直到11月2日发送离职邮件，12月7日正式离职；</p>\n<p>感恩，12月24日平安夜收到前潮网络offer，12月25日圣诞节入职，开始第一个小程序项目 ；</p>\n<p>2019...</p>\n<h2>2019 的新目标</h2>"
  },
  {
    "id": 45,
    "title": "如果你抢不到回家的火车票，那么你知道“分流”吗？",
    "labels": "杂物间",
    "created_at": "2019-01-01T12:28:01Z",
    "updated_at": "2019-08-13T02:57:17Z",
    "body_html": "<ol>\n<li>网址 <a href=\"http://www.12306bypass.com/\" rel=\"nofollow\">http://www.12306bypass.com/</a> ，下载安装（只支持 Windows）</li>\n</ol>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/75819e6563c0422f3fec936d77c948b60dbdc1c0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673578757761686569656a32313177306b616e35372e6a7067\"><img src=\"https://camo.githubusercontent.com/75819e6563c0422f3fec936d77c948b60dbdc1c0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673578757761686569656a32313177306b616e35372e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5xuwaheiej211w0kan57.jpg\" style=\"max-width:100%;\"></a></p>\n<ol start=\"2\">\n<li>使用12306账号登录</li>\n</ol>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/c5734756340809ecc3bf284a6b6e231883449b0b/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316735787630736a7979776a323066753061387137752e6a7067\"><img src=\"https://camo.githubusercontent.com/c5734756340809ecc3bf284a6b6e231883449b0b/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316735787630736a7979776a323066753061387137752e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5xv0sjyywj20fu0a8q7u.jpg\" style=\"max-width:100%;\"></a></p>\n<ol start=\"3\">\n<li>填写抢票单</li>\n</ol>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/e03927460037ba5abac6c431d9977fbf75e6108e/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357876316b637133356a32307476306a7261636e2e6a7067\"><img src=\"https://camo.githubusercontent.com/e03927460037ba5abac6c431d9977fbf75e6108e/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357876316b637133356a32307476306a7261636e2e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5xv1kcq35j20tv0jracn.jpg\" style=\"max-width:100%;\"></a></p>\n<ol start=\"4\">\n<li>设置通知方式 （这里使用的微信通知，其他通知方式可以尝试，建议先测试一下）</li>\n</ol>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/74c98a0e8c23ad7845293da307e30570db3686a0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673578763236366833366a32307476306a723738392e6a7067\"><img src=\"https://camo.githubusercontent.com/74c98a0e8c23ad7845293da307e30570db3686a0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673578763236366833366a32307476306a723738392e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5xv266h36j20tv0jr789.jpg\" style=\"max-width:100%;\"></a></p>\n<p>收到通知消息如下：</p>\n<p>尊敬的用户：yy1656800216，您的车票已经抢票成功！信息如下:乘客: Rainbow,日期:2019-01-01,车次:K777,地点:xx 22:00-北京 05:00,席别:硬座,请在30分钟内完成付款,更多信息请查询未付款订单...</p>\n<ol start=\"5\">\n<li>开始抢票</li>\n</ol>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/4ad4773dd0f79aad14a0525a50cc10f0c262eb62/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357876326d726878346a32307476306a7234326d2e6a7067\"><img src=\"https://camo.githubusercontent.com/4ad4773dd0f79aad14a0525a50cc10f0c262eb62/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167357876326d726878346a32307476306a7234326d2e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g5xv2mrhx4j20tv0jr42m.jpg\" style=\"max-width:100%;\"></a></p>\n<p>使用电脑如果经常在电脑旁边可以开电脑的声音，抢票成功会有音乐提醒，最好还是和一个好友商量好，让他用电话的方式通知你。</p>\n<p><strong>祝顺利买到车票</strong>！</p>"
  },
  {
    "id": 44,
    "title": "Javascript双等与三等的布尔值比较",
    "labels": "JavaScript",
    "created_at": "2018-12-20T08:55:15Z",
    "updated_at": "2018-12-20T14:45:14Z",
    "body_html": "<h2>说明</h2>\n<p>面试被一连串的 考基础的双等与三等判断问的有点蒙，虽然知道<code>==</code> 是抽象相等运算符， <code>===</code> 是严格相等运算符，但其中的比较规则并不胜了解，那么为何<code>[] == [] </code>为 <code>true</code>呢 ？其他规则是如何 ？</p>\n<p>在<a href=\"https://www.zhihu.com/question/42328292\" rel=\"nofollow\">知乎提问</a>中找到了答案， 感谢，一起来看一下<a href=\"http://www.ecma-international.org/ecma-262/6.0/\" rel=\"nofollow\">ECMAScript 6 官方文档</a> 。</p>\n<h2>双等比较</h2>\n<p>The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:</p>\n<ol>\n<li>If Type(x) is the same as Type(y), then Return the result of performing Strict Equality Comparison x === y.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre>[] <span class=\"pl-k\">==</span> []; <span class=\"pl-c\"><span class=\"pl-c\">//</span> false</span></pre></div>\n<ol start=\"2\">\n<li>If x is null and y is undefined, or x is undefined and y is null, return true.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">null</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">undefined</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> ture</span></pre></div>\n<ol start=\"3\">\n<li>If Type(x) is Number and Type(y) is String, return the result of the comparison x == ToNumber(y), vice versa (反之亦然).</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">1</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true </span>\n<span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>0<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<blockquote>\n<p>Number(\"\") =&gt; 0</p>\n</blockquote>\n<ol start=\"4\">\n<li>If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y, vice versa.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">false</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">1</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">true</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<ol start=\"5\">\n<li>\n<p>If Type(x) is either String, Number, or Symbol and Type(y) is Object, then return the result of the comparison x == <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive\" rel=\"nofollow\">ToPrimitive</a>(y), vice versa.</p>\n</li>\n<li>\n<p>Return false.</p>\n</li>\n</ol>\n<h2>三等比较</h2>\n<p>The comparison x === y, where x and y are values, produces true or false. Such a comparison is performed as follows:</p>\n<ol>\n<li>If Type(x) is different from Type(y), return false.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">1</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> false</span></pre></div>\n<ol start=\"2\">\n<li>If Type(x) is Undefined, return true. (按顺序执行，x 与 y 须类型一致，以下一样除了 第9)</li>\n<li>If Type(x) is Null, return true.</li>\n<li>If Type(x) is Number, then</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>   a. If x is NaN, <span class=\"pl-k\">return</span> false.\n   b. If y is NaN, <span class=\"pl-k\">return</span> false.\n   c. If x is the same Number value as y, <span class=\"pl-k\">return</span> true.\n   d. If x is +0 and y is −0, <span class=\"pl-k\">return</span> true.\n   e.If x is −0 and y is +0, <span class=\"pl-k\">return</span> true.\n   f. Return false.</pre></div>\n<ol start=\"5\">\n<li>If Type(x) is String, then</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>  a. If x and y are exactly the same sequence of code units (same length and same code unit\n      at corresponding indices), <span class=\"pl-k\">return</span> true.\n  b. Else, <span class=\"pl-k\">return</span> false.</pre></div>\n<ol start=\"6\">\n<li>If Type(x) is Boolean, then</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>  a. If x and y are both <span class=\"pl-c1\">true</span> or both false, <span class=\"pl-k\">return</span> true.\n  b. Else, <span class=\"pl-k\">return</span> false.</pre></div>\n<ol start=\"7\">\n<li>If x and y are the same Symbol value, return true.</li>\n<li>If x and y are the same Object value, return true.</li>\n<li>Return false.</li>\n</ol>\n<h2>总结</h2>\n<p><code>==</code> 运算符有可能是在进行必要的类型转换后，才再比较。<code>===</code> 运算符不会进行类型转换，所以如果两个值不是相同的类型，会直接返回false。使用<code>==</code> 时，可能发生一些特别的事情，例如：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">1</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">1</span> <span class=\"pl-k\">==</span> [<span class=\"pl-c1\">1</span>]; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">1</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">true</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>0<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">false</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<p>建议是从不使用 <code>==</code> 运算符，除了方便与 <code>null</code> 或undefined比较时，<code>a == null</code>如果a为null或undefined将返回true。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> a <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(a <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(a <span class=\"pl-k\">==</span> <span class=\"pl-c1\">undefined</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<h4>参考</h4>\n<ul>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\" rel=\"nofollow\">abstract-equality-comparison</a></li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-strict-equality-comparison\" rel=\"nofollow\">strict-equality-comparison</a></li>\n<li><a href=\"https://www.zhihu.com/question/42328292\" rel=\"nofollow\">[\"0\"]==[\"0\"]为什么是false？</a></li>\n</ul>"
  },
  {
    "id": 43,
    "title": "IE兼容性",
    "labels": "开发者笔记",
    "created_at": "2018-11-08T05:17:23Z",
    "updated_at": "2019-09-02T03:21:59Z",
    "body_html": "<h1>IE兼容性</h1>\n<blockquote>\n<p>仅考虑ie8+</p>\n</blockquote>\n<h2>了解浏览器支持情况</h2>\n<ul>\n<li><a href=\"http://caniuse.com/\" rel=\"nofollow\">caniuse.com</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\" rel=\"nofollow\">MDN CSS Reference</a></li>\n<li><a href=\"https://tympanus.net/codrops/css_reference/\" rel=\"nofollow\">Codrops CSS Reference</a></li>\n<li><a href=\"http://www.quirksmode.org/css/index.html\" rel=\"nofollow\">QuirksMode.org CSS</a></li>\n<li>了解浏览器市场份额\n<ul>\n<li>日志分析</li>\n<li><a href=\"http://tongji.baidu.com/data/browser\" rel=\"nofollow\">百度统计</a>、<a href=\"https://www.netmarketshare.com/browser-market-share.aspx?qprid=2&amp;qpcustomd=0\" rel=\"nofollow\">NetMarketShare</a></li>\n</ul>\n</li>\n</ul>\n<h2>兼容性写法</h2>\n<h3>1. 条件注释法</h3>\n<p>判断IE浏览器的范围：</p>\n<ul>\n<li><code>lt</code>: less than是小于</li>\n<li><code>lte</code>: less than or equal 是小于或等于</li>\n<li><code>gt</code>：greater than是高于</li>\n<li><code>gte</code>: greater than or equal高于或等于</li>\n<li><code>!</code>: 是不等于,选择条件版本以外所有版本，无论高低</li>\n</ul>\n<h4>例子</h4>\n<div class=\"highlight highlight-text-html-basic\"><pre> <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span>ie 8，9支持<span class=\"pl-c\">--&gt;</span></span>\n <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span>[if gte ie 8]&gt; </span>\n<span class=\"pl-c\">          &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\"&gt;</span>\n<span class=\"pl-c\">      &lt;![endif]<span class=\"pl-c\">--&gt;</span></span></pre></div>\n<blockquote>\n<p>注:只能采用外链的样式书写css代码</p>\n</blockquote>\n<h3>2.行内后缀</h3>\n<table>\n<thead>\n<tr>\n<th>CSS style</th>\n<th>针对的浏览器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>color:red\\9;</td>\n<td>IE8-IE10</td>\n</tr>\n<tr>\n<td>color:red\\0;</td>\n<td>IE8-IE10,Edge</td>\n</tr>\n<tr>\n<td>color:red\\9\\0;</td>\n<td>IE9/IE10</td>\n</tr>\n<tr>\n<td>color:red!important;</td>\n<td>所有浏览器除了IE6</td>\n</tr>\n</tbody>\n</table>\n<h4>例子</h4>\n<div class=\"highlight highlight-source-css\"><pre> <span class=\"pl-e\">#box</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">pink</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">purple</span><span class=\"pl-cce\">\\9\\0</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">red</span> <span class=\"pl-k\">!important</span>;\n    }</pre></div>\n<blockquote>\n<p>ie11 未测试，edge使用ie模拟器测试，ie11均未测试</p>\n</blockquote>\n<h2>3.选择器前缀</h2>\n<ul>\n<li>媒体查询</li>\n</ul>\n<div class=\"highlight highlight-source-css\"><pre> <span class=\"pl-k\">@media</span> <span class=\"pl-cce\">\\0</span>screen {<span class=\"pl-ent\">body</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">red</span>; }}  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>IE8 专属<span class=\"pl-c\">*/</span></span>\n \n <span class=\"pl-k\">@media</span> screen<span class=\"pl-cce\">\\0</span> {<span class=\"pl-ent\">body</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">green</span>; }} <span class=\"pl-c\"><span class=\"pl-c\">/*</span> IE8-IE10,Edge<span class=\"pl-c\">*/</span></span>\n \n <span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> {<span class=\"pl-ent\">body</span> {<span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">blue</span>;}}<span class=\"pl-c\"><span class=\"pl-c\">/*</span> IE8-IE10,Edge，IE11<span class=\"pl-c\">*/</span></span>\n \n _<span class=\"pl-e\">::selection</span>,<span class=\"pl-ent\">body</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">blue</span>; } <span class=\"pl-c\"><span class=\"pl-c\">/*</span>IE9，IE10<span class=\"pl-c\">*/</span></span>\n \n <span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">-ms-high-contrast</span>: active), (<span class=\"pl-c1\">-ms-high-contrast</span>: none) {<span class=\"pl-ent\">body</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">orange</span>; }} <span class=\"pl-c\"><span class=\"pl-c\">/*</span>IE10,Edge<span class=\"pl-c\">*/</span></span>\n \n  _<span class=\"pl-e\">:-ms-lang</span>(x),<span class=\"pl-ent\">body</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">blue</span>;} <span class=\"pl-c\"><span class=\"pl-c\">/*</span>IE10<span class=\"pl-c\">*/</span></span></pre></div>\n<h5>参考链接</h5>\n<ul>\n<li><a href=\"https://www.cnblogs.com/limeiky/p/6170738.html\" rel=\"nofollow\">IE10、IE11和Microsoft Edge的Hack</a></li>\n</ul>\n<h2>其他</h2>\n<h3>CSS3 选择器兼容性</h3>\n<ul>\n<li>CSS3 中的大部分选择器，兼容性是 IE9+</li>\n<li>例如 <code>:target :empty :nth-child :nth-of-type :checked :disabled</code> 无法在 IE6-8 用</li>\n<li>移动端支持绝大多数 CSS3 选择器</li>\n</ul>\n<h3>IE差异</h3>\n<ul>\n<li>清除浮动</li>\n<li>盒子模型</li>\n<li>透明 <code>opacity</code> =》<code>filter: alpha(opacity=50)</code></li>\n<li><code>flex</code> IE10+</li>\n</ul>\n<h3>IE8 支持</h3>\n<ul>\n<li><code>box-sizing</code></li>\n<li><code>outline</code></li>\n<li><code>background-position</code></li>\n</ul>\n<h3>IE8不支持</h3>\n<ul>\n<li><code>border-radius</code></li>\n<li><code>box-shadow</code></li>\n<li><code>opacity</code></li>\n<li><code>background-size</code></li>\n</ul>\n<div class=\"highlight highlight-source-css\"><pre>   <span class=\"pl-c\"><span class=\"pl-c\">/*</span>使用固定宽高布局<span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-e\">.i-upload</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">inline-block</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">16<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">16<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">url</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>../imgs/icon_upload.png<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-c1\">no-repeat</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">background-position</span></span>: <span class=\"pl-c1\">-2000<span class=\"pl-k\">px</span></span> <span class=\"pl-c1\">-2000<span class=\"pl-k\">px</span></span><span class=\"pl-cce\">\\9</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">background-size</span></span>: <span class=\"pl-c1\">16<span class=\"pl-k\">px</span></span> <span class=\"pl-c1\">16<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">filter</span></span>:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=<span class=\"pl-s\"><span class=\"pl-pds\">'</span>../imgs/icon_upload.png<span class=\"pl-pds\">'</span></span>,  sizingMethod=<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scale<span class=\"pl-pds\">'</span></span>);\n}</pre></div>\n<h3>IE9 不支持</h3>\n<ul>\n<li><code>transition</code> 与 <code>animation</code>\n<ul>\n<li>可以接受的降级</li>\n<li>实在不能接收就用 JavaScript</li>\n</ul>\n</li>\n</ul>\n<h3>控制 IE 模式(&lt;=10)</h3>\n<ul>\n<li>Doctype有无控制是否进入怪异模式</li>\n<li>meta 标签控制进入哪种文档模式</li>\n</ul>\n<div class=\"highlight highlight-text-html-basic\"><pre>  <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 使用IE7模式渲染 <span class=\"pl-c\">--&gt;</span></span>\n  &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">http-equiv</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>X-UA-Compatible<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>IE=7<span class=\"pl-pds\">\"</span></span>&gt;\n\n  <span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span> 使用最新引擎 <span class=\"pl-c\">--&gt;</span></span>\n  &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">http-equiv</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x-ua-compatible<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>IE=edge<span class=\"pl-pds\">\"</span></span> &gt;</pre></div>\n<h2>media query</h2>\n<ul>\n<li>基本的媒体（all/print/screen/speech）都支持</li>\n<li>媒体特性（width/height/orientation...）IE9 及以上\n<ul>\n<li>还是建议 IE8 及以下使用固定宽度布局</li>\n</ul>\n</li>\n</ul>\n<h2>语义化的 HTML5 标签</h2>\n<ul>\n<li>ie8不支持</li>\n</ul>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">style</span>&gt;<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">  <span class=\"pl-ent\">article</span>, <span class=\"pl-ent\">main</span>, <span class=\"pl-ent\">nav</span>, <span class=\"pl-ent\">aside</span>, <span class=\"pl-ent\">section</span>,</span>\n<span class=\"pl-s1\">  <span class=\"pl-ent\">header</span>, <span class=\"pl-ent\">footer</span>, <span class=\"pl-ent\">figure</span>, <span class=\"pl-ent\">figcaption</span> {</span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">block</span>;</span>\n<span class=\"pl-s1\">  }</span>\n<span class=\"pl-s1\"></span>&lt;/<span class=\"pl-ent\">style</span>&gt;\n\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span>[if lte IE 8]&gt;</span>\n<span class=\"pl-c\">  &lt;script src=\"html5shiv.js\"&gt;&lt;/script&gt;</span>\n<span class=\"pl-c\">&lt;![endif]<span class=\"pl-c\">--&gt;</span></span></pre></div>\n<h2>浏览器前缀</h2>\n<ul>\n<li>浏览器厂商为了实验新特性，在属性名前加前缀</li>\n<li>Chrome/Safari/Opera: <code>-webkit-</code></li>\n<li>Microsoft: <code>-ms-</code></li>\n<li>Mozilla: <code>-moz-</code></li>\n</ul>\n<h2>测试兼容性</h2>\n<ul>\n<li>虚拟机</li>\n<li><a href=\"https://www.browserstack.com/\" rel=\"nofollow\">BrowserStack</a></li>\n</ul>\n<h2>Polyfill</h2>\n<ul>\n<li>使用代码帮助浏览器实现它尚未支持的特性</li>\n<li>使用（未来）标准写法</li>\n<li>CSS Polyfills\n<ul>\n<li><a href=\"http://selectivizr.com/\" rel=\"nofollow\">selectivizr</a></li>\n<li><a href=\"http://css3pie.com/\" rel=\"nofollow\">CSS3 PIE</a></li>\n<li><a href=\"https://github.com/Schepp/box-sizing-polyfill\">box-sizing-polyfill</a></li>\n<li><a href=\"https://github.com/jonathantneal/flexibility\">flexibility</a></li>\n<li><a href=\"https://github.com/zoltan-dulac/cssSandpaper\">cssSandpaper</a></li>\n</ul>\n</li>\n</ul>"
  },
  {
    "id": 42,
    "title": "玩好 Terminal 终端",
    "labels": "开发者笔记",
    "created_at": "2018-09-10T14:08:19Z",
    "updated_at": "2019-10-08T09:04:57Z",
    "body_html": "<h2>导航栏</h2>\n<ul>\n<li><a href=\"#gitbash\">gitBash</a></li>\n<li><a href=\"#conemu\">conEmu</a></li>\n<li><a href=\"#cmd\">cmd</a></li>\n</ul>\n<h3>其他补充</h3>\n<ul>\n<li><a href=\"#vscode\">vscode</a></li>\n<li><a href=\"#myeclipse\">myeclipse</a></li>\n<li><a href=\"#chrome\">chrome</a></li>\n<li><a href=\"#vim\">vim</a></li>\n</ul>\n<h2>gitBash</h2>\n<ul>\n<li><code>cd</code> 切换路径\n<ul>\n<li><code>cd E:</code>切换盘符</li>\n<li><code>cd ~</code> 退回到系统根路径</li>\n<li><code>cd Desktop/</code> 进入桌面（注意：需要在根路径）</li>\n<li><code>cd Front\\ End</code> 切换文件夹</li>\n<li><code>cd ../..</code>或者<code>cd Front\\ End/smart/FE/</code> 执行多条命令（注意绝对路径和相对路径）</li>\n<li><code>快速导入路径的方法</code>=》直接将待编辑文件或文件夹拖入终端中即可</li>\n</ul>\n</li>\n<li><code>pwd</code>显示当前路径</li>\n<li><code>touch</code>创建文件</li>\n<li><code>mv a.html b.html</code>  a.html文件重命名为b.html</li>\n<li><code>rm</code> 移除文件\n<ul>\n<li><code>rm -r</code>删除文件夹（递归删除）</li>\n<li><code>rm -rf</code> 删除文件夹（强制删除）</li>\n</ul>\n</li>\n<li><code>rmdir</code>删除文件夹（只能删除空文件夹，不常用）</li>\n<li><code>ls</code> 列出当前根目录下的所有文件\n<ul>\n<li><code>ls -R</code> 举当前路径下的全部文件并展开所有子文件夹</li>\n</ul>\n</li>\n<li><code>cat README.md</code> 查看文件内容（一次性将内容全部显示）</li>\n<li><code>less README.md</code> 查看文件内容（显示部分信息） 空格键 滚动一页<br>\n回车键 滚动一行 Q退出命令 h显示帮助页面</li>\n<li><code>clear/ctrl+l</code> 清空命令窗口</li>\n<li><code>exit</code> 可以直接退出窗口</li>\n</ul>\n<h3>git相关</h3>\n<ul>\n<li><code>git init</code> 开始git项目管理</li>\n<li><code>git add &lt;file&gt;</code>      把文件添加到暂存区去</li>\n<li><code>git commit –m \"注释\"</code>    提交所有add过的文件 –m 后面的是注释</li>\n<li><code>git status</code> 查看仓库状态</li>\n<li><code>git diff  &lt;file&gt;</code>      查看同一个文件修改了那些内容</li>\n<li><code>git log</code> 查看历史记录</li>\n<li><code>git reflog</code>     查看历史记录的版本号id</li>\n<li><code>git reset --hard head^</code>HEAD表示当前版本，就是最新提交的版本，即使用git log打印出来的位于第一位的版本，上一个版本就是HEAD^，上上个版本就是HEAD^^，  还可以<code>git reset --hard cadab353589f </code></li>\n<li><code>git help</code>查看帮助命令</li>\n</ul>\n<h3>光标相关</h3>\n<ul>\n<li><code>ctrl + U/K</code> 删除光标左/右侧的所有内容</li>\n<li><code>ctrl + W</code>/<code>Alt + D</code> 删除光标左/右侧的单词</li>\n<li><code>Ctrl + A</code>移动光标到整条命令的起始位置</li>\n<li><code>Ctrl + E</code> 移动光标到整条命令的结束位置</li>\n<li><code>Alt + B</code>/<code>Alt + F </code> 根据单词向左/右移动光标</li>\n</ul>\n<h2>ConEmu</h2>\n<ul>\n<li><code>ctrl+N</code> 当前window窗口创建新的console面板</li>\n<li><code>ctrl+shift+N</code> 创建新的window窗口</li>\n<li><code>ctrl+shift+delete</code> 关闭当前选中的console窗口</li>\n<li><code>alt+2</code> 右侧分屏</li>\n<li><code>ctrl+f</code> 查找关键字</li>\n<li><code>ctrl+tab+左/右箭头</code> 切换标签栏(左右箭头辅助，可以不要)</li>\n<li><code>ctrl+R</code> 重命名活动窗口页</li>\n<li><code>pwd</code> git bash 显示当前所在路径</li>\n</ul>\n<h2>chrome</h2>\n<ul>\n<li><code>ctrl+p</code> 查找当前网站已加载的资源文件</li>\n<li><code>ctrl+shift+p</code> 显示所有命令</li>\n<li><code>ctrl+l</code> 清空console面板数据</li>\n<li><code>ctrl+R</code>/ <code>f5</code> 正常重新加载</li>\n<li><code>ctrl+shift+R</code>/<code>shift f5</code> 硬性重新加载</li>\n<li><code>ctrl+h</code>查看历史记录</li>\n</ul>\n<p>其他</p>\n<ul>\n<li>network面板，点亮左上角那个像是摄像机的图标（鼠标移上去会提示Capture screenshots），会打开新的一折叠面板，使用trl + R来启动截图调试。</li>\n</ul>\n<h2>vscode</h2>\n<ul>\n<li><code>ctrl+p</code> 查找工作区的所有文件</li>\n<li><code>ctrl+shift+p</code>显示所有命令</li>\n<li><code>ctrl+b</code>侧边栏显示/隐藏</li>\n<li><code>ctrl+tab</code>多个打开的文件切换</li>\n<li><code>ctrl+shift+m</code>预览markdown（自定义）</li>\n<li><code>ctrl+shift+[/]</code>折叠/打开代码块</li>\n<li><code>ctrl+Shift+F</code>整个文件夹中查找</li>\n<li><code>ctl+shift+n</code>新开编辑窗口</li>\n<li><code>ctrl+w</code>关闭编辑窗口</li>\n<li><code>ctrl+shift+w</code>关闭编辑器</li>\n<li><code>ctrl+\\</code>新建分栏</li>\n<li><code>ctrl+g</code>跳转到行数</li>\n</ul>\n<h3>命令行</h3>\n<ul>\n<li><code>code .</code>  # 用VSCode打开当前目录</li>\n<li><code>code xxx</code> # 用VSCode打开某个目录</li>\n</ul>\n<h3>光标相关</h3>\n<ul>\n<li><code>home/end</code>移动光标到行尾或行首</li>\n<li><code>shift+end/home</code>选择从光标至行尾或行首</li>\n<li><code>shift+alt+left/right</code>扩展/缩小选取范围：</li>\n<li><code>ctrl+delete</code>删除光标右侧的所有字</li>\n<li><code>ctrl+shift+l</code>同时选中所有匹配</li>\n<li><code>ctrl+u</code>回退到上一个光标操作位置</li>\n<li><code>ctrl+i</code>选中当前行</li>\n<li><code>ctrl+shift+左/右箭头</code>选中单个或者多个单词</li>\n</ul>\n<h2>myeclipse</h2>\n<h3>常用</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ctrl+shift+delel=te</code></td>\n<td>各大浏览器清除缓存</td>\n</tr>\n<tr>\n<td><code>ctrl+e</code></td>\n<td>快速转换编辑器,在多文件打开时</td>\n</tr>\n<tr>\n<td><code>ctrl+page down</code>/<code>ctrl+page up</code></td>\n<td>选项卡之间快速切换</td>\n</tr>\n<tr>\n<td><code>Ctrl+Shift+R</code></td>\n<td>输入字母查找文件</td>\n</tr>\n<tr>\n<td><code>Ctrl+F</code></td>\n<td>在一个文件中查找字符</td>\n</tr>\n<tr>\n<td><code>Ctrl+Shift+T</code></td>\n<td>搜索类</td>\n</tr>\n<tr>\n<td><code>Ctrl+O</code></td>\n<td>显示该类的所有变量和方法</td>\n</tr>\n<tr>\n<td><code>Ctrl+H</code></td>\n<td>可选择File Search 变为全局搜索</td>\n</tr>\n<tr>\n<td><code>shift+enter</code>/<code>ctrl+shift+enter</code></td>\n<td>在当前行上或者下边创建空白</td>\n</tr>\n<tr>\n<td><code>ctrl+d</code></td>\n<td>删除当前行</td>\n</tr>\n<tr>\n<td><code>ctrl+l</code></td>\n<td>跳转到第n行</td>\n</tr>\n</tbody>\n</table>\n<h3>其他</h3>\n<ul>\n<li><code>文件夹图标</code> Open in Explorer</li>\n<li>可设置当前文件与左侧目录树同步</li>\n<li>更改MyEclipse中的src目录的浏览方式</li>\n</ul>\n<h2>cmd</h2>\n<ul>\n<li><code>E:</code> 切换盘符</li>\n<li><code>cd Desktop</code>切换到桌面</li>\n<li><code>cd \"Front End\"</code>进入带空格的文件夹</li>\n<li><code>mkdir</code>创建文件夹（<code>md</code>）</li>\n<li><code>cd.&gt; demo.html</code> 创建空文件/(<code>type nul&gt;.babelrc</code>)</li>\n<li><code>cls</code> 清空命令窗口</li>\n<li><code>dir</code> 列出当前目录下的所有文件</li>\n<li><code>tree</code></li>\n<li><code>rd /S htdocs</code> 删除非空文件夹</li>\n<li><code>shutdown -s -t 3600</code> 一小时后关机</li>\n<li><code>help</code> 帮助</li>\n</ul>\n<h4>用命令行做的事情</h4>\n<ul>\n<li>关闭占用端口</li>\n</ul>\n<ol>\n<li>cmd命令行和git bash都可以，先查看<code>9009</code>端口占用情况，记住TCP连接的最后一列数字，这个是<code>PID</code>,例子为<code>6692</code>;</li>\n</ol>\n<div class=\"highlight highlight-source-batchfile\"><pre><span class=\"pl-k\">netstat</span> -aon<span class=\"pl-k\">|</span>findstr <span class=\"pl-c1\">9009</span></pre></div>\n<p>过滤情况如下：</p>\n<div class=\"highlight highlight-source-shell\"><pre>TCP   127.0.0.1:9009   0.0.0.0:0   LISTENING  6692</pre></div>\n<ol start=\"2\">\n<li>关闭进程,在任务管理器中，查找进程PID为<code>6692</code>，右键单击，选择<code>结束任务</code></li>\n</ol>\n<h2>vim</h2>\n<h3>模式</h3>\n<p>普通模式(Normal mode)</p>\n<p>在普通模式中，有很多方法可以进入插入模式。比较普通的方式是按a（append／追加）键或者i（insert／插入）键。</p>\n<p>插入模式(Insert mode)</p>\n<p>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。</p>\n<p>在插入模式中，可以按ESC键回到普通模式。</p>\n<p>命令行模式(Command line mode)</p>\n<p>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（:键），搜索（/和?键）或者过滤命令（!键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。</p>\n<h3>三种常用模式的切换</h3>\n<p>vim启动进入普通模式，处于插入模式或命令行模式时只需要按Esc或者Ctrl+[(这在vim课程环境中不管用)即可进入普通模式。普通模式中按i（插入）或a（附加）键都可以进入插入模式，普通模式中按:进入命令行模式。命令行模式中输入wq回车后保存并退出vim。</p>\n<p>命令行打开，用户环境变量path添加如下D:\\Alike\\vim\\vim74</p>\n<h3>常用命令</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:e E:\\</td>\n<td>切换目录到E盘</td>\n</tr>\n<tr>\n<td>i</td>\n<td>插入</td>\n</tr>\n<tr>\n<td>a</td>\n<td>插入</td>\n</tr>\n<tr>\n<td>:q</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>强制退出，不保存</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>保存文件并退出</td>\n</tr>\n<tr>\n<td>:wq!</td>\n<td>强制保存并退出</td>\n</tr>\n<tr>\n<td>:w &lt;文件路径&gt;</td>\n<td>另存为</td>\n</tr>\n<tr>\n<td>:savesa &lt;文件路径&gt;</td>\n<td>另存为</td>\n</tr>\n<tr>\n<td>vim 文件名/文件路径</td>\n<td>打开文件或文件夹</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>gg</td>\n<td>到第一行</td>\n</tr>\n<tr>\n<td>G</td>\n<td>到最后一行</td>\n</tr>\n<tr>\n<td>nG</td>\n<td>跳到第n行</td>\n</tr>\n<tr>\n<td>:u</td>\n<td>回退操作</td>\n</tr>\n<tr>\n<td>ctrl+r</td>\n<td>恢复上一步被撤销的操作</td>\n</tr>\n</tbody>\n</table>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://www.cnblogs.com/kmsfan/p/vim_beginner.html\" rel=\"nofollow\">https://www.cnblogs.com/kmsfan/p/vim_beginner.html</a></li>\n</ul>"
  },
  {
    "id": 41,
    "title": "信 望 爱",
    "labels": "观点与感想",
    "created_at": "2018-08-04T18:29:59Z",
    "updated_at": "2019-09-02T03:14:16Z",
    "body_html": "<p>从虹佑7月31得到的印证来看，上帝并不看好,这场会没有结果的一刻。我的内心一片支撑碎了，没有了力量，从人的角度来看，我不愿意顺服这个结果，我也不想尝试失去...</p>\n<p>在这样的时刻，我突然想要顺服上帝的带领，纵然自己内心有的抗拒。此刻忽然有了大的信心，虽然在现在来看霎时的结果是不好的，但忽然想到王和李两人的见证，又充满了对未来上帝旨意的向往，此刻我们尝到这样的结果来说对我们是好的，利大于弊。扪心自问，此刻的我实在是糟糕透了，是我配不上她。如果得到的是明确的印证又有何用呢?倒不如先苦后甜，用敬虔的生活操练自己，是否是真的渴想，而放弃逃离有点想的状态。若不合神的心意，将爱的心拿去，若合神的心意，然后再向上帝求。</p>\n<p>此刻的我们冲破了很多的自我的阻隔，因为第一次如此明确的将上帝在我们婚姻道路上的带领放在首位。如此的美好，不再是凭借着自己傻傻的做出愚蠢的行为，而是操练我们彼此，将目光定睛在神那里，若合神的心意，求主成全！对于是否能结果我此刻的信心变得异常的大，并充满了美好的盼望，我们的说话也从未有过的打开，当我们自我的里面注入了神的祝福与未来的掌控，此刻的平安让我一扫先前的自我中心，当顺服神的带领！</p>\n<p>2年相识，3年分别？主啊，愿合你的心意！也愿在这分开的时刻陶造我们彼此，求神成全，阿门！</p>"
  },
  {
    "id": 40,
    "title": "Css3动画",
    "labels": "开发者笔记",
    "created_at": "2018-06-27T06:19:24Z",
    "updated_at": "2019-09-02T03:21:59Z",
    "body_html": "<h2>transition</h2>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css-transitions-1/\" rel=\"nofollow\">官方文档</a></li>\n</ul>\n<p>过渡动画，定义css初始样式开始到结束时候中间过度时间段内的动画效果，可称之为补间动画。</p>\n<h3>状态</h3>\n<p>开始状态(动画放在这个状态里面)<br>\n结束状态(最终形态)</p>\n<h3>参数</h3>\n<ul>\n<li>transition-property: 规定对哪个属性进行过度,all为默认值</li>\n</ul>\n<p>可以指定要进行过渡的css属性,如果提供多个属性值,以逗号进行分隔:</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.style</span> {<span class=\"pl-c1\"><span class=\"pl-c1\">transition-property</span></span>: opacity, <span class=\"pl-c1\">left</span>, <span class=\"pl-c1\">top</span>, width;)</pre></div>\n<ul>\n<li>transition-duration 过渡执行时间</li>\n<li>transition-timing-function: 动画执行的速度:</li>\n</ul>\n<div class=\"highlight highlight-source-css\"><pre>  ease(逐渐变慢) 默认值\n  linear匀速\n  ease-in(加速)\n  ease-out(减速)\n  ease-in-out(先加速后减速\n  <span class=\"pl-ent\">cubic-bezier</span>贝塞尔曲线(x1,y1,x2,y2)</pre></div>\n<ul>\n<li>transition-delay 动画延时执行时间,默认为0</li>\n</ul>\n<div class=\"highlight highlight-source-css\"><pre>    <span class=\"pl-ent\">div</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition-property</span></span>: width;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition-duration</span></span>: <span class=\"pl-c1\">2<span class=\"pl-k\">s</span></span>;<span class=\"pl-c\"><span class=\"pl-c\">/*</span>过度时间2秒<span class=\"pl-c\">*/</span></span>\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition-timing-function</span></span>: <span class=\"pl-c1\">ease</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition-delay</span></span>: <span class=\"pl-c1\">2<span class=\"pl-k\">s</span></span>;<span class=\"pl-c\"><span class=\"pl-c\">/*</span>y延时2秒开始过度<span class=\"pl-c\">*/</span></span>\n    }</pre></div>\n<p>为了书写方便，也可以把这四个属性按照以上顺序简写在一个 transition 属性上：</p>\n<div class=\"highlight highlight-source-css\"><pre> <span class=\"pl-ent\">div</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition</span></span>: width <span class=\"pl-c1\">2<span class=\"pl-k\">s</span></span> <span class=\"pl-c1\">ease</span> <span class=\"pl-c1\">2<span class=\"pl-k\">s</span></span>;\n    }</pre></div>\n<p>如果使用属性的默认值，则可以省略:</p>\n<div class=\"highlight highlight-source-css\"><pre> <span class=\"pl-ent\">div</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition</span></span>: width <span class=\"pl-c1\">2<span class=\"pl-k\">s</span></span>;\n      <span class=\"pl-c\"><span class=\"pl-c\">/*</span>相当于<span class=\"pl-c\">*/</span></span>\n      <span class=\"pl-c\"><span class=\"pl-c\">/*</span>transition: width 2s ease 0<span class=\"pl-c\">*/</span></span>\n    }</pre></div>\n<p>使用transtion属性只是规定了要如何去过渡，要想让动画发生，还得要有元素状态的改变。如何改变元素状态呢，当然就是在css中给这个元素定义一个类（:hover等伪类也可以），这个类描述的是过渡动画结束时元素的状态。</p>\n<div class=\"highlight highlight-text-html-basic\"><pre> &lt;<span class=\"pl-ent\">div</span>&gt;xiaoyueyue&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-css\"><pre>    \n    <span class=\"pl-ent\">div</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">green</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">border-radius</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">center</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">color</span></span>: <span class=\"pl-c1\">#fff</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">font-weight</span></span>: <span class=\"pl-c1\">700</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition</span></span>: width <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>, height <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>, background-color <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>, opacity <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>;\n    }\n\n    <span class=\"pl-ent\">div</span><span class=\"pl-e\">:hover</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">center</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">red</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">opacity</span></span>: <span class=\"pl-c1\">0</span>;\n    }</pre></div>\n<p>还可以使用自定义类来实现</p>\n<div class=\"highlight highlight-source-css\"><pre> <span class=\"pl-ent\">div</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">green</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">border-radius</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">center</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">color</span></span>: <span class=\"pl-c1\">#fff</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">font-weight</span></span>: <span class=\"pl-c1\">700</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition</span></span>: width <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>, height <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>, background-color <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>, opacity <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>;\n    }\n\n    <span class=\"pl-ent\">div</span><span class=\"pl-e\">.on</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">center</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">red</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">opacity</span></span>: <span class=\"pl-c1\">0</span>;\n    }</pre></div>\n<div class=\"highlight highlight-source-js\"><pre> <span class=\"pl-k\">var</span> box <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>);\n\n    <span class=\"pl-smi\">box</span>.<span class=\"pl-en\">onmouseenter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> () {\n      <span class=\"pl-smi\">box</span>.<span class=\"pl-smi\">classList</span>.<span class=\"pl-c1\">add</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>on<span class=\"pl-pds\">'</span></span>);\n    }</pre></div>\n<h2>2D转换(transform)</h2>\n<h3>浏览器支持</h3>\n<p>Internet Explorer 10, Firefox, 和 Opera支持transform 属性.</p>\n<p>Chrome 和 Safari 要求前缀 -webkit- 版本.</p>\n<p>注意： Internet Explorer 9 要求前缀 -ms- 版本.</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>书写</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.位移</td>\n<td>translate(x,y)</td>\n<td>根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移，加单位：如px</td>\n</tr>\n<tr>\n<td>2.旋转</td>\n<td>rotate(30deg)</td>\n<td>(角度设置正值(顺时针),负值(逆时针))</td>\n</tr>\n<tr>\n<td>3.缩放</td>\n<td>scale(倍数)</td>\n<td>整数(大于1)放大  小数(小于1)缩小， scale（2,3）转变宽度为原来的大小的2倍，和其原始大小3倍的高度。</td>\n</tr>\n<tr>\n<td>4.倾斜</td>\n<td>skew(30deg,45deg)</td>\n<td>第一个值垂直方向倾斜,第二个方向代表水平倾斜</td>\n</tr>\n<tr>\n<td>5.旋转原点</td>\n<td>transform-origin:left top;(以左上角为旋转原点)</td>\n<td>改变旋转原点的位置应该一开始就改变 40px 50px;</td>\n</tr>\n</tbody>\n</table>\n<p>例子，直径为200的圆鼠标移入后向右移动100px同时颜色渐变为红色：</p>\n<div class=\"highlight highlight-source-css\"><pre> <span class=\"pl-ent\">div</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background-color</span></span>: <span class=\"pl-c1\">green</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">border-radius</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">center</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">color</span></span>: <span class=\"pl-c1\">#fff</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">font-weight</span></span>: <span class=\"pl-c1\">700</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transition</span></span>: background-color <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>, transform <span class=\"pl-c1\">3<span class=\"pl-k\">s</span></span>;\n    }\n\n    <span class=\"pl-e\">.on</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">transform</span></span>: <span class=\"pl-c1\">translate</span>(<span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>);\n      <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">red</span>;\n    }</pre></div>\n<h2>3D转换</h2>\n<h5>perspective:1000px;\t\t\t// 透视</h5>\n<p>取值为眼睛距离图片的距离   600-1000px 是人眼最舒服的距离</p>\n<p>设置有两种方式</p>\n<ol>\n<li>\n<p>给父元素设置</p>\n</li>\n<li>\n<p>作为transform的属性写进transform里面</p>\n</li>\n</ol>\n<p>transform-style:preserve-3d;\t\t\t// 显示出3D效果</p>\n<h3>3D 位移</h3>\n<ol>\n<li>translateX(30px)\t\t\t// 沿着x轴移动30px</li>\n<li>translateY(30px)\t\t\t// 沿着y轴移动30px</li>\n<li>translateZ(30px)\t\t\t// 沿着z轴移动30px</li>\n</ol>\n<h3>3D 旋转</h3>\n<ol>\n<li>transform-origin:top/bottom/center;  // 沿着哪里旋转</li>\n<li>transform:rotateX(10deg)\t\t\t// 沿着x轴旋转</li>\n<li>transform:rotateY(10deg) \t\t// 沿着y轴旋转</li>\n<li>transform:rotateZ(10deg)\t\t\t// 沿着z轴旋转</li>\n</ol>\n<h3>3D 缩放</h3>\n<ol>\n<li>transform-origin:top/bottom/center;  // 沿着哪里缩放</li>\n<li>scaleX(10deg)\t\t\t// 沿着x轴缩放</li>\n<li>rscaleY(10deg) \t\t// 沿着y轴缩放</li>\n<li>scaleZ(10deg)\t\t\t// 沿着z轴缩放</li>\n</ol>\n<h2>动画</h2>\n<p>当在 <a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/Keyframes/hovercard\" href=\"https://github.com/Keyframes\">@Keyframes</a> 创建动画，把它绑定到一个选择器，否则动画不会有任何效果。</p>\n<p>指定至少这两个CSS3的动画属性绑定向一个选择器：</p>\n<ul>\n<li>规定动画的名称</li>\n<li>规定动画的时长</li>\n</ul>\n<p>关键帧的时间单位</p>\n<p>数字：0%、25%、100%等</p>\n<p>字符：from(0%)、to(100%)</p>\n<p>例子：</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-k\">@keyframes</span> <span class=\"pl-v\">myfirst</span>\n{\n\t<span class=\"pl-e\">0%</span>   {<span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>:<span class=\"pl-c1\">red</span>; <span class=\"pl-c1\"><span class=\"pl-c1\">left</span></span>:<span class=\"pl-c1\">0<span class=\"pl-k\">px</span></span>; <span class=\"pl-c1\"><span class=\"pl-c1\">top</span></span>:<span class=\"pl-c1\">0<span class=\"pl-k\">px</span></span>;}\n\t<span class=\"pl-e\">25%</span>  {<span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>:<span class=\"pl-c1\">yellow</span>; <span class=\"pl-c1\"><span class=\"pl-c1\">left</span></span>:<span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>; <span class=\"pl-c1\"><span class=\"pl-c1\">top</span></span>:<span class=\"pl-c1\">0<span class=\"pl-k\">px</span></span>;}\n\t<span class=\"pl-e\">50%</span>  {<span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>:<span class=\"pl-c1\">blue</span>; <span class=\"pl-c1\"><span class=\"pl-c1\">left</span></span>:<span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>; <span class=\"pl-c1\"><span class=\"pl-c1\">top</span></span>:<span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;}\n\t<span class=\"pl-e\">75%</span>  {<span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>:<span class=\"pl-c1\">green</span>; <span class=\"pl-c1\"><span class=\"pl-c1\">left</span></span>:<span class=\"pl-c1\">0<span class=\"pl-k\">px</span></span>; <span class=\"pl-c1\"><span class=\"pl-c1\">top</span></span>:<span class=\"pl-c1\">200<span class=\"pl-k\">px</span></span>;}\n\t<span class=\"pl-e\">100%</span> {<span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>:<span class=\"pl-c1\">red</span>; <span class=\"pl-c1\"><span class=\"pl-c1\">left</span></span>:<span class=\"pl-c1\">0<span class=\"pl-k\">px</span></span>; <span class=\"pl-c1\"><span class=\"pl-c1\">top</span></span>:<span class=\"pl-c1\">0<span class=\"pl-k\">px</span></span>;}\n}\n<span class=\"pl-ent\">div</span> {\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>:<span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>:<span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>:<span class=\"pl-c1\">red</span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">position</span></span>:<span class=\"pl-c1\">relative</span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">animation-name</span></span>:myfirst;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">animation-duration</span></span>:<span class=\"pl-c1\">5<span class=\"pl-k\">s</span></span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">animation-timing-function</span></span>:<span class=\"pl-c1\">linear</span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">animation-delay</span></span>:<span class=\"pl-c1\">2<span class=\"pl-k\">s</span></span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">animation-iteration-count</span></span>:<span class=\"pl-c1\">infinite</span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">animation-direction</span></span>:<span class=\"pl-c1\">alternate</span>;\n\t<span class=\"pl-c1\"><span class=\"pl-c1\">animation-play-state</span></span>:<span class=\"pl-c1\">running</span>;\n}</pre></div>\n<p>像前面讲的transition属性一样，也可以把这些animation属性简写到一个animation中，使用默认值的也可以省略掉。但 animation-play-state 属性不能简写到animation中</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">div</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">animation</span></span>:myfirst <span class=\"pl-c1\">5<span class=\"pl-k\">s</span></span>;\n}</pre></div>\n<h3>参数</h3>\n<table>\n<thead>\n<tr>\n<th>含义</th>\n<th>属性名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>动画名称</td>\n<td>animation-name</td>\n</tr>\n<tr>\n<td>持续的时间</td>\n<td>animation-duration</td>\n</tr>\n<tr>\n<td>执行次数</td>\n<td>animation-iteration-count(默认为1次,infinite 一直执行)</td>\n</tr>\n<tr>\n<td>延时执行的时间</td>\n<td>animation-delay:2s</td>\n</tr>\n<tr>\n<td>执行的速度</td>\n<td>animation-timing-function:inear 匀速 ease 缓冲 ease-in 由慢到快 ease-out 由快到慢 ease-in-out 由慢到快再到慢。cubic-bezier(number,number,number,number)：特定的贝塞尔曲线类型，4个数值需在[0, 1]区间内</td>\n</tr>\n<tr>\n<td>动画逆波</td>\n<td>animation-direction:alternat动画时间之外的状态</td>\n</tr>\n<tr>\n<td>动画时间之外的问题</td>\n<td>animation-fill-mode:forwords 停止到动画结束的状态 / backwords (默认)</td>\n</tr>\n<tr>\n<td>动画的播放状态</td>\n<td>animation-play-state:（ running 播放 和paused 暂停 ）</td>\n</tr>\n<tr>\n<td>播放前重置,动画是否重置后再开始播放</td>\n<td>animation-direction alternate动画直接从上一次停止的位置开始执行  normal动画第二次直接跳到0%的状态开始执行</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意，为了达到最佳的浏览器兼容效果，在实际书写代码的时候，还必须加上各大浏览器的私有前缀</p>\n</blockquote>\n<h3>动画执行完成后触发的事件</h3>\n<p>当CSS 3的transition动画执行结束时，触发webkitTransitionEnd事件,使用：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">dom</span>.<span class=\"pl-c1\">addEventListener</span>(‘webkitTransitionEnd’,<span class=\"pl-k\">function</span>(){}) </pre></div>\n<h2>animation.css使用</h2>\n<p>添加cdn引用</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>  &lt;<span class=\"pl-ent\">link</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.bootcss.com/animate.css/3.5.2/animate.css<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">rel</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stylesheet<span class=\"pl-pds\">\"</span></span>&gt;</pre></div>\n<p>然后你想要哪个元素进行动画，就给那个元素添加上animated类 以及特定的动画类名，<code>animated</code>是每个要进行动画的元素都必须要添加的类。</p>\n<p>给上面的样式添加一个摇动的动画,因为摇动的动画类名为<code>shake</code>，所以代码是这样的：</p>\n<div class=\"highlight highlight-source-js\"><pre> <span class=\"pl-k\">var</span> box <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>);\n\n <span class=\"pl-smi\">box</span>.<span class=\"pl-en\">onmouseenter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> () {\n  <span class=\"pl-smi\">box</span>.<span class=\"pl-smi\">classList</span>.<span class=\"pl-c1\">add</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>animated<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>shake<span class=\"pl-pds\">'</span></span>);\n}</pre></div>\n<p>至于动画的效果有差异可自定义样式进行覆盖</p>\n<p><strong>animation.css提供动画的可用class类名</strong></p>\n<table>\n<thead>\n<tr>\n<th>Class Name</th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bounce</code></td>\n<td><code>flash</code></td>\n<td><code>pulse</code></td>\n<td><code>rubberBand</code></td>\n</tr>\n<tr>\n<td><code>shake</code></td>\n<td><code>headShake</code></td>\n<td><code>swing</code></td>\n<td><code>tada</code></td>\n</tr>\n<tr>\n<td><code>wobble</code></td>\n<td><code>jello</code></td>\n<td><code>bounceIn</code></td>\n<td><code>bounceInDown</code></td>\n</tr>\n<tr>\n<td><code>bounceInLeft</code></td>\n<td><code>bounceInRight</code></td>\n<td><code>bounceInUp</code></td>\n<td><code>bounceOut</code></td>\n</tr>\n<tr>\n<td><code>bounceOutDown</code></td>\n<td><code>bounceOutLeft</code></td>\n<td><code>bounceOutRight</code></td>\n<td><code>bounceOutUp</code></td>\n</tr>\n<tr>\n<td><code>fadeIn</code></td>\n<td><code>fadeInDown</code></td>\n<td><code>fadeInDownBig</code></td>\n<td><code>fadeInLeft</code></td>\n</tr>\n<tr>\n<td><code>fadeInLeftBig</code></td>\n<td><code>fadeInRight</code></td>\n<td><code>fadeInRightBig</code></td>\n<td><code>fadeInUp</code></td>\n</tr>\n<tr>\n<td><code>fadeInUpBig</code></td>\n<td><code>fadeOut</code></td>\n<td><code>fadeOutDown</code></td>\n<td><code>fadeOutDownBig</code></td>\n</tr>\n<tr>\n<td><code>fadeOutLeft</code></td>\n<td><code>fadeOutLeftBig</code></td>\n<td><code>fadeOutRight</code></td>\n<td><code>fadeOutRightBig</code></td>\n</tr>\n<tr>\n<td><code>fadeOutUp</code></td>\n<td><code>fadeOutUpBig</code></td>\n<td><code>flipInX</code></td>\n<td><code>flipInY</code></td>\n</tr>\n<tr>\n<td><code>flipOutX</code></td>\n<td><code>flipOutY</code></td>\n<td><code>lightSpeedIn</code></td>\n<td><code>lightSpeedOut</code></td>\n</tr>\n<tr>\n<td><code>rotateIn</code></td>\n<td><code>rotateInDownLeft</code></td>\n<td><code>rotateInDownRight</code></td>\n<td><code>rotateInUpLeft</code></td>\n</tr>\n<tr>\n<td><code>rotateInUpRight</code></td>\n<td><code>rotateOut</code></td>\n<td><code>rotateOutDownLeft</code></td>\n<td><code>rotateOutDownRight</code></td>\n</tr>\n<tr>\n<td><code>rotateOutUpLeft</code></td>\n<td><code>rotateOutUpRight</code></td>\n<td><code>hinge</code></td>\n<td><code>jackInTheBox</code></td>\n</tr>\n<tr>\n<td><code>rollIn</code></td>\n<td><code>rollOut</code></td>\n<td><code>zoomIn</code></td>\n<td><code>zoomInDown</code></td>\n</tr>\n<tr>\n<td><code>zoomInLeft</code></td>\n<td><code>zoomInRight</code></td>\n<td><code>zoomInUp</code></td>\n<td><code>zoomOut</code></td>\n</tr>\n<tr>\n<td><code>zoomOutDown</code></td>\n<td><code>zoomOutLeft</code></td>\n<td><code>zoomOutRight</code></td>\n<td><code>zoomOutUp</code></td>\n</tr>\n<tr>\n<td><code>slideInDown</code></td>\n<td><code>slideInLeft</code></td>\n<td><code>slideInRight</code></td>\n<td><code>slideInUp</code></td>\n</tr>\n<tr>\n<td><code>slideOutDown</code></td>\n<td><code>slideOutLeft</code></td>\n<td><code>slideOutRight</code></td>\n<td><code>slideOutUp</code></td>\n</tr>\n</tbody>\n</table>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://www.cnblogs.com/2050/p/3409129.html\" rel=\"nofollow\">https://www.cnblogs.com/2050/p/3409129.html</a></li>\n<li><a href=\"http://www.runoob.com/css3/css3-animations.html\" rel=\"nofollow\">http://www.runoob.com/css3/css3-animations.html</a></li>\n</ul>"
  },
  {
    "id": 39,
    "title": "rem适配移动设备",
    "labels": "开发者笔记",
    "created_at": "2018-06-26T09:00:44Z",
    "updated_at": "2019-09-25T09:30:30Z",
    "body_html": "<h2>前言</h2>\n<p>移动端 rem 适配方案回顾总结</p>\n<h2>如何使用 rem</h2>\n<p><code>rem</code> 单位的计算参考 html 的根节点 <code>font-size</code>进行计算，根节点的字体变化，布局参考的 rem 页面也会相应进行缩放，此为 rem 布局的本质。</p>\n<h3>1. 动态改变 html 的 font-size 值</h3>\n<p>几乎在每个浏览器中我们都将 <code>html</code> 的 <code>font-size</code> 初始化 为 <strong>16px</strong> ， 我们动态改变的话可以暂时将 <code>16px</code> 设置为 rem 适配的根节点 <code>font-size</code> 初始值。</p>\n<p>那么如何进行适配动态修改？</p>\n<p>假设设计稿宽度 为 750px，我们定义了自己使用 1rem = 16px 的单位去布局，如何适配呢？</p>\n<p>在 chrome 的 手机 iphone 模拟器宽度为 <code>375px</code>，正好为设计稿的 一半，我们可以口算: 当时的 1rem 应该等于初始化时 html 节点 <code>font-size</code> 的一半,即 <code>newFontSize = 16/2 = 8px</code>,这样一半对一半不就适配了吗...</p>\n<p>从中得到公式 <code>设计稿宽度/16px = 需要适配的设备宽度/8px</code>,能够看出 新的 <code>font-size</code> 是参考 当前的设备宽度与原设计稿的宽度，进行等比缩放的</p>\n<p>最终得到 <code>newFontSize = 16px * 需要适配的设备宽度 / 原设计稿宽度</code></p>\n<div class=\"highlight highlight-source-js\"><pre>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">doc</span>, <span class=\"pl-smi\">win</span>) {\n  <span class=\"pl-k\">var</span> resizeEvt <span class=\"pl-k\">=</span>\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>orientationchange<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">window</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>orientationchange<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resize<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-en\">setRemResponse</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-k\">var</span> vM <span class=\"pl-k\">=</span> <span class=\"pl-c1\">750</span>;\n      <span class=\"pl-k\">var</span> vfontSize <span class=\"pl-k\">=</span> <span class=\"pl-c1\">16</span>;\n      <span class=\"pl-k\">var</span> html <span class=\"pl-k\">=</span> <span class=\"pl-smi\">doc</span>.<span class=\"pl-c1\">documentElement</span>;\n      <span class=\"pl-k\">var</span> newfontSize <span class=\"pl-k\">=</span> (vfontSize <span class=\"pl-k\">*</span> <span class=\"pl-smi\">html</span>.<span class=\"pl-smi\">clientWidth</span>) <span class=\"pl-k\">/</span> vM;\n      <span class=\"pl-smi\">html</span>.<span class=\"pl-c1\">style</span>.<span class=\"pl-c1\">fontSize</span> <span class=\"pl-k\">=</span> newfontSize <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>px<span class=\"pl-pds\">\"</span></span>;\n    };\n  <span class=\"pl-smi\">doc</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DOMContentLoaded<span class=\"pl-pds\">\"</span></span>, setRemResponse, <span class=\"pl-c1\">false</span>);\n  <span class=\"pl-smi\">win</span>.<span class=\"pl-c1\">addEventListener</span>(resizeEvt, setRemResponse, <span class=\"pl-c1\">false</span>);\n})(<span class=\"pl-c1\">document</span>, <span class=\"pl-c1\">window</span>);</pre></div>\n<h3>2. 实际使用</h3>\n<p>将测量得出的<code>btn</code> 按钮的样式从 <code>px</code>转换 为 <code>rem</code></p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.btn</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">699<span class=\"pl-k\">px</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 699/16 =&gt; 43.6875rem; <span class=\"pl-c\">*/</span></span>\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">90<span class=\"pl-k\">px</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 90/16px =&gt; 5.625rem;  <span class=\"pl-c\">*/</span></span>\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">rgba</span>(<span class=\"pl-c1\">90</span>, <span class=\"pl-c1\">173</span>, <span class=\"pl-c1\">246</span>, <span class=\"pl-c1\">1</span>);\n  <span class=\"pl-c1\"><span class=\"pl-c1\">border-radius</span></span>: <span class=\"pl-c1\">6<span class=\"pl-k\">px</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 6/16=&gt; 0.375rem; <span class=\"pl-c\">*/</span></span>\n}</pre></div>\n<p>自己计算太繁琐，使用 scss 定义 函数代替计算过程</p>\n<div class=\"highlight highlight-source-css-scss\"><pre><span class=\"pl-k\">@function</span> <span class=\"pl-c1\">pxToRem</span>(<span class=\"pl-v\">$initialStyle</span>) {\n  <span class=\"pl-k\">@return</span> <span class=\"pl-v\">$initialStyle</span><span class=\"pl-c1\">/</span><span class=\"pl-c1\">16</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1<span class=\"pl-k\">rem</span></span>;\n}</pre></div>\n<p>那么上面的 <code>css</code>改写为:</p>\n<div class=\"highlight highlight-source-css-scss\"><pre><span class=\"pl-e\">.btn</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">pxToRem</span>(<span class=\"pl-c1\">699</span>);\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>:<span class=\"pl-c1\">pxToRem</span>(<span class=\"pl-c1\">90</span>);\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">rgba</span>(<span class=\"pl-c1\">90</span>, <span class=\"pl-c1\">173</span>, <span class=\"pl-c1\">246</span>, <span class=\"pl-c1\">1</span>);\n  <span class=\"pl-c1\"><span class=\"pl-c1\">border-radius</span></span>:<span class=\"pl-c1\">pxToRem</span>(<span class=\"pl-c1\">6</span>);\n}</pre></div>\n<blockquote>\n<p>补充： vscode 的插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=cipchk.cssrem\" rel=\"nofollow\">cssrem</a> 支持计算 将我们在 css,scss 中输入的 px 转换为 rem 单位，默认设置的 font-size 为 <strong>16px</strong></p>\n</blockquote>\n<h2>计算方法变形，口算 rem</h2>\n<h3>1. 简单分析</h3>\n<p>分析上一节我们最终得到 <code>newFontSize = 16px * 需要适配的设备宽度 / 原设计稿宽度</code></p>\n<p>每次计算要除以 100 很是繁琐，我们若将 初始的 html 根节点 <code>font-size</code>变为方便计算的，反正它最终做为一个除数，变为多少呢? 是否 <strong>100</strong> 更为方便呢？对了！</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">oHtml</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">documentElement</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">clientWidth</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">oHtml</span>.<span class=\"pl-smi\">clientWidth</span>;\n<span class=\"pl-k\">var</span> vM <span class=\"pl-k\">=</span> <span class=\"pl-c1\">750</span>;\n<span class=\"pl-k\">var</span> vfontSize <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>;\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 移动设备</span>\n<span class=\"pl-smi\">oHtml</span>.<span class=\"pl-c1\">style</span>.<span class=\"pl-c1\">fontSize</span> <span class=\"pl-k\">=</span> (vfontSize <span class=\"pl-k\">*</span> clientWidth) <span class=\"pl-k\">/</span> vM <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>px<span class=\"pl-pds\">\"</span></span>;</pre></div>\n<h3>2. 实际使用</h3>\n<p>还是上面熟悉的那个 <code>btn</code>, 将<code>px</code>转换 为 <code>rem</code>, 口算得出结果。</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.btn</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">699<span class=\"pl-k\">px</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 699/100 =&gt; 6.99rem; <span class=\"pl-c\">*/</span></span>\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">90<span class=\"pl-k\">px</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 90/100 =&gt; 0.9rem;  <span class=\"pl-c\">*/</span></span>\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">rgba</span>(<span class=\"pl-c1\">90</span>, <span class=\"pl-c1\">173</span>, <span class=\"pl-c1\">246</span>, <span class=\"pl-c1\">1</span>);\n  <span class=\"pl-c1\"><span class=\"pl-c1\">border-radius</span></span>: <span class=\"pl-c1\">6<span class=\"pl-k\">px</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 6/100=&gt; 0.06rem; <span class=\"pl-c\">*/</span></span>\n}</pre></div>\n<p>不得不说，有了 scss 是真的方便！</p>\n<div class=\"highlight highlight-source-css-scss\"><pre><span class=\"pl-k\">@function</span> <span class=\"pl-c1\">reduced100</span>(<span class=\"pl-v\">$initialStyle</span>) {\n  <span class=\"pl-k\">@return</span> <span class=\"pl-v\">$initialStyle</span><span class=\"pl-c1\">/</span><span class=\"pl-c1\">100</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1<span class=\"pl-k\">rem</span></span>;\n}</pre></div>\n<p>那么上面的 <code>css</code>函数方法改写为:</p>\n<div class=\"highlight highlight-source-css-scss\"><pre><span class=\"pl-e\">.btn</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">reduced100</span>(<span class=\"pl-c1\">699</span>);\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>:<span class=\"pl-c1\">reduced100</span>(<span class=\"pl-c1\">90</span>);\n  <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">rgba</span>(<span class=\"pl-c1\">90</span>, <span class=\"pl-c1\">173</span>, <span class=\"pl-c1\">246</span>, <span class=\"pl-c1\">1</span>);\n  <span class=\"pl-c1\"><span class=\"pl-c1\">border-radius</span></span>:<span class=\"pl-c1\">reduced100</span>(<span class=\"pl-c1\">6</span>);\n}</pre></div>\n<p>怎么样，<code>rem</code> 原来就是这么简单！！！</p>\n<h2>工具函数</h2>\n<p>上面的方法，二选其一就可以了，毕竟现在 <code>javascript</code> 的 执行效率不差！</p>\n<div class=\"highlight highlight-source-js\"><pre>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">doc</span>, <span class=\"pl-smi\">win</span>) {\n  <span class=\"pl-k\">var</span> resizeEvt <span class=\"pl-k\">=</span>\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>orientationchange<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">window</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>orientationchange<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resize<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-en\">setRemResponse</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-k\">var</span> vM <span class=\"pl-k\">=</span> <span class=\"pl-c1\">750</span>;\n      <span class=\"pl-k\">var</span> vfontSize <span class=\"pl-k\">=</span> <span class=\"pl-c1\">16</span>;\n      <span class=\"pl-k\">var</span> html <span class=\"pl-k\">=</span> <span class=\"pl-smi\">doc</span>.<span class=\"pl-c1\">documentElement</span>;\n      <span class=\"pl-k\">var</span> newfontSize <span class=\"pl-k\">=</span> (vfontSize <span class=\"pl-k\">*</span> <span class=\"pl-smi\">html</span>.<span class=\"pl-smi\">clientWidth</span>) <span class=\"pl-k\">/</span> vM;\n      <span class=\"pl-smi\">html</span>.<span class=\"pl-c1\">style</span>.<span class=\"pl-c1\">fontSize</span> <span class=\"pl-k\">=</span> newfontSize <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>px<span class=\"pl-pds\">\"</span></span>;\n    };\n  <span class=\"pl-smi\">doc</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DOMContentLoaded<span class=\"pl-pds\">\"</span></span>, setRemResponse, <span class=\"pl-c1\">false</span>);\n  <span class=\"pl-smi\">win</span>.<span class=\"pl-c1\">addEventListener</span>(resizeEvt, setRemResponse, <span class=\"pl-c1\">false</span>);\n})(<span class=\"pl-c1\">document</span>, <span class=\"pl-c1\">window</span>);</pre></div>"
  },
  {
    "id": 38,
    "title": "Css预处理器之-Sass",
    "labels": "开发者笔记",
    "created_at": "2018-06-21T12:15:25Z",
    "updated_at": "2019-09-02T03:21:59Z",
    "body_html": "<h2>前言</h2>\n<p>css预处理语言我选择用sass，此篇记录sass的安装与用法。</p>\n<p>sass预处理语言  本来是有xxx.sass(语法是通过缩进) 现在大家都用xxx.scss(通过大括号)</p>\n<p>前往:     <a href=\"https://www.sass.hk/guide/\" rel=\"nofollow\">sass中文网</a><br>\ngithub：<a href=\"https://github.com/sass/sass\">sass</a></p>\n<h2>编译Sass</h2>\n<p>sass编译有很多种方式，如命令行编译模式、编译软件koala、Grunt打造前端自动化工作流grunt-sass、Gulp打造前端自动化工作流gulp-ruby-sass，以及webpack的<a href=\"https://github.com/webpack-contrib/sass-loader\">sass-loader</a>。</p>\n<h3>命令行编译</h3>\n<p>安装Ruby环境，Sass和Compass后的工作流:</p>\n<div class=\"highlight highlight-source-shell\"><pre>//单文件转换命令\nsass input.scss output.css\n\n//单文件监听命令\nsass --watch input.scss:output.css\n\n//如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：\nsass --watch app/sass:public/stylesheets</pre></div>\n<h3>软件方式-Koala</h3>\n<p>koala是一个前端预处理器语言图形编译工具，支持Less、Sass、Compass、CoffeeScript，帮助web开发者更高效地使用它们进行开发。跨平台运行，完美兼容windows、linux、mac。</p>\n<p>免费可用：<a href=\"https://www.sass.hk/install/\" rel=\"nofollow\">下载地址</a></p>\n<h3>vscode插件 easysass</h3>\n<p>需要安装好Ruby环境,装好后在ruby的命令行输入 <code>gem install sass</code> 来安装 Sass，安装完成后启动 VSCode，在拓展商店里搜索“easy sass”，并安装，安装成功后重启 VSCode。</p>\n<div class=\"highlight highlight-source-json\"><pre>/** Easy Sass 插件 **/\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>easysass.formats<span class=\"pl-pds\">\"</span></span>: [\n        {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>format<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>compressed<span class=\"pl-pds\">\"</span></span>,  <span class=\"pl-ii\">//</span>  <span class=\"pl-ii\">压缩(编译格式)</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>extension<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.css<span class=\"pl-pds\">\"</span></span>\n        }\n    ],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>easysass.targetDir<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./<span class=\"pl-pds\">\"</span></span>  // 自定义css输出文件路径</pre></div>\n<h3>编译格式</h3>\n<p>四种编译排版演示;</p>\n<div class=\"highlight highlight-source-css\"><pre>//未编译样式\n<span class=\"pl-e\">.box</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">300<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">400<span class=\"pl-k\">px</span></span>;\n  &amp;<span class=\"pl-c1\">-title</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>;\n  }\n}</pre></div>\n<p>nested 编译排版格式(嵌套)</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/*</span>命令行内容<span class=\"pl-c\">*/</span></span>\nsass <span class=\"pl-ent\">style</span><span class=\"pl-e\">.scss</span>:style<span class=\"pl-e\">.css</span> --style nested\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span>编译过后样式<span class=\"pl-c\">*/</span></span>\n<span class=\"pl-e\">.box</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">300<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">400<span class=\"pl-k\">px</span></span>; }\n  <span class=\"pl-e\">.box-title</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>; }</pre></div>\n<p>expanded 编译排版格式(扩展)</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/*</span>命令行内容<span class=\"pl-c\">*/</span></span>\nsass <span class=\"pl-ent\">style</span><span class=\"pl-e\">.scss</span>:style<span class=\"pl-e\">.css</span> --style expanded\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span>编译过后样式<span class=\"pl-c\">*/</span></span>\n<span class=\"pl-e\">.box</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">300<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">400<span class=\"pl-k\">px</span></span>;\n}\n<span class=\"pl-e\">.box-title</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>;\n}</pre></div>\n<p>compact 编译排版格式(紧凑格式)</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/*</span>命令行内容<span class=\"pl-c\">*/</span></span>\nsass <span class=\"pl-ent\">style</span><span class=\"pl-e\">.scss</span>:style<span class=\"pl-e\">.css</span> --style compact\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span>编译过后样式<span class=\"pl-c\">*/</span></span>\n<span class=\"pl-e\">.box</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">300<span class=\"pl-k\">px</span></span>; <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">400<span class=\"pl-k\">px</span></span>; }\n<span class=\"pl-e\">.box-title</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>; <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>; }</pre></div>\n<p>compressed 编译排版格式(压缩格式)</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/*</span>命令行内容<span class=\"pl-c\">*/</span></span>\nsass <span class=\"pl-ent\">style</span><span class=\"pl-e\">.scss</span>:style<span class=\"pl-e\">.css</span> --style compressed\n\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span>编译过后样式<span class=\"pl-c\">*/</span></span>\n<span class=\"pl-e\">.box</span>{<span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>:<span class=\"pl-c1\">300<span class=\"pl-k\">px</span></span>;<span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>:<span class=\"pl-c1\">400<span class=\"pl-k\">px</span></span>}<span class=\"pl-e\">.box-title</span>{<span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>:<span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>;<span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>:<span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>}</pre></div>\n<h2>基本语法</h2>\n<h3>1.插入文件</h3>\n<p><a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/import/hovercard\" href=\"https://github.com/import\">@import</a>命令，用来插入外部文件。</p>\n<pre><code>　@import \"path/filename.scss\";\n</code></pre>\n<p>如果插入的是.css文件，则等同于css的import命令。</p>\n<pre><code>　@import \"foo.css\";\n</code></pre>\n<h3>2.变量</h3>\n<p>SASS允许使用变量，所有变量以$开头。</p>\n<pre><code>$blue : #1875e7;　\n\n　　div {\n　　　color : $blue;\n　　}\n</code></pre>\n<p>如果变量需要镶嵌在字符串之中，就必须需要写在<code>#{}</code>之中。</p>\n<pre><code>$side : left;\n\n　　.rounded {\n　　　　border-#{$side}-radius: 5px;\n　　}\n</code></pre>\n<h3>3.计算功能</h3>\n<p>SASS允许在代码中使用算式：</p>\n<pre><code>body {\n　　　　margin: (14px/2);\n　　　　top: 50px + 100px;\n　　　　right: $var * 10%;\n　　}\n</code></pre>\n<h3>4.嵌套</h3>\n<p>SASS允许选择器嵌套。比如，下面的CSS代码：</p>\n<pre><code>　// #content article h1 { color: #333 }\n    // #content article p { margin-bottom: 4px }\n    // #content aside { background-color: #EEE }\n</code></pre>\n<p>可以写成：</p>\n<pre><code>　　 #content {\n      article {\n        h1 {\n          color:#333;\n        }\n        p {\n          margin-bottom: 4px;\n        }\n      }\n      aside{\n        background-color: #eee;\n      }\n    }\n</code></pre>\n<p>1.属性也可以嵌套，比如border-color属性，可以写成：</p>\n<pre><code>p {\n　    border: {\n　           color: red;\n　      　　　}\n　      　}\n</code></pre>\n<blockquote>\n<p>注意，border后面必须加上冒号。</p>\n</blockquote>\n<p>2.父选择器的标识符，可以使用&amp;引用父元素。比如a:hover伪类，可以写成：</p>\n<pre><code> 　a {\n　      　　　&amp;:hover { color: #ffb3ff; }\n　      　}\n</code></pre>\n<p>　<br>\n3.子组合选择器 &gt;(直接子元素选择器)</p>\n<pre><code>  // article &gt; section { border: 1px solid #ccc }\n         article{\n           &gt; section{\n             border:1px solid #ccc;\n           }\n         }\n</code></pre>\n<p>4.群组选择器的嵌套</p>\n<pre><code>    // .container h1, .container h2, .container h3 { margin-bottom: 8px }\n          .container{\n            h1,h2,h3{\n              margin-bottom:8px;\n            }\n          }\n</code></pre>\n<h3>5.注释</h3>\n<p>SASS共有两种注释风格。</p>\n<p>标准的CSS注释 /* comment */ ，会保留到编译后的文件。</p>\n<p>单行注释 // comment，只保留在SASS源文件中，编译后被省略。(静默注释)</p>\n<p>在/*后面加一个感叹号，表示这是\"重要注释\"。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。</p>\n<pre><code>　/*! \n　　　　重要注释！ \n　　*/\n</code></pre>\n<h2>二.代码的重用</h2>\n<h3>1.继承</h3>\n<p>SASS允许一个选择器，继承另一个选择器。比如，现有class1：</p>\n<pre><code>　.class1 {\n　　　　border: 1px solid #ddd;\n　　}\n</code></pre>\n<p>class2要继承class1，就要使用<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/extend/hovercard\" href=\"https://github.com/extend\">@extend</a>命令：</p>\n<pre><code>　　.class2 {\n　　　　@extend .class1;\n　　　　font-size:120%; \n　　}\n</code></pre>\n<h3>2.Mixin</h3>\n<p>Mixin有点像C语言的宏（macro），是可以重用的代码块。</p>\n<p>使用<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/mixin/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mixin\">@mixin</a>命令，定义一个代码块。</p>\n<div class=\"highlight highlight-source-css\"><pre>　　<span class=\"pl-k\">@mixin</span> left {\n　　　　float: left;\n　　　　<span class=\"pl-ent\">margin-left</span>: 10px;\n　　}\n</pre></div>\n<p>使用<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/include/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/include\">@include</a>命令，调用这个mixin。</p>\n<pre><code>div {\n　　　　@include left;\n　　}\n\n</code></pre>\n<p>mixin的强大之处，在于可以指定参数和缺省值。</p>\n<pre><code>　@mixin left($value: 10px) {\n　　　　float: left;\n　　　　margin-right: $value;\n　　}\n</code></pre>\n<p>使用的时候，根据需要加入参数：</p>\n<pre><code>　div {\n　　　　@include left(20px);\n　　}\n\n</code></pre>\n<p>　<br>\n下面是一个mixin的实例，用来生成浏览器前缀.(设置了默认参数,可以更改)</p>\n<pre><code>　　@mixin rounded($vert, $horz, $radius: 10px) {\n　　　　border-#{$vert}-#{$horz}-radius: $radius;\n　　　　-moz-border-radius-#{$vert}#{$horz}: $radius;\n　　　　-webkit-border-#{$vert}-#{$horz}-radius: $radius;\n　　}\n\n</code></pre>\n<p>使用的时候，可以像下面这样调用：</p>\n<pre><code>　　#navbar li { @include rounded(top, left); }\n\n　　#footer { @include rounded(top, left, 5px); }\n</code></pre>\n<h3>3.颜色函数</h3>\n<p>SASS提供了一些内置的颜色函数，以便生成系列颜色。</p>\n<pre><code>　　lighten(#cc3, 10%) // #d6d65c\n　　darken(#cc3, 10%) // #a3a329\n　　grayscale(#cc3) // #808080\n　　complement(#cc3) // #33c\n</code></pre>\n<h2>三.高级用法</h2>\n<h3>1.条件语句</h3>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/if/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/if\">@if</a>可以用来判断：</p>\n<pre><code>　p {\n　　　　@if 1 + 1 == 2 { border: 1px solid; }\n　　　　@if 5 &lt; 3 { border: 2px dotted; }\n　　}\n</code></pre>\n<p>配套的还有<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/else/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/else\">@else</a>命令：</p>\n<pre><code>　@if lightness($color) &gt; 30% {\n　　　　background-color: #000;\n　　} @else {\n　　　　background-color: #fff;\n　　}\n</code></pre>\n<h3>2.循环语句</h3>\n<p>SASS支持for循环：</p>\n<pre><code>　@for $i from 1 to 10 {\n　　　　.border-#{$i} {\n　　　　　　border: #{$i}px solid blue;\n　　　　} \n　　}\n</code></pre>\n<p>也支持while循环：</p>\n<pre><code>　$i: 6;\n\n　　@while $i &gt; 0 {\n　　　　.item-#{$i} { width: 2em * $i; }\n　　　　$i: $i - 2;\n　　}\n</code></pre>\n<p>each命令，作用与for类似：</p>\n<pre><code>　@each $member in a, b, c, d {\n　　　　.#{$member} {\n　　　　　　background-image: url(\"/image/#{$member}.jpg\");\n　　　　} \n　　}\n</code></pre>\n<h3>3.自定义函数</h3>\n<p>SASS允许用户编写自己的函数。</p>\n<pre><code>@function double($n) {\n　　　　@return $n * 2;\n　　}\n\n　　#sidebar {\n　　　　width: double(5px);\n　　}\n</code></pre>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://www.sass.hk/install/\" rel=\"nofollow\">https://www.sass.hk/install/</a></li>\n<li><a href=\"http://hyuhan.com/2016/09/07/compares-less-sass-and-stylus/\" rel=\"nofollow\">http://hyuhan.com/2016/09/07/compares-less-sass-and-stylus/</a></li>\n<li><a href=\"https://blog.csdn.net/qq_35697034/article/details/78251173\" rel=\"nofollow\">https://blog.csdn.net/qq_35697034/article/details/78251173</a></li>\n</ul>"
  },
  {
    "id": 37,
    "title": "深入bootstrap响应式布局",
    "labels": "开发者笔记",
    "created_at": "2018-06-19T07:23:57Z",
    "updated_at": "2019-09-02T03:21:59Z",
    "body_html": "<h2>前言</h2>\n<p>bootstrap响应式布局用的不熟，在网上找了现成的bootstrap响应单页很多，在这里通过分析一个<code>bootstrap中文网主页</code>的响应来分析响应式布局的原理，从此畅通，以后专注写media...</p>\n<p>前往：<a href=\"http://www.bootcss.com/\" rel=\"nofollow\">Bootstrap中文网</a></p>\n<h2>视口</h2>\n<p>获取viewport的大小(布局视口)</p>\n<p><strong>获取layout viewport</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">documentElement</span>.<span class=\"pl-smi\">clientWidth</span>;\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">documentElement</span>.<span class=\"pl-smi\">clientHeight</span>;</pre></div>\n<p><strong>ideal viewport（理想视口）设备屏幕区域</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 获取ideal viewport有两种情形</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 新设备</span>\n<span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">screen</span>.<span class=\"pl-c1\">width</span>;\n<span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">screen</span>.<span class=\"pl-c1\">height</span>;\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 老设备</span>\n<span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">screen</span>.<span class=\"pl-c1\">width</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">devicePixelRatio</span>;\n<span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">screen</span>.<span class=\"pl-c1\">height</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">devicePixelRatio</span>;</pre></div>\n<p>移动设备厂商认为将网页完整显示给用户才最合理，而不该出现滚动条，所以就将layout viewport进行了缩放，使其恰好完整显示在ideal viewport（屏幕）里，其缩放比例为ideal viewport / layout viewport。</p>\n<h3>屏幕适配</h3>\n<blockquote>\n<p>移动页面最理想的状态是，避免滚动条且不被默认缩放处理</p>\n</blockquote>\n<blockquote>\n<p>viewport 是由苹果公司为了解决移动设备浏览器渲染页面而提出的解决方案</p>\n</blockquote>\n<ul>\n<li>控制缩放</li>\n</ul>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>viewport<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>width=device-width, initial-scale=1.0<span class=\"pl-pds\">\"</span></span>&gt;</pre></div>\n<h2>媒体查询</h2>\n<p>引入方法</p>\n<ol>\n<li>link方法</li>\n</ol>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">link</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>index.css<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">media</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>only screen and (max-width: 320px)<span class=\"pl-pds\">\"</span></span>&gt;</pre></div>\n<ol start=\"2\">\n<li>media(css样式)</li>\n</ol>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">max-width</span>: <span class=\"pl-c1\">979<span class=\"pl-k\">px</span></span>) {}</pre></div>\n<ul>\n<li>关键字</li>\n</ul>\n<p>关键字将媒体类型或多个媒体特性连接到一起做为媒体查询的条件。</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td>将多个媒体特性连接起来，相当于\"且\"</td>\n</tr>\n<tr>\n<td>not</td>\n<td>排除某个媒体类型，相当于\"非\"，可以省略</td>\n</tr>\n<tr>\n<td>only</td>\n<td>指定某个特定的媒体类型，可以省略</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>常用特性</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width / height</td>\n<td>完全等于layout viewport</td>\n</tr>\n<tr>\n<td>max-width / max-height</td>\n<td>小于等于layout viewport</td>\n</tr>\n<tr>\n<td>min-width / min-height</td>\n<td>大于等于layout viewport</td>\n</tr>\n<tr>\n<td>device-width / device-height</td>\n<td>完全等于ideal viewport</td>\n</tr>\n</tbody>\n</table>\n<h2>Bootstrap的响应源码</h2>\n<h3>container</h3>\n<p>每个布局的大容器都在使用了<code>.container</code>这个class类名，保证所有设备padding和margin的同时候，保证响应设备的宽度控制。</p>\n<div class=\"highlight highlight-source-css\"><pre> <span class=\"pl-c\"><span class=\"pl-c\">/*</span>最小设备以及公共padding与margin的控制<span class=\"pl-c\">*/</span></span>\n<span class=\"pl-e\">.container</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">padding-right</span></span>: <span class=\"pl-c1\">15<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">padding-left</span></span>: <span class=\"pl-c1\">15<span class=\"pl-k\">px</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin-right</span></span>: <span class=\"pl-c1\">auto</span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin-left</span></span>: <span class=\"pl-c1\">auto</span>\n}\n\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.container</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>:<span class=\"pl-c1\">750<span class=\"pl-k\">px</span></span>\n  }\n}\n\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">992<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.container</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>:<span class=\"pl-c1\">970<span class=\"pl-k\">px</span></span>\n  }\n}\n\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">1200<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.container</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>:<span class=\"pl-c1\">1170<span class=\"pl-k\">px</span></span>;\n  }\n}</pre></div>\n<h3>display</h3>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">max-width</span>: <span class=\"pl-c1\">767<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.hidden-xs</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">none</span> <span class=\"pl-k\">!important</span>;\n  }\n}\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span>当尺寸大于等于768px和小于等于991px时<span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">max-width</span>: <span class=\"pl-c1\">991<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.hidden-sm</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">none</span> <span class=\"pl-k\">!important</span>;\n  }\n}\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">992<span class=\"pl-k\">px</span></span>) <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">max-width</span>: <span class=\"pl-c1\">1199<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.hidden-md</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">none</span> <span class=\"pl-k\">!important</span>;\n  }\n}\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">1200<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.hidden-lg</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">none</span> <span class=\"pl-k\">!important</span>;\n  }\n}</pre></div>\n<h2>Response分析</h2>\n<p>以Bootstrap中文网为例子，进一步完善媒体查询对响应式布局的功用。</p>\n<p>我的PC设备是 1366x768,在这里选择<code>@media (min-width: 1200px)</code>的情况进行兼容，匹配PC设备</p>\n<h3>header</h3>\n<ol>\n<li>使用<code>hidden-sm hidden-md</code>两个class类控制，当屏幕尺寸大于768px和小于等于1119时候,隐藏<strong>Bootstrap2中文文档</strong>。</li>\n</ol>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">992<span class=\"pl-k\">px</span></span>) <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">max-width</span>: <span class=\"pl-c1\">1199<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.hidden-md</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">none</span> <span class=\"pl-k\">!important</span>;\n  }\n}\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">max-width</span>: <span class=\"pl-c1\">991<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.hidden-sm</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">none</span> <span class=\"pl-k\">!important</span>;\n  }\n}</pre></div>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hidden-sm hidden-md<span class=\"pl-pds\">\"</span></span>&gt;\n&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://v2.bootcss.com/<span class=\"pl-pds\">\"</span></span><span class=\"pl-e\">target</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_blank<span class=\"pl-pds\">\"</span></span>&gt;Bootstrap2中文文档&lt;/<span class=\"pl-ent\">a</span>&gt;\n&lt;/<span class=\"pl-ent\">li</span>&gt;</pre></div>\n<ol start=\"2\">\n<li>当屏幕尺寸大于768px和小于等于991px的时，使用<code>.hidden-sm</code>控制header左侧的<strong>Bootstrap中文网</strong>隐藏，控制右侧的<strong>关于</strong>隐藏。</li>\n</ol>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>navbar-brand hidden-sm<span class=\"pl-pds\">\"</span></span> &gt;Bootstrap中文网&lt;/<span class=\"pl-ent\">a</span>&gt;\n...\n&lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nav navbar-nav navbar-right hidden-sm<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">li</span>&gt;&lt;<span class=\"pl-ent\">a</span>&gt;关于&lt;/<span class=\"pl-ent\">a</span>&gt;&lt;/<span class=\"pl-ent\">li</span>&gt;\n&lt;/<span class=\"pl-ent\">ul</span>&gt;</pre></div>\n<ol start=\"3\">\n<li>当屏幕尺寸小于768px时,<code>nav-toggle</code>不再控制菜单的隐藏状态，显示出来，header的各个子菜单，由<code>collapse</code>控制隐藏，同时改变了nav里面的li标签的布局方式(不设浮动)，变成树状态。</li>\n</ol>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.navbar-toggle</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>:<span class=\"pl-c1\">none</span>\n  }\n}\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n  <span class=\"pl-e\">.navbar-collapse.collapse</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">block</span> <span class=\"pl-k\">!important</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">auto</span> <span class=\"pl-k\">!important</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">padding-bottom</span></span>: <span class=\"pl-c1\">0</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">overflow</span></span>: <span class=\"pl-c1\">visible</span> <span class=\"pl-k\">!important</span>;\n  }\n}\n\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n<span class=\"pl-e\">.navbar-nav</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">float</span></span>: <span class=\"pl-c1\">left</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">margin</span></span>: <span class=\"pl-c1\">0</span>;\n    }\n}</pre></div>\n<div class=\"highlight highlight-text-html-basic\"><pre> &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>navbar-collapse collapse<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">role</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>navigation<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nav navbar-nav<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hidden-sm hidden-md<span class=\"pl-pds\">\"</span></span>&gt;\n        &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://v2.bootcss.com/<span class=\"pl-pds\">\"</span></span>&gt;Bootstrap2中文文档&lt;/<span class=\"pl-ent\">a</span>&gt;\n      &lt;/<span class=\"pl-ent\">li</span>&gt;\n      &lt;<span class=\"pl-ent\">li</span>&gt;\n        &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://v3.bootcss.com/<span class=\"pl-pds\">\"</span></span>&gt;Bootstrap3中文文档&lt;/<span class=\"pl-ent\">a</span>&gt;\n      &lt;/<span class=\"pl-ent\">li</span>&gt;\n    ...\n    &lt;/<span class=\"pl-ent\">ul</span>&gt;\n    &lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>nav navbar-nav navbar-right hidden-sm<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">li</span>&gt;\n        &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/about/<span class=\"pl-pds\">\"</span></span>&gt;关于&lt;/<span class=\"pl-ent\">a</span>&gt;\n      &lt;/<span class=\"pl-ent\">li</span>&gt;\n    &lt;/<span class=\"pl-ent\">ul</span>&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<h3>masthead 报头</h3>\n<p>masthead模块的响应主要是包含块container和居中<code>text-align：center</code>的结果,当然需要下面的css控制h1和h2的大小响应。</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n    <span class=\"pl-e\">.masthead</span> {\n        <span class=\"pl-c1\"><span class=\"pl-c1\">padding</span></span>:<span class=\"pl-c1\">90<span class=\"pl-k\">px</span></span> <span class=\"pl-c1\">0</span> <span class=\"pl-c1\">110<span class=\"pl-k\">px</span></span>\n    }\n}\n\n<span class=\"pl-e\">.masthead</span> <span class=\"pl-ent\">h1</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">60<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">1</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">letter-spacing</span></span>: <span class=\"pl-c1\">-2<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-weight</span></span>: <span class=\"pl-c1\">700</span>\n}\n\n<span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n    <span class=\"pl-e\">.masthead</span> <span class=\"pl-ent\">h1</span> {\n        <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>:<span class=\"pl-c1\">90<span class=\"pl-k\">px</span></span>;\n    }\n}\n\n<span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">992<span class=\"pl-k\">px</span></span>) {\n    <span class=\"pl-e\">.masthead</span> <span class=\"pl-ent\">h1</span> {\n        <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>:<span class=\"pl-c1\">100<span class=\"pl-k\">px</span></span>;\n    }\n}\n\n<span class=\"pl-e\">.masthead</span> <span class=\"pl-ent\">h2</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">18<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-weight</span></span>: <span class=\"pl-c1\">200</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">line-height</span></span>: <span class=\"pl-c1\">1.25</span>\n}\n\n<span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n    <span class=\"pl-e\">.masthead</span> <span class=\"pl-ent\">h2</span> {\n        <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>:<span class=\"pl-c1\">24<span class=\"pl-k\">px</span></span>\n    }\n}\n\n<span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">992<span class=\"pl-k\">px</span></span>) {\n    <span class=\"pl-e\">.masthead</span> <span class=\"pl-ent\">h2</span> {\n        <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>:<span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>\n    }\n}</pre></div>\n<h3>social 社交</h3>\n<p>下面是布局的简化版本，主要利用了<code>text-algn:center</code>与<code>container</code>:</p>\n<p>css样式</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">*</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">box-sizing</span></span>: <span class=\"pl-c1\">border-box</span>;\n    }\n\n    <span class=\"pl-e\">.text-align</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">center</span>;\n    }\n\n    <span class=\"pl-e\">.container</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">padding-right</span></span>: <span class=\"pl-c1\">15<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">padding-left</span></span>: <span class=\"pl-c1\">15<span class=\"pl-k\">px</span></span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">margin-right</span></span>: <span class=\"pl-c1\">auto</span>;\n      <span class=\"pl-c1\"><span class=\"pl-c1\">margin-left</span></span>: <span class=\"pl-c1\">auto</span>;\n    }\n\n    <span class=\"pl-e\">.social-forum</span>,\n    <span class=\"pl-e\">.social-weibo</span> {\n      <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">inline-block</span>;\n    }</pre></div>\n<p>html布局</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>container text-align<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bc-social-buttons<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>social-forum<span class=\"pl-pds\">\"</span></span>&gt;\n        Bootstrap问答社区\n      &lt;/<span class=\"pl-ent\">li</span>&gt;\n      &lt;<span class=\"pl-ent\">li</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>social-weibo<span class=\"pl-pds\">\"</span></span>&gt;\n        新浪微博：@Bootstrap中文网\n      &lt;/<span class=\"pl-ent\">li</span>&gt;\n    &lt;/<span class=\"pl-ent\">ul</span>&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<h3>projects</h3>\n<h4>header</h4>\n<p>首先是包裹header的容器<code>projects-header</code>，使用百分比布局居中适应，保证容器内部的响应.</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.projects-header</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">60<span class=\"pl-k\">%</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">center</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">margin</span></span>: <span class=\"pl-c1\">60<span class=\"pl-k\">px</span></span> <span class=\"pl-c1\">0</span> <span class=\"pl-c1\">10<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-weight</span></span>: <span class=\"pl-c1\">200</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">margin-bottom</span></span>: <span class=\"pl-c1\">40<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">display</span></span>: <span class=\"pl-c1\">block</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">margin-left</span></span>: <span class=\"pl-c1\">auto</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">margin-right</span></span>: <span class=\"pl-c1\">auto</span>;\n}</pre></div>\n<p>header内部使用h2标签包裹的标题<code>Bootstrap相关优质项目推荐</code>,设置了响应，当在大于768px的时候字体大小为42px，小于768px的时候更改为30px；</p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-e\">.projects-header</span> <span class=\"pl-ent\">h2</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">30<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">letter-spacing</span></span>: <span class=\"pl-c1\">-1<span class=\"pl-k\">px</span></span>\n}\n\n<span class=\"pl-k\">@media</span> <span class=\"pl-c1\">screen</span> <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n    <span class=\"pl-e\">.projects-header</span> <span class=\"pl-ent\">h2</span> {\n        <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>:<span class=\"pl-c1\">42<span class=\"pl-k\">px</span></span>;\n    }\n}</pre></div>\n<h4>projects区域</h4>\n<p>先说著名的12栅格布局，当屏幕大于<code>1200px</code>像素的时候使用<code>col-lg-3</code>将宽分为每份25%，这里的3指的是12份取其中的3份，就是1/4；当屏幕尺寸介于<code>992px-1200px</code>之间，使用<code>col-md-4</code>将宽度分成3份，每份占1/3；当屏幕尺寸介于<code>768px-992px</code>之间时，使用<code>col-sm-6</code>,将屏幕分成2份（都是在只使用单一的分法时），当屏幕尺寸小于768px的时候不再栅格，使用默认的样式控制左右padding向中间挤压.</p>\n<p>由于采用<code>border-box</code>布局，上述栅格系统通过默认加入的左右padding 15px像素可以控制间隔。</p>\n<pre><code>* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n*:before,\n*:after {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n</code></pre>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">1200<span class=\"pl-k\">px</span></span>) {\n<span class=\"pl-e\">.col-lg-3</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">25<span class=\"pl-k\">%</span></span>;\n    }\n}\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">1200<span class=\"pl-k\">px</span></span>)\n.col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9 {\n    float: left;\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">992<span class=\"pl-k\">px</span></span>) {\n<span class=\"pl-e\">.col-md-4</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">33.33333333<span class=\"pl-k\">%</span></span>;\n    }\n}\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">992<span class=\"pl-k\">px</span></span>) {\n<span class=\"pl-e\">.col-md-1</span>, <span class=\"pl-e\">.col-md-10</span>, <span class=\"pl-e\">.col-md-11</span>, <span class=\"pl-e\">.col-md-12</span>, <span class=\"pl-e\">.col-md-2</span>, <span class=\"pl-e\">.col-md-3</span>, <span class=\"pl-e\">.col-md-4</span>, <span class=\"pl-e\">.col-md-5</span>, <span class=\"pl-e\">.col-md-6</span>, <span class=\"pl-e\">.col-md-7</span>, <span class=\"pl-e\">.col-md-8</span>, <span class=\"pl-e\">.col-md-9</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">float</span></span>: <span class=\"pl-c1\">left</span>;\n    }\n}\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n<span class=\"pl-e\">.col-sm-6</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">50<span class=\"pl-k\">%</span></span>;\n    }\n}\n<span class=\"pl-c\"><span class=\"pl-c\">/*</span>左右距离控制<span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">@media</span> (<span class=\"pl-c1\">min-width</span>: <span class=\"pl-c1\">768<span class=\"pl-k\">px</span></span>) {\n<span class=\"pl-e\">.col-sm-1</span>, <span class=\"pl-e\">.col-sm-10</span>, <span class=\"pl-e\">.col-sm-11</span>, <span class=\"pl-e\">.col-sm-12</span>, <span class=\"pl-e\">.col-sm-2</span>, <span class=\"pl-e\">.col-sm-3</span>, <span class=\"pl-e\">.col-sm-4</span>, <span class=\"pl-e\">.col-sm-5</span>, <span class=\"pl-e\">.col-sm-6</span>, <span class=\"pl-e\">.col-sm-7</span>, <span class=\"pl-e\">.col-sm-8</span>, <span class=\"pl-e\">.col-sm-9</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">float</span></span>: <span class=\"pl-c1\">left</span>;\n    }\n<span class=\"pl-e\">.col-lg-1</span>, <span class=\"pl-e\">.col-lg-10</span>, <span class=\"pl-e\">.col-lg-11</span>, <span class=\"pl-e\">.col-lg-12</span>, <span class=\"pl-e\">.col-lg-2</span>, <span class=\"pl-e\">.col-lg-3</span>, <span class=\"pl-e\">.col-lg-4</span>, <span class=\"pl-e\">.col-lg-5</span>, <span class=\"pl-e\">.col-lg-6</span>, <span class=\"pl-e\">.col-lg-7</span>, <span class=\"pl-e\">.col-lg-8</span>, <span class=\"pl-e\">.col-lg-9</span>, <span class=\"pl-e\">.col-md-1</span>, <span class=\"pl-e\">.col-md-10</span>, <span class=\"pl-e\">.col-md-11</span>, <span class=\"pl-e\">.col-md-12</span>, <span class=\"pl-e\">.col-md-2</span>, <span class=\"pl-e\">.col-md-3</span>, <span class=\"pl-e\">.col-md-4</span>, <span class=\"pl-e\">.col-md-5</span>, <span class=\"pl-e\">.col-md-6</span>, <span class=\"pl-e\">.col-md-7</span>, <span class=\"pl-e\">.col-md-8</span>, <span class=\"pl-e\">.col-md-9</span>, <span class=\"pl-e\">.col-sm-1</span>, <span class=\"pl-e\">.col-sm-10</span>, <span class=\"pl-e\">.col-sm-11</span>, <span class=\"pl-e\">.col-sm-12</span>, <span class=\"pl-e\">.col-sm-2</span>, <span class=\"pl-e\">.col-sm-3</span>, <span class=\"pl-e\">.col-sm-4</span>, <span class=\"pl-e\">.col-sm-5</span>, <span class=\"pl-e\">.col-sm-6</span>, <span class=\"pl-e\">.col-sm-7</span>, <span class=\"pl-e\">.col-sm-8</span>, <span class=\"pl-e\">.col-sm-9</span>, <span class=\"pl-e\">.col-xs-1</span>, <span class=\"pl-e\">.col-xs-10</span>, <span class=\"pl-e\">.col-xs-11</span>, <span class=\"pl-e\">.col-xs-12</span>, <span class=\"pl-e\">.col-xs-2</span>, <span class=\"pl-e\">.col-xs-3</span>, <span class=\"pl-e\">.col-xs-4</span>, <span class=\"pl-e\">.col-xs-5</span>, <span class=\"pl-e\">.col-xs-6</span>, <span class=\"pl-e\">.col-xs-7</span>, <span class=\"pl-e\">.col-xs-8</span>, <span class=\"pl-e\">.col-xs-9</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">position</span></span>: <span class=\"pl-c1\">relative</span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">min-height</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">padding-right</span></span>: <span class=\"pl-c1\">15<span class=\"pl-k\">px</span></span>;\n    <span class=\"pl-c1\"><span class=\"pl-c1\">padding-left</span></span>: <span class=\"pl-c1\">15<span class=\"pl-k\">px</span></span>;\n   }\n}</pre></div>\n<h3>footer</h3>\n<p>按照footer结构的布局，没有css样式的时候是上下结构布局，移动端响应比较好，在大设备上需要左右布局，这时候的栅格布局结构大致如下面的情况。</p>\n<p>在大于768px设备上面，将右侧的公司结构目录再次分成12份的布局结构，小于768px像素的时候这些拆分栅格失效，还保留了公共的padding来控制间隔距离，设计不可谓不妙。</p>\n<p>下面的<code>footer-bottom</code>结构基本与上面的social模块一样，不再赘述了...</p>\n<div class=\"highlight highlight-text-html-basic\"><pre> &lt;<span class=\"pl-ent\">footer</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>footer <span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>container<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>row footer-top<span class=\"pl-pds\">\"</span></span>&gt;\n        &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>col-md-6 col-lg-6<span class=\"pl-pds\">\"</span></span>&gt;\n          &lt;<span class=\"pl-ent\">h4</span>&gt;\n            &lt;<span class=\"pl-ent\">img</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://assets.bootcss.com/www/assets/img/logo.png?1528519874373<span class=\"pl-pds\">\"</span></span>&gt;\n          &lt;/<span class=\"pl-ent\">h4</span>&gt;\n          &lt;<span class=\"pl-ent\">p</span>&gt;我们一直致力于为广大开发者提供更多的优质技术文档和辅助开发工具！&lt;/<span class=\"pl-ent\">p</span>&gt;\n        &lt;/<span class=\"pl-ent\">div</span>&gt;\n        &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>col-md-6  col-lg-5 col-lg-offset-1<span class=\"pl-pds\">\"</span></span>&gt;\n          &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>row about<span class=\"pl-pds\">\"</span></span>&gt;\n            &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>col-sm-3<span class=\"pl-pds\">\"</span></span>&gt;\n              &lt;<span class=\"pl-ent\">h4</span>&gt;关于&lt;/<span class=\"pl-ent\">h4</span>&gt;\n              &lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>list-unstyled<span class=\"pl-pds\">\"</span></span>&gt;\n                li*4 ...\n              &lt;/<span class=\"pl-ent\">ul</span>&gt;\n            &lt;/<span class=\"pl-ent\">div</span>&gt;\n            &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>col-sm-3<span class=\"pl-pds\">\"</span></span>&gt;\n              &lt;<span class=\"pl-ent\">h4</span>&gt;联系方式&lt;/<span class=\"pl-ent\">h4</span>&gt;\n              &lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>list-unstyled<span class=\"pl-pds\">\"</span></span>&gt;\n                li*2 ...\n              &lt;/<span class=\"pl-ent\">ul</span>&gt;\n            &lt;/<span class=\"pl-ent\">div</span>&gt;\n            &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>col-sm-4<span class=\"pl-pds\">\"</span></span>&gt;\n              &lt;<span class=\"pl-ent\">h4</span>&gt;旗下网站&lt;/<span class=\"pl-ent\">h4</span>&gt;\n              &lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>list-unstyled<span class=\"pl-pds\">\"</span></span>&gt;\n                li*5 ...\n              &lt;/<span class=\"pl-ent\">ul</span>&gt;\n            &lt;/<span class=\"pl-ent\">div</span>&gt;\n            &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>col-sm-2<span class=\"pl-pds\">\"</span></span>&gt;\n              &lt;<span class=\"pl-ent\">h4</span>&gt;赞助商&lt;/<span class=\"pl-ent\">h4</span>&gt;\n              &lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>list-unstyled<span class=\"pl-pds\">\"</span></span>&gt;\n\n                li ...\n              &lt;/<span class=\"pl-ent\">ul</span>&gt;\n            &lt;/<span class=\"pl-ent\">div</span>&gt;\n          &lt;/<span class=\"pl-ent\">div</span>&gt;\n\n        &lt;/<span class=\"pl-ent\">div</span>&gt;\n      &lt;/<span class=\"pl-ent\">div</span>&gt;\n      &lt;<span class=\"pl-ent\">hr</span>&gt;\n      &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>row footer-bottom<span class=\"pl-pds\">\"</span></span>&gt;\n        &lt;<span class=\"pl-ent\">ul</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>list-inline text-center<span class=\"pl-pds\">\"</span></span>&gt;\n          &lt;<span class=\"pl-ent\">li</span>&gt;\n            &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://www.miibeian.gov.cn/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">target</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_blank<span class=\"pl-pds\">\"</span></span>&gt;京ICP备11008151号&lt;/<span class=\"pl-ent\">a</span>&gt;\n          &lt;/<span class=\"pl-ent\">li</span>&gt;\n          &lt;<span class=\"pl-ent\">li</span>&gt;京公网安备11010802014853&lt;/<span class=\"pl-ent\">li</span>&gt;\n        &lt;/<span class=\"pl-ent\">ul</span>&gt;\n      &lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;/<span class=\"pl-ent\">footer</span>&gt;</pre></div>"
  },
  {
    "id": 34,
    "title": "Redux入门",
    "labels": "JavaScript",
    "created_at": "2018-06-07T05:00:14Z",
    "updated_at": "2019-10-12T03:54:59Z",
    "body_html": "<h2>介绍</h2>\n<p>Redux 是 JavaScript 状态容器， 试图让 state 的变化变得可预测。</p>\n<h3>使用场景</h3>\n<ul>\n<li>用户的使用方式复杂</li>\n<li>不同身份的用户有不同的使用方式（比如普通用户和管理员）</li>\n<li>多个用户之间可以协作</li>\n<li>与服务器大量交互，或者使用了 WebSocket</li>\n<li>View 要从多个来源获取数据</li>\n</ul>\n<h2>flux 架构</h2>\n<p>flux 的单向数据流图</p>\n<pre><code>/*\n                 _________               ____________               ___________\n                |         |             |            |             |           |\n                | Action  |------------▶| Dispatcher |------------▶| callbacks |\n                |_________|             |____________|             |___________|\n                     ▲                                                   |\n                     |                                                   |\n                     |                                                   |\n _________       ____|_____                                          ____▼____\n|         |◀----|  Action  |                                        |         |\n| Web API |     | Creators |                                        |  Store  |\n|_________|----▶|__________|                                        |_________|\n                     ▲                                                   |\n                     |                                                   |\n                 ____|________           ____________                ____▼____\n                |   User       |         |   React   |              | Change  |\n                | interactions |◀--------|   Views   |◀-------------| events  |\n                |______________|         |___________|              |_________|\n*/\n</code></pre>\n<p>结合 Redux 分析流程：</p>\n<pre><code>ActionCreator -&gt; Action -&gt; dispatcher -&gt; middleware  -&gt; reducers  -&gt; Store   -&gt; Change events  -&gt; React Views\n</code></pre>\n<h2>核心概念</h2>\n<p>action: 描述行为的指示器，是一个用于描述已发生事件的普通对象。</p>\n<p>state: 应用的全局状态，唯一改变 state 的方法就是触发 action。</p>\n<p>reducer：state 函数更新规则，接收 state 和 action，并返回新的 state</p>\n<h2>Demo</h2>\n<h3>actions</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">increment</span>(<span class=\"pl-smi\">num</span>) {\n  <span class=\"pl-k\">return</span> {\n    type<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>INCREMENT<span class=\"pl-pds\">'</span></span>,\n    num\n  };\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">decrement</span>(<span class=\"pl-smi\">num</span>) {\n  <span class=\"pl-k\">return</span> {\n    type<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>DECREMENT<span class=\"pl-pds\">'</span></span>,\n    num\n  };\n}</pre></div>\n<h3>reducers</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> initCount <span class=\"pl-k\">=</span> {\n  count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0</span>\n};\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">counter</span>(<span class=\"pl-smi\">state</span>, <span class=\"pl-smi\">action</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>state) {\n    <span class=\"pl-k\">return</span> initCount;\n  }\n  <span class=\"pl-k\">switch</span> (<span class=\"pl-smi\">action</span>.<span class=\"pl-c1\">type</span>) {\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>INCREMENT<span class=\"pl-pds\">'</span></span>:\n      <span class=\"pl-k\">return</span> { count<span class=\"pl-k\">:</span> <span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">Number</span>(<span class=\"pl-smi\">action</span>.<span class=\"pl-smi\">num</span>) };\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>DECREMENT<span class=\"pl-pds\">'</span></span>:\n      <span class=\"pl-k\">return</span> { count<span class=\"pl-k\">:</span> <span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">count</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">Number</span>(<span class=\"pl-smi\">action</span>.<span class=\"pl-smi\">num</span>) };\n    <span class=\"pl-k\">default</span>:\n      <span class=\"pl-k\">return</span> state;\n  }\n}</pre></div>\n<blockquote>\n<p>不要修改 state，为 action 返回一个新的 state;<br>\n在遇到未知 action 时，默认情况下一定要返回旧的 state</p>\n</blockquote>\n<h3>store</h3>\n<p>store 是一个对象，使用 Redux 提供的<code>createStore</code>方法来生成，我们需要将 Reducer 作为参数传进去，在本例中：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> store <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Redux</span>.<span class=\"pl-en\">createStore</span>(counter);</pre></div>\n<p><strong>store 拥有以下方法</strong></p>\n<ul>\n<li>通过<code>store.getState()</code>f 方法 获取 state;</li>\n<li>通过<code>store.dispatch(action)</code>方法来更新 state；</li>\n<li>通过<code>store.subscribe(listener)</code>方法来注册监听器，state 变化时自动执行该函数；</li>\n</ul>\n<p>通过 <code>store.getState()</code>获取 state，并根据 state 值来设置 span 的初始值</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">renderValue</span>() {\n  <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>span<span class=\"pl-pds\">'</span></span>).<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">store</span>.<span class=\"pl-en\">getState</span>().<span class=\"pl-smi\">count</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 首次执行</span>\n<span class=\"pl-en\">renderValue</span>();</pre></div>\n<p>注册监听器，每当 state 发生变化时执行上面的渲染函数</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">store</span>.<span class=\"pl-en\">subscribe</span>(renderValue);</pre></div>\n<h3>整合逻辑，触发 action</h3>\n<p>最后通过 <code>store.dispatch(action)</code>来触发修改 state 的操作，写在事件处理程序中，点击按钮时修改 state:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.increment<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">onclick</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">let</span> num <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>input<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">value</span>;\n  <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-smi\">store</span>.<span class=\"pl-en\">dispatch</span>(<span class=\"pl-en\">increment</span>(num));\n  }, <span class=\"pl-c1\">0</span>);\n};\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.decrement<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">onclick</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">let</span> num <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>input<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">value</span>;\n  <span class=\"pl-smi\">store</span>.<span class=\"pl-en\">dispatch</span>(<span class=\"pl-en\">decrement</span>(num));\n};</pre></div>\n<h2>middleware</h2>\n<p>中间件，redux 中<code>createStore</code>的第三个参数支持添加中间件。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">createStore</span>, <span class=\"pl-smi\">applyMiddleware</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>redux<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">logger</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>redux-logger<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">error</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">store</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-smi\">next</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-smi\">action</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-en\">next</span>(action);\n  } <span class=\"pl-k\">catch</span> (e) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span>, e);\n  }\n};\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">store</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">createStore</span>(rootReducer, {}, <span class=\"pl-en\">applyMiddleware</span>(logger, error));</pre></div>\n<p>上图中的<code>logger</code>中间件可以自己书写:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">logger</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">store</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-smi\">next</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-smi\">action</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dispatching<span class=\"pl-pds\">'</span></span>, action);\n  <span class=\"pl-k\">let</span> result <span class=\"pl-k\">=</span> <span class=\"pl-en\">next</span>(action);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>next state<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">store</span>.<span class=\"pl-en\">getState</span>());\n  <span class=\"pl-k\">return</span> result;\n};\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">logger</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">store</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">next</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">action</span>) {\n      <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dispatching...<span class=\"pl-pds\">'</span></span>, action);\n      <span class=\"pl-k\">let</span> result <span class=\"pl-k\">=</span> <span class=\"pl-en\">next</span>(action);\n      <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>next State<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">store</span>.<span class=\"pl-en\">getState</span>());\n      <span class=\"pl-k\">return</span> result;\n    };\n  };\n};</pre></div>\n<h2>react-redux</h2>\n<p>react-redux 的作用是将 redux 的的反应更好的流动(绑定到)reac 应用上。</p>\n<h4></h4>\n<p>作用在于将由 redux 创建的 store 传递到内部组件中，内部组件可以使用这个 store 并提供对 state 的更新。</p>\n<p>所以说<code>Provider</code>可以只在 react 应用最外包裹层注入 store 就可以了。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">ReactDOM</span>.<span class=\"pl-en\">render</span>(\n  <span class=\"pl-k\">&lt;</span>Provider store<span class=\"pl-k\">=</span>{store}<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-k\">&lt;</span>Router history<span class=\"pl-k\">=</span>{history}<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span>Route path<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span> component<span class=\"pl-k\">=</span>{App}<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>Route path<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span> component<span class=\"pl-k\">=</span>{Foo}<span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>Route path<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span> component<span class=\"pl-k\">=</span>{Bar}<span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Route<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Router<span class=\"pl-k\">&gt;</span>\n  <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>Provider<span class=\"pl-k\">&gt;</span>,\n  <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>root<span class=\"pl-pds\">'</span></span>)</pre></div>\n<h4>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4>\n<p>connect()一共有四个参数，常用的有两个<code>mapStateToProps</code>和<code>mapDispatchToProps</code></p>\n<ul>\n<li>mapStateToProps：把状态绑定到组件的属性当中。我们定义的 state 对象有哪些属性，在我们组件的 props 都可以查阅和获取。</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">mapStateToProps</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">state</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-k\">return</span> {\n    counter<span class=\"pl-k\">:</span> <span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">counter</span>\n  };\n};</pre></div>\n<p>state 相当于 store.getState() 通过 connect 绑定到组件的 props 上进行获取,返回的对象键可以自定义；</p>\n<ul>\n<li>mapDispatchToProps：在 redux 中介绍过，用 store.dispatch(action)来发出操作，那么我们同样可以把这个方法封装起来，即绑定到我们的方法中。</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">increment</span>, <span class=\"pl-smi\">decrement</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./actions<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> 少量action</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">mapDispatchToProps</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">dispatch</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-k\">return</span> {\n    <span class=\"pl-en\">increment</span><span class=\"pl-k\">:</span> () <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">dispatch</span>(<span class=\"pl-en\">increment</span>()),\n    <span class=\"pl-en\">decrement</span><span class=\"pl-k\">:</span> () <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">dispatch</span>(<span class=\"pl-en\">decrement</span>())\n  };\n};</pre></div>\n<h3>补充</h3>\n<p>单个声明式导出 action 方法和多个一块导出，这种 props 数据比较清晰</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">increment</span>, <span class=\"pl-smi\">decrement</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./actions<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> 少量action</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> import * as types from './actions'; // 多个action</span></pre></div>\n<p>另一种方法借用<code>bindActionCreators</code>api,这样会将所有的 action 一同绑定，适情况使用。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">types</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./actions<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> 多个action</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">mapDispatchToProps</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">dispatch</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">bindActionCreators</span>(types, dispatch);\n};</pre></div>\n<p>最后 connect()将 state 和 dispatch 都绑定到导出的组件上，redux 数据就经过 react-redux 流动到了 react 组件上。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">connect</span>(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);</pre></div>\n<h2>Redux DevTools</h2>\n<h4>参考</h4>\n<ul>\n<li><a href=\"http://cn.redux.js.org/\" rel=\"nofollow\">官方文档</a></li>\n<li><a href=\"https://github.com/react-guide/redux-tutorial-cn\">redux-tutorial-cn </a></li>\n<li><a href=\"https://www.jianshu.com/p/1a2f3db4af61\" rel=\"nofollow\">https://www.jianshu.com/p/1a2f3db4af61</a></li>\n<li><a href=\"https://www.jianshu.com/p/3334467e4b32\" rel=\"nofollow\">https://www.jianshu.com/p/3334467e4b32</a></li>\n<li><a href=\"https://github.com/evgenyrodionov/redux-logger\">https://github.com/evgenyrodionov/redux-logger</a></li>\n<li><a href=\"https://github.com/gaearon/redux-thunk\">https://github.com/gaearon/redux-thunk</a></li>\n<li><a href=\"https://github.com/pburtchaell/redux-promise-middleware\">https://github.com/pburtchaell/redux-promise-middleware</a></li>\n<li><a href=\"https://github.com/zalmoxisus/redux-devtools-extension\">https://github.com/zalmoxisus/redux-devtools-extension</a></li>\n</ul>"
  },
  {
    "id": 33,
    "title": "webpack3使用说明",
    "labels": "开发者笔记",
    "created_at": "2018-05-31T11:21:09Z",
    "updated_at": "2019-05-18T01:52:48Z",
    "body_html": "<blockquote>\n<p>webpack 3</p>\n</blockquote>\n<h2>入门命令</h2>\n<blockquote>\n<p>随后会用webpack-dev-server替代<br>\n基本构建</p>\n</blockquote>\n<div class=\"highlight highlight-source-shell\"><pre>webpack src/app.js dist/app.bundle.js</pre></div>\n<p>开发环境实时构建</p>\n<div class=\"highlight highlight-source-shell\"><pre>webpack --watch </pre></div>\n<p>生产环境中构建</p>\n<div class=\"highlight highlight-source-shell\"><pre>webpack -p</pre></div>\n<h3>其他</h3>\n<ul>\n<li>webpack -d – 包含资源地图</li>\n<li>webpack --colors - 让编译的输出内容带有颜色</li>\n</ul>\n<h2>html-webpack-plugin</h2>\n<blockquote>\n<p>自动生成html文件，指定模板，添加hash，mini</p>\n</blockquote>\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install html-webpack-plugin --save-dev</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> HtmlWebpackPlugin <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>html-webpack-plugin<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  entry<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/app.js<span class=\"pl-pds\">'</span></span>,\n  output<span class=\"pl-k\">:</span> {\n    path<span class=\"pl-k\">:</span> <span class=\"pl-c1\">__dirname</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/dist<span class=\"pl-pds\">'</span></span>,\n    filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>app.bundle.js<span class=\"pl-pds\">'</span></span>\n  },\n  plugins<span class=\"pl-k\">:</span> [<span class=\"pl-k\">new</span> <span class=\"pl-en\">HtmlWebpackPlugin</span>({\n    template<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/index.html<span class=\"pl-pds\">'</span></span>,\n    filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>index.html<span class=\"pl-pds\">'</span></span>,\n    minify<span class=\"pl-k\">:</span> {\n      collapseWhitespace<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n    },\n    hash<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n  })]\n};</pre></div>\n<h2>css-loader</h2>\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install --save-dev css-loader style-loader</pre></div>\n<div class=\"highlight highlight-source-js\"><pre> module<span class=\"pl-k\">:</span> {\n    rules<span class=\"pl-k\">:</span> [\n      {\n        test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>css<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n        use<span class=\"pl-k\">:</span> [ <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span> ]\n      }\n    ]\n  }</pre></div>\n<ul>\n<li>sass-loader</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install sass-loader node-sass --save-dev\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 安装（中间可能要下载二进制包，要耐心等待）</span></pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">css</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./app.scss<span class=\"pl-pds\">'</span></span>;</pre></div>\n<div class=\"highlight highlight-source-js\"><pre> rules<span class=\"pl-k\">:</span> [\n      {\n        test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>scss<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n        use<span class=\"pl-k\">:</span> [ <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass-loader<span class=\"pl-pds\">'</span></span> ]\n      }</pre></div>\n<ul>\n<li>extract-text-webpack-plugin</li>\n</ul>\n<blockquote>\n<p>用 extract-text-webpack-plugin 把 CSS 分离成文件</p>\n</blockquote>\n<p>有时候我们要把 SASS 或 CSS 处理好后，放到一个 CSS 文件中，用这个插件就可以实现。</p>\n<div class=\"highlight highlight-source-js\"><pre>$ npm install <span class=\"pl-k\">--</span>save<span class=\"pl-k\">-</span>dev extract<span class=\"pl-k\">-</span>text<span class=\"pl-k\">-</span>webpack<span class=\"pl-k\">-</span>plugin</pre></div>\n<h2>webpack-dev-server</h2>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 先全局安装</span>\n$ npm install -g webpack-dev-server@2.9.1\n$ npm install webpack-dev-server@2.9.1 --save-dev\n$ npm install webpack-cli -D</pre></div>\n<p>自动打开，切换端口号</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  entry<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/app.js<span class=\"pl-pds\">'</span></span>,\n  <span class=\"pl-k\">...</span>\n  devServer<span class=\"pl-k\">:</span> {\n    port<span class=\"pl-k\">:</span> <span class=\"pl-c1\">9000</span>,\n    open<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n  },\n  <span class=\"pl-k\">...</span>\n};</pre></div>\n<p>然后运行命令：</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ webpack-dev-server</pre></div>\n<h2>webpack 和 babel 配置 react 开发环境</h2>\n<h3>3.在 webpack 使用 babel-loader</h3>\n<p>最后我们需要在 webpack 中使用一个 loader 来转化 react 的代码。<br>\n首先，安装。</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install --save-dev babel-loader</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> HtmlWebpackPlugin <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>html-webpack-plugin<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">ExtractTextPlugin</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>extract-text-webpack-plugin<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  entry<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/app.js<span class=\"pl-pds\">'</span></span>,\n  <span class=\"pl-k\">...</span>\n  module<span class=\"pl-k\">:</span> {\n    rules<span class=\"pl-k\">:</span> [\n      {\n        test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>scss<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n        use<span class=\"pl-k\">:</span> <span class=\"pl-smi\">ExtractTextPlugin</span>.<span class=\"pl-en\">extract</span>({\n          fallback<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>,\n          <span class=\"pl-c\"><span class=\"pl-c\">//</span>resolve-url-loader may be chained before sass-loader if necessary</span>\n          use<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass-loader<span class=\"pl-pds\">'</span></span>]\n        })\n      },\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 这两行是处理 react 相关的内容</span>\n      { test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>js<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>, loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>babel-loader<span class=\"pl-pds\">'</span></span>, exclude<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span>node_modules<span class=\"pl-pds\">/</span></span> },\n      { test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>jsx<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>, loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>babel-loader<span class=\"pl-pds\">'</span></span>, exclude<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span>node_modules<span class=\"pl-pds\">/</span></span> }\n    ]\n  }\n};</pre></div>\n<h3>4. 写 react 组件</h3>\n<p><strong>src/index.html</strong></p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;!DOCTYPE html&gt;\n&lt;<span class=\"pl-ent\">html</span> <span class=\"pl-e\">lang</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>&gt;\n&lt;<span class=\"pl-ent\">head</span>&gt;\n  &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">charset</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>UTF-8<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">title</span>&gt;Hello World&lt;/<span class=\"pl-ent\">title</span>&gt;\n&lt;/<span class=\"pl-ent\">head</span>&gt;\n&lt;<span class=\"pl-ent\">body</span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>root<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">body</span>&gt;\n&lt;/<span class=\"pl-ent\">html</span>&gt;</pre></div>\n<p><strong>src/app.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">css</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./app.scss<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">ReactDOM</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react-dom<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">Root</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./Root<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-smi\">ReactDOM</span>.<span class=\"pl-en\">render</span>(\n  <span class=\"pl-k\">&lt;</span>Root<span class=\"pl-k\">&gt;&lt;</span><span class=\"pl-k\">/</span>Root<span class=\"pl-k\">&gt;</span>,\n  <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>root<span class=\"pl-pds\">'</span></span>)\n);</pre></div>\n<p><strong>src/Root.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Root</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div style<span class=\"pl-k\">=</span>{{textAlign<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>center<span class=\"pl-pds\">'</span></span>}}<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>h1<span class=\"pl-k\">&gt;</span>Hello World<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>h1<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>);\n  }\n}</pre></div>\n<h2>用 clean-webpack-plugin 来清除文件</h2>\n<p>生产环境每次执行<code>npm run build</code>都会在dist文件目录生成新的<code>app.bundle.d01ae8858971a17f8ed2.js </code>，再多运行几次，生成的带 hash 的 app.bundle.js 文件就会很多。</p>\n<p>这些带 hash 的 app.bundle.js 只有最新的才有用，其他的都没用，我们要在 build 之前把它们全清空：</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ npm i clean-webpack-plugin --save-dev\n</pre></div>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">path</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>path<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">...</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">CleanWebpackPlugin</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>clean-webpack-plugin<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">let</span> pathsToClean <span class=\"pl-k\">=</span> [\n  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dist<span class=\"pl-pds\">'</span></span>,\n]\n\n<span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  entry<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>app.bundle<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/app.js<span class=\"pl-pds\">'</span></span>\n  },\n  output<span class=\"pl-k\">:</span> {\n    path<span class=\"pl-k\">:</span> <span class=\"pl-smi\">path</span>.<span class=\"pl-en\">resolve</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dist<span class=\"pl-pds\">'</span></span>),\n    filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>[name].[chunkhash].js<span class=\"pl-pds\">'</span></span>\n  },\n  <span class=\"pl-k\">...</span>\n  plugins<span class=\"pl-k\">:</span> [\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">CleanWebpackPlugin</span>(pathsToClean),\n    <span class=\"pl-k\">...</span>\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">ExtractTextPlugin</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>style.css<span class=\"pl-pds\">'</span></span>)\n  ],\n  <span class=\"pl-k\">...</span>\n};\n</pre></div>\n<p>现在运行 npm run build 试试，只有下面的文件：</p>\n<pre><code>dist\n├── app.bundle.0e380cea371d050137cd.js\n├── index.html\n└── style.css\n</code></pre>\n<h2>配置多个 HTML 文件</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  entry<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>app.bundle<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/app.js<span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 这行是新增的。</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>contact<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/contact.js<span class=\"pl-pds\">'</span></span>\n  },\n  <span class=\"pl-k\">...</span>\n  plugins<span class=\"pl-k\">:</span> [\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">CleanWebpackPlugin</span>(pathsToClean),\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">HtmlWebpackPlugin</span>({\n      template<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/index.html<span class=\"pl-pds\">'</span></span>,\n      filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>index.html<span class=\"pl-pds\">'</span></span>,\n      minify<span class=\"pl-k\">:</span> {\n        collapseWhitespace<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n      },\n      hash<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 这行是新增的。</span>\n      excludeChunks<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>contact<span class=\"pl-pds\">'</span></span>]\n    }),\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">HtmlWebpackPlugin</span>({\n      template<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/contact.html<span class=\"pl-pds\">'</span></span>,\n      filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>contact.html<span class=\"pl-pds\">'</span></span>,\n      minify<span class=\"pl-k\">:</span> {\n        collapseWhitespace<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n      },\n      hash<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 这行是新增的。</span>\n      chunks<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>contact<span class=\"pl-pds\">'</span></span>]\n    }),\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">ExtractTextPlugin</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>style.css<span class=\"pl-pds\">'</span></span>)\n  ],\n  <span class=\"pl-k\">...</span>\n};</pre></div>\n<p>上面的 excludeChunks 指的是不包含， chunks 代表的是包含。</p>\n<h2>使用 pug (jade) 作为 HTML 的模板</h2>\n<blockquote>\n<p>pug,nodejs的html模板</p>\n</blockquote>\n<div class=\"highlight highlight-source-shell\"><pre>npm install --save-dev pug pug-html-loader raw-loader</pre></div>\n<p><strong>src/index.pug</strong></p>\n<div class=\"highlight highlight-source-js\"><pre>doctype html\n<span class=\"pl-en\">html</span>(lang<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>)\n  head\n    title<span class=\"pl-k\">=</span> pageTitle\n    <span class=\"pl-en\">script</span>(type<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>text/javascript<span class=\"pl-pds\">'</span></span>).\n      <span class=\"pl-k\">if</span> (foo) <span class=\"pl-en\">bar</span>(<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">5</span>)\n  body\n    h1 Pug <span class=\"pl-k\">-</span> node template engine\n    #root\n    #<span class=\"pl-smi\">container</span>.<span class=\"pl-smi\">col</span>\n      <span class=\"pl-k\">if</span> youAreUsingPug\n        p You are amazing\n      <span class=\"pl-k\">else</span>\n        p Get on it<span class=\"pl-k\">!</span>\n      p.\n        Pug is a terse and simple templating language <span class=\"pl-k\">with</span> a\n        strong focus on <span class=\"pl-c1\">performance</span> and powerful features.</pre></div>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">...</span>\n  plugins<span class=\"pl-k\">:</span> [\n    <span class=\"pl-k\">...</span>\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">HtmlWebpackPlugin</span>({\n      template<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/index.pug<span class=\"pl-pds\">'</span></span>,\n      <span class=\"pl-k\">...</span>\n    }),\n    <span class=\"pl-k\">...</span>\n  ],\n  module<span class=\"pl-k\">:</span> {\n    rules<span class=\"pl-k\">:</span> [\n      <span class=\"pl-k\">...</span>\n      { test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>pug<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>, loader<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>raw-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>pug-html-loader<span class=\"pl-pds\">'</span></span>] }\n    ]\n  }\n};</pre></div>\n<p>我们来试试 pug 的 include 功能，就是可以包含子模板。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">...</span>\n  body\n    include includes<span class=\"pl-k\">/</span><span class=\"pl-smi\">header</span>.<span class=\"pl-smi\">pug</span>\n    <span class=\"pl-k\">...</span></pre></div>\n<p><strong>src/includes/header.pug</strong></p>\n<div class=\"highlight highlight-source-js\"><pre>  h1 from header pug file</pre></div>\n<p>目录结构是这样的：</p>\n<pre><code>src\n├── Root.js\n├── app.js\n├── app.scss\n├── contact.html\n├── contact.js\n├── includes\n│   └── header.pug\n└── index.pug\n</code></pre>\n<h2>如何使用模块热替换 HMR 来处理 CSS</h2>\n<h3>1.启用 HMR</h3>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre>  devServer<span class=\"pl-k\">:</span> {\n    port<span class=\"pl-k\">:</span> <span class=\"pl-c1\">9000</span>,\n    open<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n  }</pre></div>\n<p>改成下面这样：</p>\n<div class=\"highlight highlight-source-js\"><pre> devServer<span class=\"pl-k\">:</span> {\n    port<span class=\"pl-k\">:</span> <span class=\"pl-c1\">9000</span>,\n    open<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n    hot<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n  }</pre></div>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">...</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">webpack</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>webpack<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">...</span>\n\n<span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  entry<span class=\"pl-k\">:</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>app.bundle<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/app.js<span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>contact<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./src/contact.js<span class=\"pl-pds\">'</span></span>\n  },\n  output<span class=\"pl-k\">:</span> {\n    path<span class=\"pl-k\">:</span> <span class=\"pl-smi\">path</span>.<span class=\"pl-en\">resolve</span>(<span class=\"pl-c1\">__dirname</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dist<span class=\"pl-pds\">'</span></span>),\n    filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>[name].[chunkhash].js<span class=\"pl-pds\">'</span></span>\n  },\n  devServer<span class=\"pl-k\">:</span> {\n    port<span class=\"pl-k\">:</span> <span class=\"pl-c1\">9000</span>,\n    open<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n    hot<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n  },\n  plugins<span class=\"pl-k\">:</span> [\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">CleanWebpackPlugin</span>(pathsToClean),\n    <span class=\"pl-k\">...</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 这两行是新增的</span>\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">webpack.NamedModulesPlugin</span>(),\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">webpack.HotModuleReplacementPlugin</span>()\n  ],\n  <span class=\"pl-k\">...</span>\n};\n</pre></div>\n<p><strong>报错！！！文件名还不能用 chunkhash 了，它说要用 hash 来代替 chunkhash。</strong></p>\n<p>chunkhash是每个文件都使用不同的hash值</p>\n<div class=\"highlight highlight-source-js\"><pre>filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>[name].[chunkhash].js<span class=\"pl-pds\">'</span></span></pre></div>\n<p>hash指每个文件使用相同的hash值</p>\n<div class=\"highlight highlight-source-js\"><pre>filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>[name].[hash].js<span class=\"pl-pds\">'</span></span></pre></div>\n<h3>2.处理 extract-text-webpack-plugin</h3>\n<p>现在你试一下改变 src/app.scss 的内容，你会发现页面不动了，你无论怎么改，页面都不会改变，也不会刷新。</p>\n<p>之前我们是用 extract-text-webpack-plugin 这个插件来处理 CSS 的，在用 HMR 的时候要先把它关闭一下。</p>\n<p>用一个参数 disable: true 就可以关闭掉。</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">new</span> <span class=\"pl-en\">ExtractTextPlugin</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>style.css<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>变成</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">new</span> <span class=\"pl-en\">ExtractTextPlugin</span>({\n  filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style.css<span class=\"pl-pds\">'</span></span>,\n  disable<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n}),</pre></div>\n<p>然后把处理 scss 文件的 loader 部分变成类似下面这样：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">...</span>\n  test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>scss<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n  use<span class=\"pl-k\">:</span> <span class=\"pl-smi\">ExtractTextPlugin</span>.<span class=\"pl-en\">extract</span>({\n    fallback<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>resolve-url-loader may be chained before sass-loader if necessary</span>\n    use<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass-loader<span class=\"pl-pds\">'</span></span>]\n  })\n<span class=\"pl-k\">...</span>\n</pre></div>\n<p>变成</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">...</span>\n  test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>scss<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n  use<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass-loader<span class=\"pl-pds\">'</span></span>]\n<span class=\"pl-k\">...</span></pre></div>\n<p>再试试，能够生效。</p>\n<p>为什么要关闭呢这个插件呢？</p>\n<p>其实想想也能知道，在开发环境下，用不用 extract-text-webpack-plugin 这个插件，意义不大，你把 css 变不变成一个文件，关系不大，开发环境只要能调效，效果能够看到就可以，但是生产环境需要这个插件，我们总不能开发环境不使用这个插件，也导致生产环境也不使用吧？</p>\n<p>那如何解决这个问题呢？也就是说让生产环境使用这个插件，而开发环境不使用.</p>\n<h2>生产环境 vs 开发环境</h2>\n<p>要让生产环境使用 extract-text-webpack-plugin 这个插件，而开发环境不使用，如何做到呢？</p>\n<p>其实原理很简单，只要能区分出哪个是开发环境，哪个是生产环境就可以，只要判断是生产环境的时候就用，不是的话...</p>\n<h3>1. 增加环境变量</h3>\n<p>首先来看一下之前的开发环境和生产环境分别使用的编译命令：</p>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scripts<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> {\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dev<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>webpack-dev-server<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>prod<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>webpack -p<span class=\"pl-pds\">\"</span></span>\n},</pre></div>\n<p>分别是开发环境使用的 npm run dev 命令和生产环境使用的 npm run prod 命令。</p>\n<p>我们把它改成下面这样：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scripts<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> {\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dev<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>webpack-dev-server<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>prod<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NODE_ENV=production webpack -p<span class=\"pl-pds\">\"</span></span>\n},</pre></div>\n<p>开发环境的部分不变，生产环境的加了一个环境变量：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">NODE_ENV</span><span class=\"pl-k\">=</span>production</pre></div>\n<p>很简单，NODE_ENV 是变量名，而 production 是 NODE_ENV 是这个变量的值，这些都不是固定的，你可以改成你想要的任意内容，只要能引用到就行了。</p>\n<p>那么我们如何来使用这个变量呢？</p>\n<h3>2.使用环境变量</h3>\n<p>要引用我们之前创建的环境变量，也蛮简单的。</p>\n<p>在 webpack.config.js 文件中：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> isProd <span class=\"pl-k\">=</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-smi\">env</span>.<span class=\"pl-c1\">NODE_ENV</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>production<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true or false</span></pre></div>\n<p>process.env.NODE_ENV 就能得到之前设置的变量，如果运行的是 npm run prod，那么 process.env.NODE_ENV为true</p>\n<p>上一节，我们有类似下面这样的两段关于 extract-text-webpack-plugin 这个插件的代码。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">new</span> <span class=\"pl-en\">ExtractTextPlugin</span>({\n  filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style.css<span class=\"pl-pds\">'</span></span>,\n  disable<span class=\"pl-k\">:</span> <span class=\"pl-c1\">false</span>\n}),\n\n  test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>scss<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n  use<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass-loader<span class=\"pl-pds\">'</span></span>]</pre></div>\n<p>我们把 webpack.config.js 中的代码更改如下：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">...</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 线上线下切换 css-loder</span>\n<span class=\"pl-k\">var</span> isProd <span class=\"pl-k\">=</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-smi\">env</span>.<span class=\"pl-c1\">NODE_ENV</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>production<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true or false</span>\n<span class=\"pl-k\">var</span> cssDev <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass-loader<span class=\"pl-pds\">'</span></span>];\n<span class=\"pl-k\">var</span> cssProd <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ExtractTextPlugin</span>.<span class=\"pl-en\">extract</span>({\n  fallback<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>,\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>resolve-url-loader may be chained before sass-loader if necessary</span>\n  use<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass-loader<span class=\"pl-pds\">'</span></span>]\n})\n\n<span class=\"pl-k\">var</span> cssConfig <span class=\"pl-k\">=</span> isProd <span class=\"pl-k\">?</span> cssProd <span class=\"pl-k\">:</span> cssDev;\n\n<span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">...</span>\n  plugins<span class=\"pl-k\">:</span> [\n    <span class=\"pl-k\">...</span>\n    <span class=\"pl-k\">new</span> <span class=\"pl-en\">ExtractTextPlugin</span>({\n      filename<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style.css<span class=\"pl-pds\">'</span></span>,\n      disable<span class=\"pl-k\">:</span> <span class=\"pl-k\">!</span>isProd\n    }),\n    <span class=\"pl-k\">...</span>\n  ],\n  module<span class=\"pl-k\">:</span> {\n    rules<span class=\"pl-k\">:</span> [\n      {\n        test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>scss<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n        use<span class=\"pl-k\">:</span> cssConfig\n      },\n      <span class=\"pl-k\">...</span>\n    ]\n  }\n};\n\n</pre></div>\n<p>只要能区别出不同的环境，使用不同的配置内容就可以了。</p>\n<p>现在就可以放心地使用 npm run dev 和 npm run prod 命令了，再也不用临时关掉一些插件了。</p>\n<h3>3.window平台使用</h3>\n<p>windows平台：不能直接使用NODE_ENV, 步骤如下：</p>\n<p>1.npm install cross-env --save-dev</p>\n<p>2.命令改为<br>\n\"prod\": \"cross-env NODE_ENV=production webpack -p\"</p>\n<h2>如何打包图片</h2>\n<p><strong>src/app.scss</strong></p>\n<div class=\"highlight highlight-source-js\"><pre>body {\n  background<span class=\"pl-k\">:</span> <span class=\"pl-en\">url</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./images/logo.png<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c1\">0</span> <span class=\"pl-c1\">0</span> no<span class=\"pl-k\">-</span>repeat;\n  <span class=\"pl-k\">...</span>\n}</pre></div>\n<p>然后 npm run dev，你会发现类似下面的错误：<br>\n只要找到适合的 loader 来处理扩展名为 png 的图片文件即可。</p>\n<h3>1.file-loader</h3>\n<blockquote>\n<p><a href=\"https://github.com/webpack-contrib/file-loader\">file-loader</a></p>\n</blockquote>\n<p>安装</p>\n<div class=\"highlight highlight-source-js\"><pre>$ npm install <span class=\"pl-k\">--</span>save<span class=\"pl-k\">-</span>dev file<span class=\"pl-k\">-</span>loader</pre></div>\n<h3>2. file-loader 的参数</h3>\n<p>其实，file-loader 是可以带参数的，例如下面这样：</p>\n<div class=\"highlight highlight-source-js\"><pre>test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>(gif<span class=\"pl-k\">|</span>png<span class=\"pl-k\">|</span>jpe<span class=\"pl-k\">?</span>g<span class=\"pl-k\">|</span>svg)<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span>i</span>,\nuse<span class=\"pl-k\">:</span> [\n  {\n    loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>file-loader<span class=\"pl-pds\">'</span></span>,\n    options<span class=\"pl-k\">:</span> {\n      name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>[name].[ext]<span class=\"pl-pds\">'</span></span>,\n      outputPath<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>images/<span class=\"pl-pds\">'</span></span>\n    }\n  },</pre></div>\n<p><code>/\\.(gif|png|jpe?g|svg)$/i</code> 表示可以处理好多图片的格式，毕竟不只是 png 才是图片，别的扩展名的文件也可能是图片嘛。</p>\n<p><code>[name]</code> 代表文件名，<code>[ext]</code> 代表文件扩展名，<code>outputPath</code> 是输出的路径。</p>\n<h3>3.解析 html 代码里面 img 的标签</h3>\n<p>忘了一个重要的地方，之前我们是在 CSS 里引用图片作为背景的，但是，我们经常是在 html 直接使用 src 标签</p>\n<p>例如下面这样：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&lt;</span>img src<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./images/money-bag.svg<span class=\"pl-pds\">\"</span></span> alt<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> height<span class=\"pl-k\">=</span><span class=\"pl-c1\">50</span><span class=\"pl-k\">&gt;</span></pre></div>\n<p><strong>src/index.html</strong></p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;!DOCTYPE html&gt;\n&lt;<span class=\"pl-ent\">html</span> <span class=\"pl-e\">lang</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>en<span class=\"pl-pds\">\"</span></span>&gt;\n&lt;<span class=\"pl-ent\">head</span>&gt;\n  &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">charset</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>UTF-8<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">title</span>&gt;&lt;/<span class=\"pl-ent\">title</span>&gt;\n&lt;/<span class=\"pl-ent\">head</span>&gt;\n&lt;<span class=\"pl-ent\">body</span>&gt;\n  &lt;<span class=\"pl-ent\">img</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./images/money-bag.svg<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">alt</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">height</span>=<span class=\"pl-s\">50</span>&gt;\n&lt;/<span class=\"pl-ent\">body</span>&gt;\n&lt;/<span class=\"pl-ent\">html</span>&gt;</pre></div>\n<p>然而结果是这样的：<strong>404了，文件找不到，没有成功。</strong></p>\n<p>其实缺少了一个在 html 代码里处理 img 标签的 loader。</p>\n<p>这个 loader 是 <a href=\"https://github.com/webpack-contrib/html-loader\">html-loader</a></p>\n<p>官方对它的定义是这样的：</p>\n<blockquote>\n<p>Exports HTML as string. HTML is minimized when the compiler demands.</p>\n</blockquote>\n<p>大概意思是说，把 html 变成导出成字符串的过程中，还能进行压缩处理（minimized）。</p>\n<p>现在我们来加上这个 loader。</p>\n<p>先安装。</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install --save-dev html-loader</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">...</span>\n{\n  test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>(gif<span class=\"pl-k\">|</span>png<span class=\"pl-k\">|</span>jpe<span class=\"pl-k\">?</span>g<span class=\"pl-k\">|</span>svg)<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span>i</span>,\n  use<span class=\"pl-k\">:</span> [\n    {\n      loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>file-loader<span class=\"pl-pds\">'</span></span>,\n      options<span class=\"pl-k\">:</span> {\n        name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>[name].[ext]<span class=\"pl-pds\">'</span></span>,\n        outputPath<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>images/<span class=\"pl-pds\">'</span></span>\n      }\n    },\n  ]\n},\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 下面几行才是 html-loader 的配置内容</span>\n{\n  test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>html<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n  use<span class=\"pl-k\">:</span> [ {\n    loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>html-loader<span class=\"pl-pds\">'</span></span>,\n    options<span class=\"pl-k\">:</span> {\n      minimize<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n    }\n  }],\n}\n<span class=\"pl-k\">...</span></pre></div>\n<p>再试试发现就可以了。</p>\n<h3>4. 压缩图片</h3>\n<p>有时候图片太大，我们输出到生产环境的时候，希望可以让图片文件的体积小点，webpack 也可以轻易办到，就是自动压缩图片，然后生产环境拿到的图片就会很小。</p>\n<p>还是用一个插件，这个插件叫 <a href=\"https://github.com/tcoopman/image-webpack-loader\">image-webpack-loader</a>。</p>\n<p>这个插件主要是来压缩图片文件的。</p>\n<p>安装。</p>\n<div class=\"highlight highlight-source-shell\"><pre>$  npm install image-webpack-loader --save-dev</pre></div>\n<p><strong>webpack.config.js</strong></p>\n<div class=\"highlight highlight-source-js\"><pre>{\n  test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>(gif<span class=\"pl-k\">|</span>png<span class=\"pl-k\">|</span>jpe<span class=\"pl-k\">?</span>g<span class=\"pl-k\">|</span>svg)<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span>i</span>,\n  use<span class=\"pl-k\">:</span> [\n    {\n      loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>file-loader<span class=\"pl-pds\">'</span></span>,\n      options<span class=\"pl-k\">:</span> {\n        name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>[name].[ext]<span class=\"pl-pds\">'</span></span>,\n        outputPath<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>images/<span class=\"pl-pds\">'</span></span>\n      }\n    },\n    {\n      loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>image-webpack-loader<span class=\"pl-pds\">'</span></span>,\n      options<span class=\"pl-k\">:</span> {\n        bypassOnDebug<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n      }\n    }\n  ]\n},\n{\n  test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>html<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n  use<span class=\"pl-k\">:</span> [ {\n    loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>html-loader<span class=\"pl-pds\">'</span></span>,\n    options<span class=\"pl-k\">:</span> {\n      minimize<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>\n    }\n  }],\n}</pre></div>\n<p>源文件的图片大小情况是这样的：</p>\n<div class=\"highlight highlight-source-js\"><pre>$ ls <span class=\"pl-k\">-</span>lh src<span class=\"pl-k\">/</span>images\ntotal <span class=\"pl-c1\">256</span>\n<span class=\"pl-k\">-</span>rw<span class=\"pl-k\">-</span>r<span class=\"pl-k\">--</span>r<span class=\"pl-k\">--</span>@ <span class=\"pl-c1\">1</span> hfpp2012  staff   <span class=\"pl-ii\">112K</span> Nov  <span class=\"pl-c1\">3</span> <span class=\"pl-c1\">23</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">10</span> <span class=\"pl-smi\">logo</span>.<span class=\"pl-smi\">png</span>\n<span class=\"pl-k\">-</span>rw<span class=\"pl-k\">-</span>r<span class=\"pl-k\">--</span>r<span class=\"pl-k\">--</span>@ <span class=\"pl-c1\">1</span> hfpp2012  staff    <span class=\"pl-ii\">11K</span> Dec  <span class=\"pl-c1\">4</span> <span class=\"pl-c1\">16</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">32</span> money<span class=\"pl-k\">-</span><span class=\"pl-smi\">bag</span>.<span class=\"pl-smi\">svg</span></pre></div>\n<p>而压缩后（npm run prod）：</p>\n<div class=\"highlight highlight-source-js\"><pre>$ ls <span class=\"pl-k\">-</span>lh dist<span class=\"pl-k\">/</span>images\ntotal <span class=\"pl-c1\">96</span>\n<span class=\"pl-k\">-</span>rw<span class=\"pl-k\">-</span>r<span class=\"pl-k\">--</span>r<span class=\"pl-k\">--</span>  <span class=\"pl-c1\">1</span> hfpp2012  staff    <span class=\"pl-ii\">33K</span> Dec  <span class=\"pl-c1\">4</span> <span class=\"pl-c1\">21</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">34</span> <span class=\"pl-smi\">logo</span>.<span class=\"pl-smi\">png</span>\n<span class=\"pl-k\">-</span>rw<span class=\"pl-k\">-</span>r<span class=\"pl-k\">--</span>r<span class=\"pl-k\">--</span>  <span class=\"pl-c1\">1</span> hfpp2012  staff   <span class=\"pl-ii\">8</span>.<span class=\"pl-ii\">5K</span> Dec  <span class=\"pl-c1\">4</span> <span class=\"pl-c1\">21</span><span class=\"pl-k\">:</span><span class=\"pl-c1\">34</span> money<span class=\"pl-k\">-</span><span class=\"pl-smi\">bag</span>.<span class=\"pl-smi\">svg</span></pre></div>\n<p>由上面的对比可知，压缩后体积减少了一些。</p>\n<p>当然这个插件，肯定还有更多的用法，具体查看 readme 文档吧。</p>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://www.rails365.net/playlists/webpack-3-ling-ji-chu-ru-men-shi-pin-jiao-cheng\" rel=\"nofollow\">https://www.rails365.net/playlists/webpack-3-ling-ji-chu-ru-men-shi-pin-jiao-cheng</a></li>\n<li><a href=\"https://github.com/ruanyf/webpack-demos\">https://github.com/ruanyf/webpack-demos</a></li>\n<li><a href=\"https://github.com/meishadevs/webpack-demos/blob/master/README.md\">https://github.com/meishadevs/webpack-demos/blob/master/README.md</a></li>\n</ul>\n<h4>补充</h4>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/c0bec50ec385\" rel=\"nofollow\">https://www.jianshu.com/p/c0bec50ec385</a></li>\n</ul>"
  },
  {
    "id": 32,
    "title": "我到底为什么要使用react等前端框架？",
    "labels": "观点与感想",
    "created_at": "2018-05-31T02:25:25Z",
    "updated_at": "2019-12-30T04:43:49Z",
    "body_html": "<h2>React</h2>\n<ol>\n<li>它是什么？能做什么？<br>\nReact 是专注于复杂 UI 层业务的前端框架， 基于 Virtual DOM 的 diff 渲染以最小的代价来更新dom(高效渲染)。</li>\n</ol>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/31809713\" rel=\"nofollow\">网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？<br>\n</a></li>\n<li><a href=\"https://stackoverflow.com/questions/21109361/why-is-reacts-concept-of-virtual-dom-said-to-be-more-performant-than-dirty-mode/23995928#23995928\" rel=\"nofollow\">stackoverflow virtual-dom 作者回答</a></li>\n</ul>\n<ol start=\"2\">\n<li>它存在的理由是什么？解决了什么样的问题、满足了什么样的需求？</li>\n</ol>\n<ul>\n<li>数据驱动的 Component</li>\n<li>virtual dom</li>\n<li>生命周期</li>\n<li>工程化思想</li>\n</ul>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/47161776\" rel=\"nofollow\">我们为什么需要 React？</a></li>\n</ul>\n<ol start=\"3\">\n<li>它的适用场景是什么？优缺点是什么？</li>\n</ol>\n<ul>\n<li>大型项目，前端层复杂</li>\n</ul>\n<blockquote>\n<p>缺点：单独 UI 层的薄弱性，需要采用整个技术栈(过渡不够平滑)</p>\n</blockquote>\n<ol start=\"4\">\n<li>它怎么用？最佳实践是什么？</li>\n<li>它的原理是什么？<br>\n本身相当于 mvc 结构中的 v 层,并非 MVVM ，借助自建的事件机制和单向数据流实现更新，Virtual DOM 应用 + jsx</li>\n</ol>\n<h3>参考链接</h3>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/12daf3731f9e\" rel=\"nofollow\">https://www.jianshu.com/p/12daf3731f9e</a></li>\n<li><a href=\"https://blog.csdn.net/u013510838/article/details/61224760\" rel=\"nofollow\">https://blog.csdn.net/u013510838/article/details/61224760</a></li>\n<li><a href=\"http://web.jobbole.com/87538/\" rel=\"nofollow\">http://web.jobbole.com/87538/</a></li>\n</ul>"
  },
  {
    "id": 31,
    "title": "移动端的300毫秒点击延迟和点击穿透问题",
    "labels": "开发者笔记",
    "created_at": "2018-05-31T02:24:31Z",
    "updated_at": "2018-06-12T09:13:51Z",
    "body_html": "<h2>300毫秒延迟来历</h2>\n<p>在早期iphone设备中为了更好的适应设备网页的比例，加入双击缩放会将浏览器的网页缩放至原始比例。</p>\n<p>当浏览器单击一次屏幕，浏览器需要去判断用户是想要打开链接还是会选择双击缩放，这就导致需要等待300毫秒来做进一步的判断。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕.</p>\n<p>在现今的移动web中，300毫秒的延迟影响了用户体验，大家都在想办法优化这个体验,<a href=\"https://thx.github.io/mobile/300ms-click-delay\" rel=\"nofollow\">300 毫秒点击延迟的来龙去脉</a>阐述的更加清楚明白。</p>\n<h2>解决方法之<a href=\"https://github.com/hammerjs/hammer.js\">Hammer.js</a></h2>\n<p>hammer.js是一款开源的移动端脚本框架，他可以完美的实现在移端开发的大多数事件，如：点击、滑动、拖动、多点触控等事件。不需要依赖任何其他的框架，并且整个框架非常小，在使用时非常简单，代码示例如下：</p>\n<p><strong>hammer中的tap事件</strong></p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;!DOCTYPE html&gt;\n&lt;<span class=\"pl-ent\">html</span>&gt;\n\n&lt;<span class=\"pl-ent\">head</span>&gt;\n    &lt;<span class=\"pl-ent\">meta</span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>viewport<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">content</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>width=device-width<span class=\"pl-pds\">\"</span></span> /&gt;\n    &lt;<span class=\"pl-ent\">title</span>&gt;Tap&lt;/<span class=\"pl-ent\">title</span>&gt;\n    &lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./js/hammer.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n    &lt;<span class=\"pl-ent\">style</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/css<span class=\"pl-pds\">\"</span></span>&gt;<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">        <span class=\"pl-ent\">html</span>,</span>\n<span class=\"pl-s1\">        <span class=\"pl-ent\">body</span> {</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">margin</span></span>: <span class=\"pl-c1\">0<span class=\"pl-k\">px</span></span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">padding</span></span>: <span class=\"pl-c1\">0<span class=\"pl-k\">px</span></span>;</span>\n<span class=\"pl-s1\">        }</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">        <span class=\"pl-e\">.test</span> {</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">50<span class=\"pl-k\">%</span></span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">#ffd800</span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">left</span>;</span>\n<span class=\"pl-s1\">        }</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">        <span class=\"pl-e\">.result</span> {</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">width</span></span>: <span class=\"pl-c1\">100<span class=\"pl-k\">%</span></span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">height</span></span>: <span class=\"pl-c1\">50<span class=\"pl-k\">%</span></span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">background</span></span>: <span class=\"pl-c1\">#b6ff00</span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\"><span class=\"pl-c1\">text-align</span></span>: <span class=\"pl-c1\">left</span>;</span>\n<span class=\"pl-s1\">        }</span>\n<span class=\"pl-s1\">    </span>&lt;/<span class=\"pl-ent\">style</span>&gt;\n&lt;/<span class=\"pl-ent\">head</span>&gt;\n\n&lt;<span class=\"pl-ent\">body</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>&gt;事件区域&lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>result<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>result<span class=\"pl-pds\">\"</span></span>&gt;事件结果：点击触发\n        &lt;<span class=\"pl-ent\">br</span> /&gt;\n    &lt;/<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">script</span>&gt;\n    &lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text/javascript<span class=\"pl-pds\">\"</span></span>&gt;<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>创建一个新的hammer对象并且在初始化时指定要处理的dom元素</span></span>\n<span class=\"pl-s1\">        <span class=\"pl-k\">var</span> hammertime <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Hammer</span>(<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>));</span>\n<span class=\"pl-s1\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>添加事件</span></span>\n<span class=\"pl-s1\">        <span class=\"pl-smi\">hammertime</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tap<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">e</span>) {</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>result<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tap点击触发了，长按无效<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>().<span class=\"pl-c1\">getTime</span>() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;br /&gt;<span class=\"pl-pds\">\"</span></span>;</span>\n<span class=\"pl-s1\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span>控制台输出</span></span>\n<span class=\"pl-s1\">            <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(e);</span>\n<span class=\"pl-s1\">        });</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">        <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#test<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-en\">onclick</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> () {</span>\n<span class=\"pl-s1\">            <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>result<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>原生点击触发了，长按无效<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>().<span class=\"pl-c1\">getTime</span>() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;br /&gt;<span class=\"pl-pds\">\"</span></span>;</span>\n<span class=\"pl-s1\">        }</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">        <span class=\"pl-en\">$</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#test<span class=\"pl-pds\">\"</span></span>).<span class=\"pl-c1\">click</span>(<span class=\"pl-k\">function</span> () {</span>\n<span class=\"pl-s1\">            <span class=\"pl-en\">$</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#result<span class=\"pl-pds\">\"</span></span>)[<span class=\"pl-c1\">0</span>].<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">+=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jq点击触发了，长按无效<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>().<span class=\"pl-c1\">getTime</span>() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;br /&gt;<span class=\"pl-pds\">\"</span></span>;</span>\n<span class=\"pl-s1\">        })</span>\n<span class=\"pl-s1\">    </span>&lt;/<span class=\"pl-ent\">script</span>&gt;\n&lt;/<span class=\"pl-ent\">body</span>&gt;\n\n&lt;/<span class=\"pl-ent\">html</span>&gt;\n})\n\n</pre></div>\n<h3>设备测试</h3>\n<p>chrome和qq都不明显看不出来，safari...</p>\n<p><strong>chrome</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/aa5fe543ec636c94d4efdb9497d8ac378d8f1d2d/68747470733a2f2f7869616f7975657975653136352e6769746875622e696f2f7374617469632f626c6f672f7461702f6368726f6d652e706e67\"><img src=\"https://camo.githubusercontent.com/aa5fe543ec636c94d4efdb9497d8ac378d8f1d2d/68747470733a2f2f7869616f7975657975653136352e6769746875622e696f2f7374617469632f626c6f672f7461702f6368726f6d652e706e67\" alt=\"image\" data-canonical-src=\"https://xiaoyueyue165.github.io/static/blog/tap/chrome.png\" style=\"max-width:100%;\"></a></p>\n<p><strong>qq</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/4ab134df2eb52c01994d297e121822b26c04f88f/68747470733a2f2f7869616f7975657975653136352e6769746875622e696f2f7374617469632f626c6f672f7461702f71712e706e67\"><img src=\"https://camo.githubusercontent.com/4ab134df2eb52c01994d297e121822b26c04f88f/68747470733a2f2f7869616f7975657975653136352e6769746875622e696f2f7374617469632f626c6f672f7461702f71712e706e67\" alt=\"image\" data-canonical-src=\"https://xiaoyueyue165.github.io/static/blog/tap/qq.png\" style=\"max-width:100%;\"></a></p>\n<h2>自己写一个tap方法</h2>\n<p>在这里利用是否支持touch事件来做分别，支持的话使用touch事件，不支持则使用mouse事件，最后触发时间范围小于500毫秒的回调函数，也是可以使用的！</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">tap</span>(<span class=\"pl-smi\">ele</span>, <span class=\"pl-smi\">touchFn</span>) {\n\n  <span class=\"pl-k\">var</span> SupportsTouches <span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>createTouch<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">document</span>), <span class=\"pl-c\"><span class=\"pl-c\">//</span>判断是否支持触摸</span>\n    StartEvent <span class=\"pl-k\">=</span> SupportsTouches <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>touchstart<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mousedown<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c\"><span class=\"pl-c\">//</span>支持触摸式使用相应的事件替代</span>\n    EndEvent <span class=\"pl-k\">=</span> SupportsTouches <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>touchend<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mouseup<span class=\"pl-pds\">\"</span></span>;\n\n  <span class=\"pl-k\">var</span> startTime <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>,\n    endTime <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;\n  <span class=\"pl-smi\">ele</span>.<span class=\"pl-c1\">addEventListener</span>(StartEvent, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">e</span>) {\n\n    startTime <span class=\"pl-k\">=</span> <span class=\"pl-smi\">e</span>.<span class=\"pl-smi\">timeStamp</span>\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>startTime <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>().<span class=\"pl-c1\">getTime</span>())\n\n  })\n  <span class=\"pl-smi\">ele</span>.<span class=\"pl-c1\">addEventListener</span>(EndEvent, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">e</span>) {\n    <span class=\"pl-k\">var</span> context <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n\n    endTime <span class=\"pl-k\">=</span> <span class=\"pl-smi\">e</span>.<span class=\"pl-smi\">timeStamp</span>\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>endTime <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>().<span class=\"pl-c1\">getTime</span>())\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>间距=<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> (endTime <span class=\"pl-k\">-</span> startTime))\n    <span class=\"pl-k\">if</span> (endTime <span class=\"pl-k\">-</span> startTime <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">500</span>) {\n      <span class=\"pl-en\">touchFn</span>();\n    }\n\n  })\n}\n\n<span class=\"pl-en\">tap</span>(<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>div<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-k\">function</span> () {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>complate <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>().<span class=\"pl-c1\">getTime</span>())\n})\n</pre></div>\n<h3>浏览器打印</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/6f7d98352cb8c12b36715e2a25849f04df1c0a66/68747470733a2f2f7869616f7975657975653136352e6769746875622e696f2f7374617469632f626c6f672f7461702f6d616b655461702e706e67\"><img src=\"https://camo.githubusercontent.com/6f7d98352cb8c12b36715e2a25849f04df1c0a66/68747470733a2f2f7869616f7975657975653136352e6769746875622e696f2f7374617469632f626c6f672f7461702f6d616b655461702e706e67\" alt=\"image\" data-canonical-src=\"https://xiaoyueyue165.github.io/static/blog/tap/makeTap.png\" style=\"max-width:100%;\"></a></p>\n<h2>Userful links</h2>\n<ul>\n<li><a href=\"https://thx.github.io/mobile/300ms-click-delay\" rel=\"nofollow\">https://thx.github.io/mobile/300ms-click-delay</a></li>\n<li><a href=\"https://www.jianshu.com/p/16d3e4f9b2a9\" rel=\"nofollow\">https://www.jianshu.com/p/16d3e4f9b2a9</a></li>\n</ul>"
  },
  {
    "id": 30,
    "title": "我所知道的JavaScript中的Event Loop",
    "labels": "JavaScript",
    "created_at": "2018-05-27T13:09:58Z",
    "updated_at": "2019-09-25T16:51:36Z",
    "body_html": "<h2>单线程的 Javascript</h2>\n<p>javascript 是一门单线程语言</p>\n<h2>任务队列</h2>\n<p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p>\n<p>于是任务又分为：</p>\n<ul>\n<li>同步任务</li>\n<li>异步任务</li>\n</ul>\n<p>同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有\"任务队列\"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p>\n<h2>什么是 Event Loop</h2>\n<p><code>Event Loop</code>， 事件循环，是 Javascript 的执行机制，在主线程空闲的时候从 <code>task queue</code> 中取出事件来执行，遵守先进先出的原则。这个过程是循环不断的，所以整个的这种运行机制又称为 Event Loop（事件循环）。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/12ff8c30f223d45244e016c8c037c495779976d3/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737633431663065716f6a3230677030656e6467362e6a7067\"><img src=\"https://camo.githubusercontent.com/12ff8c30f223d45244e016c8c037c495779976d3/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316737633431663065716f6a3230677030656e6467362e6a7067\" alt=\"bg2014100802.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7c41f0eqoj20gp0endg6.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>宏任务与微任务</h2>\n<p>当主线程空闲时（执行栈为空），主线程会先查看微任务队列，执行清空后再查看宏任务队列，并执行清空，如此反复循环。</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/8d19b112d15cf5b843546c115375485b0806fcfa/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167376334357869346a6d6a3231347330793661626d2e6a7067\"><img src=\"https://camo.githubusercontent.com/8d19b112d15cf5b843546c115375485b0806fcfa/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167376334357869346a6d6a3231347330793661626d2e6a7067\" alt=\"15fdcea13361a1ec.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7c45xi4jmj214s0y6abm.jpg\" style=\"max-width:100%;\"></a></p>\n<p>micro-task(微任务)：Promise、process.nextTick、Object.observe、MutationObserver</p>\n<p>macro-task(宏任务)：script 代码块、setTimeout、setInterval、I/O、UI rendering</p>\n<h3>Demo 举例</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">new</span> <span class=\"pl-en\">Promise</span>(<span class=\"pl-smi\">resolve</span> <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">1</span>);\n  <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">2</span>);\n  }, <span class=\"pl-c1\">0</span>);\n  <span class=\"pl-c1\">Promise</span>.<span class=\"pl-c1\">resolve</span>().<span class=\"pl-c1\">then</span>(() <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">3</span>);\n  });\n  <span class=\"pl-en\">resolve</span>();\n}).<span class=\"pl-c1\">then</span>(() <span class=\"pl-k\">=&gt;</span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">4</span>);\n});\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">5</span>);</pre></div>\n<blockquote>\n<p><code>new Promise</code>在实例化的过程中所执行的代码都是同步进行的，故会立即执行，而<code>then</code>中注册的回调是异步执行的(在<code>resolve</code>方法的调用下才会执行)</p>\n</blockquote>\n<p>下面是代码的执行分析：</p>\n<ul>\n<li>第一次事件循环开始\n<ul>\n<li>这段代码作为宏任务，进入主线程</li>\n<li><code>new Promise</code> 立即执行 log：1</li>\n<li>遇到 <code>setTimeout</code>，注册其回调函数后分发到 宏任务队列</li>\n<li>微任务队列 + <code>Promise.resolve().then()</code> 的回调函数</li>\n<li>微任务队列 + <code>Promise.resolve().then().then()</code> 的回调函数</li>\n<li>log: 5</li>\n<li>开始执行微任务\n<ul>\n<li><code>Promise.resolve().then()</code> =》 log:3</li>\n<li><code>Promise.resolve().then().then()</code> =》 log:4</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第一次事件循环结束，<code>task queue</code> 非空</li>\n<li>第二次事件循环开始\n<ul>\n<li>执行 宏任务 <code>setTimeout callback</code> log:2</li>\n<li>没有微任务</li>\n</ul>\n</li>\n<li>第二次事件循环结束， <code>task queue</code> 清空</li>\n<li>代码执行完毕</li>\n</ul>\n<h3>async/await 函数</h3>\n<p>因为 <code>async/await</code> 本质上还是基于 <code>Promise</code> 的一些封装，而 <code>Promise</code> 是属于微任务的一种。所以在实际使用上效果类似：async 函数在 await 之前的代码都是同步执行的，可以理解为 await 之前的代码属于<code>new Promise</code>时传入的代码，await 之后的所有代码都是在<code>Promise.then</code>中的回调。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">setTimeout</span>(<span class=\"pl-smi\">_</span> <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">4</span>));\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">main</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">1</span>);\n  <span class=\"pl-k\">await</span> <span class=\"pl-c1\">Promise</span>.<span class=\"pl-c1\">resolve</span>();\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-en\">main</span>();\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">2</span>);</pre></div>\n<p>下面是代码的执行分析：</p>\n<ul>\n<li>第一次事件循环开始\n<ul>\n<li>整段代码作为宏任务，进入主线程</li>\n<li>宏任务队列 + <code>setTimeout callback</code></li>\n<li>立即执行 async main,相当于 new Promise(),紧接着 log: 1,微任务队列 + Promise.then()</li>\n<li>log:2</li>\n<li>执行所有微任务 Promise.then() log:3</li>\n</ul>\n</li>\n<li>第一次事件循环结束， <code>task queue</code> 非空</li>\n<li>第二次事件循环开始\n<ul>\n<li>执行宏任务 <code>setTimeout callback</code> log:4</li>\n<li>没有微任务</li>\n</ul>\n</li>\n<li>第二次事件循环结束， <code>task queue</code> 为空</li>\n<li>代码执行完毕</li>\n</ul>\n<h2>Node.js 的 Event Loop</h2>\n<ul>\n<li>待完善</li>\n</ul>\n<h3>参考</h3>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" rel=\"nofollow\">JavaScript 运行机制详解：再谈 Event Loop</a></li>\n<li><a href=\"https://juejin.im/post/59e85eebf265da430d571f89\" rel=\"nofollow\">这一次，彻底弄懂 JavaScript 执行机制</a></li>\n<li><a href=\"https://juejin.im/post/5b73d7a6518825610072b42b\" rel=\"nofollow\">微任务、宏任务与 Event-Loop</a></li>\n</ul>"
  },
  {
    "id": 29,
    "title": "debug 技术",
    "labels": "开发者笔记",
    "created_at": "2018-05-27T10:45:16Z",
    "updated_at": "2019-12-23T16:52:45Z",
    "body_html": "<h2>通用</h2>\n<ul>\n<li><code>ctrl+p</code> chrome 查找当前网站已加载的资源文件</li>\n</ul>\n<h2>CLI</h2>\n<h3>create-react-app</h3>\n<ul>\n<li>Vscode 调试</li>\n</ul>\n<p>首先安装 <code>Debugger for Chrome</code> 插件，配置好<code>launch.json</code></p>\n<p>然后启动项目 <code>yarn start</code>, 按 <code>F5</code> 开始调试</p>\n<pre><code>// launch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Chrome\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\",\n      \"webRoot\": \"${workspaceRoot}/src\",\n      \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\"\n    }\n  ]\n}\n\n</code></pre>\n<h2>Node.js</h2>\n<p>Inspector 原理</p>\n<ul>\n<li>WebSockets 服务（监听命令）</li>\n<li>Inspector 协议</li>\n<li>Http 服务（获取元信息）</li>\n</ul>\n<h3>Chrome DevTools</h3>\n<ul>\n<li>访问 <code>chrome://inspect</code>,点击<code>配置</code>按钮，确保 Host Port 正确，然后点击 下方<code>inspect</code>按钮进入调试页面，打上断点后，在浏览器窗口打开监听的原始端口即可调试</li>\n<li>借助vscode 打印的端口号 （<code>node --inspect app.js</code>）访问端口 <code>localhost:9229/json</code>获取元信息,在浏览器中访问 <code>devtoolsFrontendUrl</code></li>\n<li>在 chrome <code>http://localhost:3000/</code>打开开发者页面，选择 <code>Elements</code>元素按钮左侧的 <code>Node.js</code>图标，可进入调试页面\n<ul>\n<li><code>Profiler</code>面板可以录制项目运行时间，优化项目</li>\n</ul>\n</li>\n</ul>\n<h3>Vscode</h3>\n<ul>\n<li>单文件启动方式： F5</li>\n<li>项目式，配置 launch.json，点击播放按钮</li>\n<li>vscode <code>ctrl+shift+p</code>打开<code>自动附加</code>，然后终端输入 <code>node --inspect app.js</code> 即打开调试模式</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>node --inspect app.js\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 在设置的断点处必须暂停执行</span>\nnode --inspect-brk app.js</pre></div>\n<h2>线上调试</h2>\n<h3>fiddler 代理本地前端资源</h3>\n<p>使用<code>fiddler</code> 将线上资源代理到本地调试,如：<code>css</code>, <code>js</code> , <code>image</code> 文件等等，步骤可<a href=\"https://blog.csdn.net/hahavslinb/article/details/78791219\" rel=\"nofollow\">参考</a></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/a491f09a40d26aa2724a868d602f7547de7c47bd/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167326b70387972356d6e6a323168613073336a78662e6a7067\"><img src=\"https://camo.githubusercontent.com/a491f09a40d26aa2724a868d602f7547de7c47bd/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167326b70387972356d6e6a323168613073336a78662e6a7067\" alt=\"\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g2kp8yr5mnj21ha0s3jxf.jpg\" style=\"max-width:100%;\"></a></p>\n<blockquote>\n<p>注意<br>\nfiddler 无法抓取 chrome 解决方法,代理插件选择“使用系统代理设置”选项<br>\n。fiddler 会自动给浏览器设置一个代理 127.0.0.1 端口 8888，并且记忆浏览器的代理设置，所有的请求先走 fiddler 代理，再走浏览器代理。<br>\n如果使用插件，可能会直接屏蔽了 fiddler 的代理，因此无法监听到请求了。</p>\n</blockquote>\n<h3><a href=\"https://github.com/wuchangming/spy-debugger\">spy-debugger</a></h3>\n<p>微信调试，各种 WebView 样式调试、手机浏览器的页面真机调试。便捷的远程调试手机页面、抓包工具，支持：HTTP/HTTPS，无需 USB 连接设备。</p>\n<h3>sourcemap</h3>\n<p>TODO...</p>\n<h4>参考资料</h4>\n<ul>\n<li><a href=\"https://www.imooc.com/learn/1093\" rel=\"nofollow\">imooc - node.js调试入门</a></li>\n<li><a href=\"https://github.com/nswbmw/node-in-debugging\">node-in-debugging</a></li>\n<li><a href=\"https://www.zhihu.com/question/43687153/answer/149944688\" rel=\"nofollow\">断点调试</a></li>\n<li><a href=\"https://stackoverflow.com/questions/42714449/vscode-debugging-with-create-react-app\" rel=\"nofollow\">stackoverflow - vscode-debugging-with-create-react-app</a></li>\n<li><a href=\"https://github.com/senntyou/blogs/blob/master/web-extend/8.md\">细说 js 压缩、sourcemap、通过 sourcemap 查找原始报错信息</a></li>\n</ul>"
  },
  {
    "id": 28,
    "title": "React组件通信",
    "labels": "JavaScript",
    "created_at": "2018-05-24T07:41:56Z",
    "updated_at": "2019-10-08T11:11:59Z",
    "body_html": "<h2>组件通信</h2>\n<p>在这里只讲 React 组件与组件本身的通信，组件通信主要分为三个部分：</p>\n<ul>\n<li>父组件向子组件通信：父组件向子组件传参或者是父组件调用子组件的方法</li>\n<li>子组件向父组件通信：子组件向父组件传参或者是子组件调用父组件的方法</li>\n<li>兄弟组件通信：兄弟组件之间相互传参或调用 建议不要有太深的的嵌套关系</li>\n</ul>\n<h2>父传子</h2>\n<ul>\n<li>\n<p>父组件向子组件传参<br>\n父组件向子组件参可以在子组件上绑定自定义属性，或者将父组件内部 state 的值进行绑定为子组件的属性值进行传递。</p>\n</li>\n<li>\n<p>父组件调用子组件的方法<br>\n在子组件上绑定 ref 属性，并在子组件内部定义方法（可接受参数），在父组件内部使用<code>this.refs.自定义属性值.函数方法名</code>，进行调用，可传递参数。</p>\n</li>\n<li>\n<p>components/parentToChild/Parent.js</p>\n</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 父组件</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">Child</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./child<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Parent</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      value<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  }\n  <span class=\"pl-en\">handleChange</span>(<span class=\"pl-smi\">e</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">value</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">e</span>.<span class=\"pl-c1\">target</span>.<span class=\"pl-c1\">value</span>;\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 调用子组件的方法</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">refs</span>.<span class=\"pl-smi\">c1</span>.<span class=\"pl-en\">changeChild</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">value</span>);\n  }\n  <span class=\"pl-en\">handleClick</span>() {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({\n      value<span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">value</span>\n    });\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        我是parent\n        <span class=\"pl-k\">&lt;</span>input onChange<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleChange</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>button className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>button<span class=\"pl-pds\">\"</span></span> onClick<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleClick</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)}<span class=\"pl-k\">&gt;</span>\n          通知\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>button<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>Child ref<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c1<span class=\"pl-pds\">\"</span></span> value<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">value</span>} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">Parent</span>;</pre></div>\n<ul>\n<li>components/parentToChild/child.js</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 子组件</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Child</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  }\n\n  <span class=\"pl-en\">changeChild</span>(<span class=\"pl-smi\">text</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({\n      text<span class=\"pl-k\">:</span> text\n    });\n  }\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>我是Child,接受来自父组件的传参：{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">props</span>.<span class=\"pl-c1\">value</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>br <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>我是child，来自父组件对组件内部函数的的调用：{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">text</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">Child</span>;</pre></div>\n<ul>\n<li>App.js</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./App.css<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">ParentToChild</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./components/parentToChild/Parent<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">App</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n        {<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 父传子 <span class=\"pl-c\">*/</span></span>}\n        {<span class=\"pl-c\"><span class=\"pl-c\">/*</span> &lt;ParentToChild /&gt; <span class=\"pl-c\">*/</span></span>}\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">App</span>;</pre></div>\n<h2>子传父</h2>\n<p>子组件向父组件传值，在被调用的子组件上先定义回调函数，再来单独的子组件上定义新的函数，通过 props 获取 callback 函数进行值传递.</p>\n<blockquote>\n<p>这里的 state 可以分别定义在父组件或组子组件上</p>\n</blockquote>\n<ul>\n<li>components/sonToFather/Father.js</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Father</span>\n\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">Son</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./son<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Father</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      value<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  }\n\n  <span class=\"pl-en\">setValue</span>(<span class=\"pl-smi\">param</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({\n      value<span class=\"pl-k\">:</span> param\n    });\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>Son setValue<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">setValue</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)}<span class=\"pl-k\">&gt;&lt;</span><span class=\"pl-k\">/</span>Son<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>我是Father,接受子组件的传参<span class=\"pl-k\">:</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">value</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">Father</span>;</pre></div>\n<ul>\n<li>components/sonToFather/son.js</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> son</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Son</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  }\n  <span class=\"pl-en\">handleChange</span>(<span class=\"pl-smi\">e</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">props</span>.<span class=\"pl-en\">setValue</span>(<span class=\"pl-smi\">e</span>.<span class=\"pl-c1\">target</span>.<span class=\"pl-c1\">value</span>);\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        我是Son\n        <span class=\"pl-k\">&lt;</span>input onChange<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleChange</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>br <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">Son</span>;</pre></div>\n<ul>\n<li>App.js</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./App.css<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">SonToFather</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./components/sonToFather/Father<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">App</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n        {<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 子传父 <span class=\"pl-c\">*/</span></span>}\n        <span class=\"pl-k\">&lt;</span>SonToFather <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">App</span>;</pre></div>\n<h2>兄弟组件</h2>\n<h3>利用共同的父组件</h3>\n<p>先将两个子组件<code>child1</code>和<code>child2</code>的参数传递给父组件，再由分发参数，通过<code>refs</code>寻找函数方法的方式进行函数调用传参。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Parent</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Parent</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      value<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  }\n\n  <span class=\"pl-en\">setValue2</span>(<span class=\"pl-smi\">param</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">refs</span>.<span class=\"pl-smi\">c1</span>.<span class=\"pl-en\">changeState</span>(param);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({\n      value<span class=\"pl-k\">:</span> param\n    });\n  }\n\n  <span class=\"pl-en\">setValue1</span>(<span class=\"pl-smi\">param</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">refs</span>.<span class=\"pl-smi\">c2</span>.<span class=\"pl-en\">changeState</span>(param);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({\n      value<span class=\"pl-k\">:</span> param\n    });\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>我是Parent,接受子组件的传参<span class=\"pl-k\">:</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">value</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n\n        <span class=\"pl-k\">&lt;</span>Child1 ref<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c1<span class=\"pl-pds\">\"</span></span> setValue<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">setValue1</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)}<span class=\"pl-k\">&gt;&lt;</span><span class=\"pl-k\">/</span>Child1<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>Child2 ref<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c2<span class=\"pl-pds\">\"</span></span> setValue<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">setValue2</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)}<span class=\"pl-k\">&gt;&lt;</span><span class=\"pl-k\">/</span>Child2<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Child1</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Child1</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  }\n  <span class=\"pl-en\">handleChange</span>(<span class=\"pl-smi\">e</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">props</span>.<span class=\"pl-en\">setValue</span>(<span class=\"pl-smi\">e</span>.<span class=\"pl-c1\">target</span>.<span class=\"pl-c1\">value</span>);\n  }\n  <span class=\"pl-en\">changeState</span>(<span class=\"pl-smi\">text</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ text<span class=\"pl-k\">:</span> text });\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        我是child1\n        <span class=\"pl-k\">&lt;</span>input onChange<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleChange</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>来自子组件<span class=\"pl-c1\">2</span>的调用<span class=\"pl-k\">:</span> {<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">text</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>br <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Child2</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Child2</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  }\n  <span class=\"pl-en\">handleChange</span>(<span class=\"pl-smi\">e</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">props</span>.<span class=\"pl-en\">setValue</span>(<span class=\"pl-smi\">e</span>.<span class=\"pl-c1\">target</span>.<span class=\"pl-c1\">value</span>);\n  }\n  <span class=\"pl-en\">changeState</span>(<span class=\"pl-smi\">text</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ text<span class=\"pl-k\">:</span> text });\n  }\n\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        我是child1\n        <span class=\"pl-k\">&lt;</span>input onChange<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleChange</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>来自子组件<span class=\"pl-c1\">1</span>的调用<span class=\"pl-k\">:</span> {<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">text</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>br <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}</pre></div>\n<h3>利用 Context</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 父组件</span>\n<span class=\"pl-k\">var</span> Parent <span class=\"pl-k\">=</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-en\">createClass</span>({\n  <span class=\"pl-en\">getChildContext</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> {\n      <span class=\"pl-en\">changeChildren1</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">text</span>) {\n        <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">refs</span>.<span class=\"pl-smi\">cp1</span>.<span class=\"pl-en\">changeState</span>(text);\n      }.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>),\n      <span class=\"pl-en\">changeChildren2</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">text</span>) {\n        <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">refs</span>.<span class=\"pl-smi\">cp2</span>.<span class=\"pl-en\">changeState</span>(text);\n      }.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>)\n    };\n  },\n  childContextTypes<span class=\"pl-k\">:</span> {\n    changeChildren1<span class=\"pl-k\">:</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-smi\">PropTypes</span>.<span class=\"pl-smi\">func</span>.<span class=\"pl-smi\">isRequired</span>,\n    changeChildren2<span class=\"pl-k\">:</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-smi\">PropTypes</span>.<span class=\"pl-smi\">func</span>.<span class=\"pl-smi\">isRequired</span>\n  },\n  <span class=\"pl-en\">render</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>Children1 ref<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cp1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>Children2 ref<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cp2<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n});</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span>子组件1</span>\n<span class=\"pl-k\">var</span> Children1 <span class=\"pl-k\">=</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-en\">createClass</span>({\n  <span class=\"pl-en\">getInitialState</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> {\n      text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  },\n  contextTypes<span class=\"pl-k\">:</span> {\n    changeChildren2<span class=\"pl-k\">:</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-smi\">PropTypes</span>.<span class=\"pl-smi\">func</span>.<span class=\"pl-smi\">isRequired</span>\n  },\n  <span class=\"pl-en\">changeState</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">text</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ text<span class=\"pl-k\">:</span> text });\n  },\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>输入事件</span>\n  <span class=\"pl-en\">change</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-c1\">event</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>调用子组件的方法</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">context</span>.<span class=\"pl-en\">changeChildren2</span>(<span class=\"pl-c1\">event</span>.<span class=\"pl-c1\">target</span>.<span class=\"pl-c1\">value</span>);\n  },\n  <span class=\"pl-en\">render</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>label<span class=\"pl-k\">&gt;</span>子组件<span class=\"pl-c1\">1</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>label<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>input type<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span> onChange<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">change</span>} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>来自子组件<span class=\"pl-c1\">2</span>的调用<span class=\"pl-k\">-</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">text</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n});</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span>子组件2</span>\n<span class=\"pl-k\">var</span> Children2 <span class=\"pl-k\">=</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-en\">createClass</span>({\n  <span class=\"pl-en\">getInitialState</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> {\n      text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    };\n  },\n  contextTypes<span class=\"pl-k\">:</span> {\n    changeChildren1<span class=\"pl-k\">:</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-smi\">PropTypes</span>.<span class=\"pl-smi\">func</span>.<span class=\"pl-smi\">isRequired</span>\n  },\n  <span class=\"pl-en\">changeState</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">text</span>) {\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({ text<span class=\"pl-k\">:</span> text });\n  },\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>输入事件</span>\n  <span class=\"pl-en\">change</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-c1\">event</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span>调用子组件的方法</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">context</span>.<span class=\"pl-en\">changeChildren1</span>(<span class=\"pl-c1\">event</span>.<span class=\"pl-c1\">target</span>.<span class=\"pl-c1\">value</span>);\n  },\n  <span class=\"pl-en\">render</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>label<span class=\"pl-k\">&gt;</span>子组件<span class=\"pl-c1\">2</span><span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>label<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>input type<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span> onChange<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">change</span>} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span>来自子组件<span class=\"pl-c1\">1</span>的调用<span class=\"pl-k\">-</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-c1\">text</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>p<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n});</pre></div>\n<h3>发布订阅</h3>\n<blockquote>\n<p>在 componentDidMount 事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在 componentWillUnmount 事件中取消事件的订阅;以常用的发布/订阅模式举例,借用 Node.js Events 模块的浏览器版实现</p>\n</blockquote>\n<p>先引入 node <code>events</code> 模块</p>\n<div class=\"highlight highlight-source-shell\"><pre>yarn add events</pre></div>\n<p>在 src 下新建一个 util 目录里面建一个 events.js</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">EventEmitter</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">new</span> <span class=\"pl-en\">EventEmitter</span>();</pre></div>\n<ul>\n<li>components/eventCenter/List1.js</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span>, { <span class=\"pl-smi\">Component</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">emitter</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../util/events<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">List1</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      message<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>List1<span class=\"pl-pds\">'</span></span>\n    };\n  }\n  <span class=\"pl-en\">componentDidMount</span>() {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 组件装载完成以后声明一个自定义事件</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">eventEmitter</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">addListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>changeMessage<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">message</span> <span class=\"pl-k\">=&gt;</span> {\n      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({\n        message\n      });\n    });\n  }\n  <span class=\"pl-en\">componentWillUnmount</span>() {\n    <span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">removeListener</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">eventEmitter</span>);\n  }\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        {<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">message</span>} {<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">props</span>.<span class=\"pl-smi\">msg</span>}\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">List1</span>;</pre></div>\n<ul>\n<li>components/eventCenter/List2.js</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span>, { <span class=\"pl-smi\">Component</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">emitter</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../util/events<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">List2</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">Component</span> {\n  <span class=\"pl-en\">handleClick</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">message</span> <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>changeMessage<span class=\"pl-pds\">'</span></span>, message);\n  };\n  <span class=\"pl-en\">handleClick2</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">message</span> <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>changeMessageApp<span class=\"pl-pds\">'</span></span>, message);\n  };\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>button onClick<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleClick</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>List2<span class=\"pl-pds\">'</span></span>)}<span class=\"pl-k\">&gt;</span>\n          点击我改变List1组件中显示信息\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>button<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>button onClick<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">handleClick2</span>.<span class=\"pl-en\">bind</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>List2App<span class=\"pl-pds\">'</span></span>)}<span class=\"pl-k\">&gt;</span>\n          点击我改变App组件中显示信息\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>button<span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">List2</span>;</pre></div>\n<p>APP.js</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./App.css<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">List1</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./components/eventCenter/List1<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">List2</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./components/eventCenter/List2<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">emitter</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./util/events<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">App</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-en\">constructor</span>(<span class=\"pl-smi\">props</span>) {\n    <span class=\"pl-c1\">super</span>(props);\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span> <span class=\"pl-k\">=</span> {\n      message<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>msgFromApp<span class=\"pl-pds\">'</span></span>\n    };\n  }\n  <span class=\"pl-en\">componentDidMount</span>() {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 组件装载完成以后声明一个自定义事件</span>\n    <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">eventEmitter</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">addListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>changeMessageApp<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">message</span> <span class=\"pl-k\">=&gt;</span> {\n      <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">setState</span>({\n        message\n      });\n    });\n  }\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> (\n      <span class=\"pl-k\">&lt;</span>div className<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>List1 msg<span class=\"pl-k\">=</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">message</span>} <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span>List2 <span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n      <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-c1\">default</span> <span class=\"pl-smi\">App</span>;</pre></div>\n<blockquote>\n<p>此方法还支持子父组件的传值，但考虑到消息中心的可维护性，易维护性，采用以下的方法</p>\n</blockquote>\n<h2>主流通信库</h2>\n<p>Redux || Mobx</p>\n<h3>参考文章</h3>\n<ul>\n<li><a href=\"https://github.com/sunyongjian/blog/issues/27\" data-hovercard-type=\"issue\" data-hovercard-url=\"/sunyongjian/blog/issues/27/hovercard\">sunyongjian - React组件之间的通信</a></li>\n<li><a href=\"https://juejin.im/post/5d2d41a7e51d454f723025ad\" rel=\"nofollow\">React小技巧汇总</a></li>\n</ul>"
  },
  {
    "id": 27,
    "title": "前端设计单位",
    "labels": "开发者笔记",
    "created_at": "2018-05-23T08:54:48Z",
    "updated_at": "2019-09-02T03:21:59Z",
    "body_html": "<h2>普遍原理</h2>\n<p>em是相对于文本字体大小来度量的；rem则是相对于html元素根节点的大小来度量的.</p>\n<h1>em</h1>\n<h3>在当em和px单位混用时候</h3>\n<ul>\n<li><code>p</code>元素与<code>h1</code>元素平级 =&gt; em参照16px计算</li>\n</ul>\n<div class=\"highlight highlight-text-html-basic\"><pre>   &lt;<span class=\"pl-ent\">h1</span>&gt;这是一段文字&lt;/<span class=\"pl-ent\">h1</span>&gt;\n   &lt;<span class=\"pl-ent\">p</span>&gt;这是第二段文字&lt;/<span class=\"pl-ent\">p</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">h1</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">20<span class=\"pl-k\">px</span></span>;\n}\n<span class=\"pl-ent\">p</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">2<span class=\"pl-k\">em</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span>2em = 32px<span class=\"pl-c\">*/</span></span>\n}</pre></div>\n<ul>\n<li>p元素与h1元素被div包含=》按照div</li>\n</ul>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span>&gt;\n    &lt;<span class=\"pl-ent\">h1</span>&gt;这是一段文字&lt;/<span class=\"pl-ent\">h1</span>&gt;\n    &lt;<span class=\"pl-ent\">p</span>&gt;这是第二段文字&lt;/<span class=\"pl-ent\">p</span>&gt;\n&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">div</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">18<span class=\"pl-k\">px</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span>1em = 18px<span class=\"pl-c\">*/</span></span>\n}\n<span class=\"pl-ent\">h1</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">20<span class=\"pl-k\">px</span></span> \n}\n<span class=\"pl-ent\">p</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">2<span class=\"pl-k\">em</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span>2em = 36px<span class=\"pl-c\">*/</span></span>\n}</pre></div>\n<ul>\n<li>html结构不变，为html添加font-size属性，甚至<code>!important</code>=&gt;div</li>\n</ul>\n<blockquote>\n<p>证明与rem单位不一样,不听从html根节点的</p>\n</blockquote>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">html</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">16<span class=\"pl-k\">px</span></span>;\n}\n<span class=\"pl-ent\">div</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">18<span class=\"pl-k\">px</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span>1em = 18px<span class=\"pl-c\">*/</span></span>\n}\n<span class=\"pl-ent\">h1</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">20<span class=\"pl-k\">px</span></span> \n}\n<span class=\"pl-ent\">p</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">2<span class=\"pl-k\">em</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span>2em = 36px<span class=\"pl-c\">*/</span></span>\n}</pre></div>\n<h3>都是em听谁的？</h3>\n<div class=\"highlight highlight-source-css\"><pre> <span class=\"pl-ent\">h1</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">2<span class=\"pl-k\">em</span></span>;     <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 1em = 16px <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c1\"><span class=\"pl-c1\">margin-bottom</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">em</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 1em = 32px <span class=\"pl-c\">*/</span></span>\n}\n\n<span class=\"pl-ent\">p</span> {\n    <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">em</span></span>;    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 1em = 16px <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c1\"><span class=\"pl-c1\">margin-bottom</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">em</span></span>;<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 1em = 16px <span class=\"pl-c\">*/</span></span>\n}\n</pre></div>\n<p>上述h1和p的margin-bottom都是1em，但是外边距的结果值却不相同。上述现象的出现，是因为<strong>em是相对于当前元素字体的大小</strong>。由于h1中字体大小设置为2em，因此h1中其他属性的1em值就是1em=32px.</p>\n<h1>rem</h1>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">h1</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">2<span class=\"pl-k\">rem</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin-bottom</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">rem</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 1rem = 16px <span class=\"pl-c\">*/</span></span>\n}\n<span class=\"pl-ent\">p</span> {\n  <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">rem</span></span>;\n  <span class=\"pl-c1\"><span class=\"pl-c1\">margin-bottom</span></span>: <span class=\"pl-c1\">1<span class=\"pl-k\">rem</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 1rem = 16px <span class=\"pl-c\">*/</span></span>\n}</pre></div>\n<p>1rem总是等于16px(除非html根元素字体大小改变)</p>\n<h2>使用em和rem</h2>\n<h3>总结</h3>\n<p>究竟是该使用em还是rem呢？答案应该是结合使用em和rem。当属性值的大小需要根据当前元素字体尺寸缩放时，就选用em，其它的情况都使用更简单的rem。</p>\n<h3>62.5%</h3>\n<p>常用字体值表示rem（基本字体尺寸为16px）</p>\n<pre><code>10px = 0.625rem\n12px = 0.75rem\n14px = 0.875rem\n16px = 1rem (base)\n18px = 1.125rem\n20px = 1.25rem\n24px = 1.5rem\n30px = 1.875rem\n32px = 2rem\n</code></pre>\n<p>通过62.5%的设定，就可以很容易用em或者rem来定义具体属性的尺寸了（10倍的关系）。</p>\n<p><strong>em</strong></p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">body</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>:<span class=\"pl-c1\">62.5<span class=\"pl-k\">%</span></span>; }  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> =10px <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-ent\">h1</span>   { <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">2.4<span class=\"pl-k\">em</span></span>; } <span class=\"pl-c\"><span class=\"pl-c\">/*</span> =24px <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-ent\">p</span>    { <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">1.4<span class=\"pl-k\">em</span></span>; } <span class=\"pl-c\"><span class=\"pl-c\">/*</span> =14px <span class=\"pl-c\">*/</span></span></pre></div>\n<p><strong>rem</strong></p>\n<div class=\"highlight highlight-source-css\"><pre><span class=\"pl-ent\">html</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">62.5<span class=\"pl-k\">%</span></span>; }  <span class=\"pl-c\"><span class=\"pl-c\">/*</span> =10px <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-ent\">body</span> { <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">1.4<span class=\"pl-k\">rem</span></span>; } <span class=\"pl-c\"><span class=\"pl-c\">/*</span> =14px <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-ent\">h1</span>   { <span class=\"pl-c1\"><span class=\"pl-c1\">font-size</span></span>: <span class=\"pl-c1\">2.4<span class=\"pl-k\">rem</span></span>; } <span class=\"pl-c\"><span class=\"pl-c\">/*</span> =24px <span class=\"pl-c\">*/</span></span></pre></div>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000014500582\" rel=\"nofollow\">【基础】EM 还是 REM？这是一个问题！</a></li>\n</ul>"
  },
  {
    "id": 26,
    "title": "Javascript设计模式",
    "labels": "JavaScript",
    "created_at": "2018-05-23T02:53:26Z",
    "updated_at": "2019-04-05T15:03:39Z",
    "body_html": "<h1>Javascript设计模式</h1>\n<h2>前言</h2>\n<p>当学习深入了解后，发现一些晦涩难懂的技巧与设计模式有关，记录学习日志。</p>\n<h2>模块模式</h2>\n<p>使用 <code>jquery</code> 的 <strong>getJSON</strong> 方法来获取 github repoList 数据列表，未加 loading ...</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>root<span class=\"pl-pds\">\"</span></span>&gt;&lt;/<span class=\"pl-ent\">div</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> Module <span class=\"pl-k\">=</span> {\n        <span class=\"pl-en\">init</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n            <span class=\"pl-k\">var</span> y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n            <span class=\"pl-smi\">y</span>.<span class=\"pl-c1\">id</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>root<span class=\"pl-pds\">\"</span></span>;\n            <span class=\"pl-smi\">y</span>.<span class=\"pl-smi\">error</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;\n            <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">fetchOrderList</span>();<span class=\"pl-c\"><span class=\"pl-c\">//</span> 若有可以扩展添加结束处理的逻辑</span>\n        },\n        <span class=\"pl-en\">fetchOrderList</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n            <span class=\"pl-k\">var</span> y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n            <span class=\"pl-smi\">$</span>.<span class=\"pl-en\">getJSON</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.github.com/search/repositories?q=javascript&amp;sort=stars<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">then</span>(\n                <span class=\"pl-smi\">value</span> <span class=\"pl-k\">=&gt;</span> {\n                    <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">render</span>(value);\n                },\n                <span class=\"pl-smi\">error</span> <span class=\"pl-k\">=&gt;</span> {\n                    <span class=\"pl-smi\">y</span>.<span class=\"pl-smi\">error</span> <span class=\"pl-k\">=</span> error; <span class=\"pl-c\"><span class=\"pl-c\">//</span> 错误标记</span>\n                    <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">_fetchDataFailed</span>(error);\n                }\n            )\n        },\n        <span class=\"pl-en\">render</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">data</span>) {\n            <span class=\"pl-k\">var</span> y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n            <span class=\"pl-k\">let</span> html;\n            <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">y</span>.<span class=\"pl-smi\">error</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">null</span>) {\n                html <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">_resolveData</span>(data);\n            } <span class=\"pl-k\">else</span> {\n                html <span class=\"pl-k\">=</span> data;\n            }\n            <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-smi\">y</span>.<span class=\"pl-c1\">id</span>).<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">=</span> html;\n        },\n\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 需要时格式化处理</span>\n        <span class=\"pl-en\">_resolveData</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">data</span>) {\n            <span class=\"pl-k\">var</span> repos <span class=\"pl-k\">=</span> <span class=\"pl-smi\">data</span>.<span class=\"pl-smi\">items</span>;\n            <span class=\"pl-k\">var</span> repoList <span class=\"pl-k\">=</span> <span class=\"pl-smi\">repos</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">repo</span>, <span class=\"pl-smi\">index</span>) {\n                <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>&lt;li&gt; &lt;a href=<span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">repo</span>.<span class=\"pl-smi\">html_url</span><span class=\"pl-pse\">}</span></span>&gt;<span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">repo</span>.<span class=\"pl-c1\">name</span><span class=\"pl-pse\">}</span></span>&lt;/a&gt; (<span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">repo</span>.<span class=\"pl-smi\">stargazers_count</span><span class=\"pl-pse\">}</span></span> stars) &lt;br /&gt; <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">repo</span>.<span class=\"pl-c1\">description</span><span class=\"pl-pse\">}</span></span>&lt;/li&gt;<span class=\"pl-pds\">`</span></span>\n            });\n            <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>&lt;main&gt;</span>\n<span class=\"pl-s\">            &lt;h1&gt;Most Popular JavaScript Projects in Github&lt;/h1&gt;</span>\n<span class=\"pl-s\">            &lt;ol&gt; <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">repoList</span>.<span class=\"pl-c1\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)<span class=\"pl-pse\">}</span></span>&lt;/ol&gt;</span>\n<span class=\"pl-s\">              &lt;/main&gt; <span class=\"pl-pds\">`</span></span>\n\n        },\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 错误处理</span>\n        <span class=\"pl-en\">_fetchDataFailed</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">error</span>) {\n            <span class=\"pl-k\">let</span> errorHtml <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>&lt;span&gt;Error: <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-smi\">error</span>.<span class=\"pl-smi\">message</span><span class=\"pl-pse\">}</span></span>&lt;/span&gt;<span class=\"pl-pds\">`</span></span>;\n            <span class=\"pl-c1\">this</span>.<span class=\"pl-en\">render</span>(errorHtml)\n        }\n    }\n    <span class=\"pl-smi\">Module</span>.<span class=\"pl-en\">init</span>();</pre></div>\n<h2>发布订阅模式</h2>\n<p>异步处理逻辑的一种方式，需要做全局存储事件调控中心，在原生开发小程序中有应用，支持先订阅后发布，以及先发布后订阅</p>\n<blockquote>\n<p>注意：使用完成后及时卸载</p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-c1\">Event</span> <span class=\"pl-k\">=</span> (<span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">var</span> clientList <span class=\"pl-k\">=</span> {},\n    pub,\n    sub,\n    remove;\n\n  <span class=\"pl-k\">var</span> cached <span class=\"pl-k\">=</span> {};\n\n  <span class=\"pl-en\">sub</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">fn</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>clientList[key]) {\n      clientList[key] <span class=\"pl-k\">=</span> [];\n    }\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 使用缓存执行的订阅不用多次调用执行</span>\n    cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">==</span> <span class=\"pl-c1\">undefined</span> <span class=\"pl-k\">?</span> clientList[key].<span class=\"pl-c1\">push</span>(fn) <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-k\">if</span> (cached[key] <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Array</span> <span class=\"pl-k\">&amp;&amp;</span> cached[key].<span class=\"pl-c1\">length</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span>说明有缓存的 可以执行</span>\n      <span class=\"pl-smi\">fn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>, cached[key]);\n      cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>;\n    }\n  };\n  <span class=\"pl-en\">pub</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">var</span> key <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">shift</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>),\n      fns <span class=\"pl-k\">=</span> clientList[key];\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fns <span class=\"pl-k\">||</span> <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span>初始默认缓存</span>\n      cached[key] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">slice</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>, <span class=\"pl-c1\">0</span>);\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    }\n\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>, fn; (fn <span class=\"pl-k\">=</span> fns[i<span class=\"pl-k\">++</span>]); ) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 再次发布更新缓存中的 data 参数</span>\n      cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>time<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">undefined</span>\n        <span class=\"pl-k\">?</span> (cached[key] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">slice</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>, <span class=\"pl-c1\">0</span>))\n        <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>;\n      <span class=\"pl-smi\">fn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-c1\">arguments</span>);\n    }\n  };\n  <span class=\"pl-en\">remove</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">fn</span>) {\n    <span class=\"pl-k\">var</span> fns <span class=\"pl-k\">=</span> clientList[key];\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 缓存订阅一并删除</span>\n    <span class=\"pl-k\">var</span> cachedFn <span class=\"pl-k\">=</span> cached[key];\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fns <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>cachedFn) {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    }\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fn) {\n      fns <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>);\n      cachedFn <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>);\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-k\">if</span> (cachedFn) {\n        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> m <span class=\"pl-k\">=</span> <span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>; m <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>; m<span class=\"pl-k\">--</span>) {\n          <span class=\"pl-k\">var</span> _fn_temp <span class=\"pl-k\">=</span> cachedFn[m];\n          <span class=\"pl-k\">if</span> (_fn_temp <span class=\"pl-k\">===</span> fn) {\n            <span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">splice</span>(m, <span class=\"pl-c1\">1</span>);\n          }\n        }\n      }\n      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> n <span class=\"pl-k\">=</span> <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>; n <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>; n<span class=\"pl-k\">--</span>) {\n        <span class=\"pl-k\">var</span> _fn <span class=\"pl-k\">=</span> fns[n];\n        <span class=\"pl-k\">if</span> (_fn <span class=\"pl-k\">===</span> fn) {\n          <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">splice</span>(n, <span class=\"pl-c1\">1</span>);\n        }\n      }\n    }\n  };\n  <span class=\"pl-k\">return</span> {\n    pub<span class=\"pl-k\">:</span> pub,\n    sub<span class=\"pl-k\">:</span> sub,\n    remove<span class=\"pl-k\">:</span> remove\n  };\n})();</pre></div>\n<h2>装饰者模式</h2>\n<p>装饰者模式在现在的前端开发场景应用很广泛，如：</p>\n<ul>\n<li><strong>react</strong> 的高阶函数</li>\n<li><strong>react-redux</strong> 的 <code>connect</code> 方法</li>\n<li><strong>react-router</strong> 的 <code>withouter</code>方法</li>\n<li><strong>antd</strong> 的 <code>Form.create</code>方法</li>\n<li><strong>Taro</strong> 编译小程序时 将 <code>getApp()</code>方法使用 <code>@withWeapp('Page') class _C extends Taro.Component {}</code>传入组件中</li>\n<li>最后点出来 es6 好用的 <code>{ ...data}</code> 解构方法</li>\n<li>...</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">Function</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">before</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">beforefn</span>) {\n    <span class=\"pl-k\">var</span> __self <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> 保存原函数的引用</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> () { <span class=\"pl-c\"><span class=\"pl-c\">//</span> 返回包含了原函数和新函数的\"代理\"函数</span>\n        <span class=\"pl-smi\">beforefn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-c1\">arguments</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 执行新函数，且保证 this 不被劫持，新函数接受的参数</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 也会被原封不动地传入原函数，新函数在原函数之前执行</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">__self</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-c1\">arguments</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 执行原函数并返回原函数的执行结果，</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> 并且保证 this 不被劫持</span>\n    }\n}\n<span class=\"pl-c1\">Function</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">after</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">afterfn</span>) {\n    <span class=\"pl-k\">var</span> __self <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> () {\n        <span class=\"pl-k\">var</span> ret <span class=\"pl-k\">=</span> <span class=\"pl-smi\">__self</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-c1\">arguments</span>);\n        <span class=\"pl-smi\">afterfn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-c1\">arguments</span>);\n        <span class=\"pl-k\">return</span> ret;\n    }\n};</pre></div>\n<ul>\n<li>实例存留，装饰者待深入源码研究学习，未完待续 ...</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">let</span> <span class=\"pl-en\">doSomething</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">1</span>);\n}\n\ndoSomething <span class=\"pl-k\">=</span> <span class=\"pl-smi\">doSomething</span>.<span class=\"pl-c1\">before</span>(() <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">3</span>);\n}).<span class=\"pl-c1\">after</span>(() <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">2</span>);\n});\n\n<span class=\"pl-en\">doSomething</span>();  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 输出 312</span></pre></div>"
  },
  {
    "id": 25,
    "title": "前端模拟api数据的两种方式",
    "labels": "开发者笔记",
    "created_at": "2018-05-21T06:24:20Z",
    "updated_at": "2019-10-16T05:28:06Z",
    "body_html": "<h2><a href=\"https://github.com/typicode/json-server\">json-server</a></h2>\n<h3>1.全局安装</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install -g json-server</pre></div>\n<h3>2.创建<code>db.json</code>文件</h3>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>records<span class=\"pl-pds\">\"</span></span>: [\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>date<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2018-05-17<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title 1<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>amount<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">88</span>\n    },\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>date<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2018-05-18<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title 2<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>amount<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">23</span>\n    },\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>3<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>date<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2018-05-19<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title 3<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>amount<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">3</span>\n    },\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>4<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>date<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2018-05-20<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title 4<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>amount<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">8</span>\n    },\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>5<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>date<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2018-05-21<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title 5<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>amount<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">88</span>\n    }\n  ]\n}</pre></div>\n<h3>3.开启服务并在指定端口更新</h3>\n<p>在<code>db.json</code>目录打开</p>\n<div class=\"highlight highlight-source-shell\"><pre>json-server --watch db.json --port 3006</pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/69507673f6d324f06ab323aaa075c17083cf24c6/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a793665346f6c386a32306f673038656d78612e6a7067\"><img src=\"https://camo.githubusercontent.com/69507673f6d324f06ab323aaa075c17083cf24c6/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a793665346f6c386a32306f673038656d78612e6a7067\" alt=\"Snipaste_2019-10-16_12-52-05.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zy6e4ol8j20og08emxa.jpg\" style=\"max-width:100%;\"></a></p>\n<h3>4.get 获取数据</h3>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/665746c103bd33cadd80ab366a80459f32c52e46/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a79377274666d396a3230706f3067617133312e6a7067\"><img src=\"https://camo.githubusercontent.com/665746c103bd33cadd80ab366a80459f32c52e46/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a79377274666d396a3230706f3067617133312e6a7067\" alt=\"Snipaste_2019-10-16_12-53-24.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zy7rtfm9j20po0gaq31.jpg\" style=\"max-width:100%;\"></a></p>\n<p><strong>根据<code>id</code>获取单个详情数据</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/313e26376e2ecc861cf8a6827f8bb794950fc9d4/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a796365356230626a323063683034356a72392e6a7067\"><img src=\"https://camo.githubusercontent.com/313e26376e2ecc861cf8a6827f8bb794950fc9d4/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a796365356230626a323063683034356a72392e6a7067\" alt=\"Snipaste_2019-10-16_12-57-48.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zyce5b0bj20ch045jr9.jpg\" style=\"max-width:100%;\"></a></p>\n<blockquote>\n<p>或者 <code>http://localhost:3000/records?id=1</code></p>\n</blockquote>\n<p>过滤功能：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/2c2f3f34cd16b85d6b96a06d8248abc10c61a047/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a796477636c67696a3230676d3035326a72612e6a7067\"><img src=\"https://camo.githubusercontent.com/2c2f3f34cd16b85d6b96a06d8248abc10c61a047/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a796477636c67696a3230676d3035326a72612e6a7067\" alt=\"Snipaste_2019-10-16_12-59-18.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zydwclgij20gm052jra.jpg\" style=\"max-width:100%;\"></a></p>\n<blockquote>\n<p>使用 <code>.</code>更可以访问深层属性，如：<code>GET /posts?id=1&amp;id=2</code> <code>GET /comments?author.name=typicode</code></p>\n</blockquote>\n<p>分页展示功能：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/977bc162ea706b0ad78a866f4459fab0f7916515/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a7a327a6d6563656a32306861306177676c6d2e6a7067\"><img src=\"https://camo.githubusercontent.com/977bc162ea706b0ad78a866f4459fab0f7916515/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a7a327a6d6563656a32306861306177676c6d2e6a7067\" alt=\"Snipaste_2019-10-16_13-23-23.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zz2zmecej20ha0awglm.jpg\" style=\"max-width:100%;\"></a></p>\n<h3>5.put 更新数据</h3>\n<p><strong>准备更新</strong><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/17a05a9ce52bb8165b2e5a6893acff08c35d0447/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a79753777756a666a323138613064646a72702e6a7067\"><img src=\"https://camo.githubusercontent.com/17a05a9ce52bb8165b2e5a6893acff08c35d0447/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a79753777756a666a323138613064646a72702e6a7067\" alt=\"Snipaste_2019-10-16_13-14-28.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zyu7wujfj218a0ddjrp.jpg\" style=\"max-width:100%;\"></a></p>\n<p>发送请求,<strong>send</strong><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/fcffdf112ad11470816cd4f519c19f4cb6c04777/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a797575726535656a32306c62306664676c6f2e6a7067\"><img src=\"https://camo.githubusercontent.com/fcffdf112ad11470816cd4f519c19f4cb6c04777/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a797575726535656a32306c62306664676c6f2e6a7067\" alt=\"Snipaste_2019-10-16_13-15-37.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zyuure5ej20lb0fdglo.jpg\" style=\"max-width:100%;\"></a></p>\n<blockquote>\n<p>注意：这里是全量更新替换</p>\n</blockquote>\n<h3>6.post 添加数据</h3>\n<p><strong>准备添加</strong><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/0e1c8abe94df7189a58b3fdda72f3312d2756fb8/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a79696b6e7833616a3231386f3064686a72752e6a7067\"><img src=\"https://camo.githubusercontent.com/0e1c8abe94df7189a58b3fdda72f3312d2756fb8/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a79696b6e7833616a3231386f3064686a72752e6a7067\" alt=\"Snipaste_2019-10-16_13-03-45.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zyiknx3aj218o0dhjru.jpg\" style=\"max-width:100%;\"></a></p>\n<p>发送请求,<strong>send</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/e7a2c595add2347c7e8f33ced16606c85d09df98/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a796d3362696d316a3230733030697a3073772e6a7067\"><img src=\"https://camo.githubusercontent.com/e7a2c595add2347c7e8f33ced16606c85d09df98/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a796d3362696d316a3230733030697a3073772e6a7067\" alt=\"Snipaste_2019-10-16_13-07-11.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zym3bim1j20s00iz0sw.jpg\" style=\"max-width:100%;\"></a></p>\n<h3>7.delete 删除数据</h3>\n<p><strong>准备删除</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/f6f51da3089c580f9e436a7766c1e6858f9f0153/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a797066313935366a323138643064376161632e6a7067\"><img src=\"https://camo.githubusercontent.com/f6f51da3089c580f9e436a7766c1e6858f9f0153/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a797066313935366a323138643064376161632e6a7067\" alt=\"Snipaste_2019-10-16_13-10-22.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zypf1956j218d0d7aac.jpg\" style=\"max-width:100%;\"></a></p>\n<p>发送<code>delete</code>请求,<strong>send</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/19a2de9fb81521c62325509fab4d7f8c9d5bded4/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a797179396e76756a323070383067326d78392e6a7067\"><img src=\"https://camo.githubusercontent.com/19a2de9fb81521c62325509fab4d7f8c9d5bded4/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c793167377a797179396e76756a323070383067326d78392e6a7067\" alt=\"Snipaste_2019-10-16_13-11-47.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g7zyqy9nvuj20p80g2mx9.jpg\" style=\"max-width:100%;\"></a></p>\n<h2><a href=\"https://www.mockapi.io\" rel=\"nofollow\">mockapi</a></h2>\n<ul>\n<li><a href=\"https://www.mockapi.io/docs\" rel=\"nofollow\">官方说明文档</a></li>\n</ul>\n<p>使用方法与上 <code>json-server</code>相似，这里不再赘述...</p>\n<h2>useful links</h2>\n<ul>\n<li><a href=\"http://www.mockapi.io/\" rel=\"nofollow\">http://www.mockapi.io/</a></li>\n<li><a href=\"https://github.com/typicode/json-server\">https://github.com/typicode/json-server</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\" rel=\"nofollow\">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></li>\n<li><a href=\"https://github.com/github/fetch\">https://github.com/github/fetch</a></li>\n<li><a href=\"https://github.com/matthew-andrews/isomorphic-fetch\">https://github.com/matthew-andrews/isomorphic-fetch</a></li>\n<li><a href=\"https://github.com/mdn/fetch-examples\">https://github.com/mdn/fetch-examples</a></li>\n</ul>\n<h5>参考链接</h5>\n<ul>\n<li><a href=\"https://www.rails365.net/movies/react-ji-chu-shi-jian-pian-xiao-xing-cai-wu-xi-tong-3-qian-duan-mo-ni-api-shu-ju-de-liang-zhong-fang-shi\" rel=\"nofollow\">react 基础实践篇-小型财务系统 #3 前端模拟 API 数据的两种方式</a></li>\n</ul>"
  },
  {
    "id": 23,
    "title": "Javascript模块化",
    "labels": "JavaScript",
    "created_at": "2018-04-24T08:58:10Z",
    "updated_at": "2019-11-23T08:26:14Z",
    "body_html": "<h1>Javascript模块化</h1>\n<h2>前言</h2>\n<p>探究 Javascript 模块化进程，感叹发展迅速！</p>\n<h2>IIFE</h2>\n<p>(Immediately-Invoked Function Expression) 自执行函数</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> myGradesCalculate <span class=\"pl-k\">=</span> (<span class=\"pl-k\">function</span> () {\n    \n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Keep this variable private inside this closure scope</span>\n  <span class=\"pl-k\">var</span> myGrades <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">93</span>, <span class=\"pl-c1\">95</span>, <span class=\"pl-c1\">88</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">55</span>, <span class=\"pl-c1\">91</span>];\n  \n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">average</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">var</span> total <span class=\"pl-k\">=</span> <span class=\"pl-smi\">myGrades</span>.<span class=\"pl-en\">reduce</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">accumulator</span>, <span class=\"pl-smi\">item</span>) {\n      <span class=\"pl-k\">return</span> accumulator <span class=\"pl-k\">+</span> item;\n      }, <span class=\"pl-c1\">0</span>);\n      \n    <span class=\"pl-k\">return</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Your average grade is <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> total <span class=\"pl-k\">/</span> <span class=\"pl-smi\">myGrades</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.<span class=\"pl-pds\">'</span></span>;\n  };\n\n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">failing</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">var</span> failingGrades <span class=\"pl-k\">=</span> <span class=\"pl-smi\">myGrades</span>.<span class=\"pl-en\">filter</span>(<span class=\"pl-k\">function</span>(<span class=\"pl-smi\">item</span>) {\n        <span class=\"pl-k\">return</span> item <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">70</span>;\n      });\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>You failed <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">failingGrades</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> times.<span class=\"pl-pds\">'</span></span>;\n  };\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Explicitly reveal public pointers to the private functions </span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> that we want to reveal publicly</span>\n\n  <span class=\"pl-k\">return</span> {\n    average<span class=\"pl-k\">:</span> average,\n    failing<span class=\"pl-k\">:</span> failing\n  }\n})();\n\n<span class=\"pl-smi\">myGradesCalculate</span>.<span class=\"pl-en\">failing</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 'You failed 2 times.' </span>\n<span class=\"pl-smi\">myGradesCalculate</span>.<span class=\"pl-en\">average</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 'Your average grade is 70.33333333333333.'</span></pre></div>\n<h2>CommonJS</h2>\n<p>Node.js 的 <code>module.exports</code>导出 与 <code>require</code> 的导入，采用同步模式。</p>\n<h2>AMD</h2>\n<p>(Asynchronous Module Definition），代表<code>require.js</code>框架，充分利用浏览器的并发异步加载能力</p>\n<h2>UMD</h2>\n<p>(Universal Module Definition)，前后端跨平台的解决方案(支持AMD与CommonJS模块方式),。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> if the module has no dependencies, the above pattern can be simplified to</span>\n(<span class=\"pl-k\">function</span> (<span class=\"pl-smi\">root</span>, <span class=\"pl-smi\">factory</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">typeof</span> define <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>function<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-smi\">define</span>.<span class=\"pl-smi\">amd</span>) {\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> AMD. Register as an anonymous module.</span>\n        <span class=\"pl-en\">define</span>([], factory);\n    } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-k\">typeof</span> <span class=\"pl-c1\">module</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span>) {\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Node. Does not work with strict CommonJS, but</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> only CommonJS-like environments that support module.exports,</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> like Node.</span>\n        <span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">factory</span>();\n    } <span class=\"pl-k\">else</span> {\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> Browser globals (root is window)</span>\n        <span class=\"pl-smi\">root</span>.<span class=\"pl-smi\">returnExports</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">factory</span>();\n  }\n}(<span class=\"pl-k\">typeof</span> self <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>undefined<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">?</span> self <span class=\"pl-k\">:</span> <span class=\"pl-c1\">this</span>, <span class=\"pl-k\">function</span> () {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Just return a value to define the module export.</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> This example returns an object, but the module</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> can return a function as the exported value.</span>\n    <span class=\"pl-k\">return</span> {};\n}));\n</pre></div>\n<h2>ES6 Modules</h2>\n<p>关键字就是<code>import</code> 与 <code>export</code>，作为 JavaScript 官方标准，日渐成为了开发者的主流选择。通过 Babel 等转化工具能帮我们巴 ES6 的模块机制 转化为 <code>CommonJS</code> 兼容。</p>\n<h3>参考文章</h3>\n<ul>\n<li><a href=\"https://yuguo.us/weblog/javascript-module-development-history/\" rel=\"nofollow\">JavaScript模块化编程简史（2009-2016）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26231889\" rel=\"nofollow\">JavaScript 模块演化简史</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html\" rel=\"nofollow\">浏览器加载 CommonJS 模块的原理与实现</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html\" rel=\"nofollow\">Javascript模块化编程（三）：require.js的用法</a></li>\n<li><a href=\"https://juejin.im/entry/5af3a3f6518825670d731cea\" rel=\"nofollow\">分析 Babel 转换 ES6 module 的原理</a></li>\n</ul>"
  },
  {
    "id": 22,
    "title": "排序算法",
    "labels": "JavaScript",
    "created_at": "2018-04-12T03:45:29Z",
    "updated_at": "2019-12-14T06:14:23Z",
    "body_html": "<blockquote>\n<p>[排序算法]（<a href=\"https://github.com/yanyue404/blog/issues/22%EF%BC%89\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/22/hovercard\">https://github.com/yanyue404/blog/issues/22）</a></p>\n</blockquote>\n<h2>效率权衡</h2>\n<p>如何权衡一个算法的优势劣势？</p>\n<p>主要是从算法所占用的「时间」和「空间」两个维度去考量。</p>\n<ul>\n<li>时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。</li>\n<li>空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。</li>\n</ul>\n<h3>时间复杂度</h3>\n<p>常见的时间复杂度量级有：</p>\n<ul>\n<li>常数阶 O(1)，算法未涉及循环等语句</li>\n<li>对数阶 O(logN)，在算法循环 O(n)中，临界条件中的决定性变量累乘变化，加快循环的退出,例如： <code>let i = 1; while(i&lt;n) { i = i * 2; }</code></li>\n<li>线性阶 O(n)，算法中的循环会执行 n 次</li>\n<li>线性对数阶 O(nlogN)，把 O(logN)的代码再嵌套循环一遍</li>\n<li>平方阶 O(n²)，把 O(n) 的代码再嵌套循环一遍</li>\n<li>立方阶 O(n³)</li>\n<li>K 次方阶 O(n^k)</li>\n<li>指数阶(2^n)</li>\n</ul>\n<p>面从上至下依次的时间复杂度越来越大，执行的效率越来越低。</p>\n<h3>空间复杂度</h3>\n<p>略...</p>\n<h2>Utils</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">checkArray</span>(<span class=\"pl-smi\">array</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>array) <span class=\"pl-k\">return</span>;\n}\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">swap</span>(<span class=\"pl-smi\">array</span>, <span class=\"pl-smi\">left</span>, <span class=\"pl-smi\">right</span>) {\n  <span class=\"pl-k\">let</span> rightValue <span class=\"pl-k\">=</span> array[right];\n  array[right] <span class=\"pl-k\">=</span> array[left];\n  array[left] <span class=\"pl-k\">=</span> rightValue;\n}</pre></div>\n<h2>冒泡排序</h2>\n<p>冒泡排序的原理如下:</p>\n<p>从第一个元素开始，把当前元素和下一个元素进行比较。如果当前元素大，那么就交换位置，重复操作直到比较到最后一个元素，那么此时(一轮结束后)最后一个元素就是该数组中最大的数<br>\n下一轮重复以上操作，但是此时最后一个元素已经是最大数了，所以不需要再比较最后一个元素，只需要比较到 <code>length - 1 -i</code> 的位置</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">bubble</span>(<span class=\"pl-smi\">array</span>) {\n  <span class=\"pl-en\">checkArray</span>(array);\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">let</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">array</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>; i<span class=\"pl-k\">++</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> console.log('第' + (i + 1) + '轮开始');</span>\n    <span class=\"pl-k\">let</span> flag <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 从 0 到 `length - 1 - i` 遍历</span>\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">let</span> j <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; j <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">array</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">-</span> i; j<span class=\"pl-k\">++</span>) {\n      <span class=\"pl-k\">if</span> (array[j] <span class=\"pl-k\">&gt;</span> array[j <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>]) {\n        flag <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>;\n        <span class=\"pl-en\">swap</span>(array, j, j <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>);\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> console.log('第' + (j + 1) + '次：' + array.toString(array));</span>\n      }\n    }\n    <span class=\"pl-k\">if</span> (flag) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> console.log('第' + (i + 1) + '轮后数据结束变化更新');</span>\n      <span class=\"pl-k\">break</span>;\n    }\n  }\n  <span class=\"pl-k\">return</span> array;\n}\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">bubble</span>([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">7</span>]));</pre></div>\n<p><strong>打印：</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>第1轮开始\n第1次：2,3,1,4,8,6,7\n第2次：2,1,3,4,8,6,7\n第5次：2,1,3,4,6,8,7\n第6次：2,1,3,4,6,7,8\n第2轮开始\n第1次：1,2,3,4,6,7,8\n第3轮开始\n第3轮后数据结束变化更新\n[1, 2, 3, 4, 6, 7, 8]</pre></div>\n<h2>快速排序</h2>\n<p>在数组中取一个数作为基准项，一般取中间的，没有正中间的这里向下取数，然后根据基准生成左右两边的数组，再分别对这两个数组进行排序，直到整个数组排列有序。</p>\n<p><strong>大致分三步：</strong></p>\n<p>1、找基准（一般是以中间项为基准）</p>\n<p>2、遍历数组，小于基准的放在 left，大于基准的放在 right</p>\n<p>3、递归</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">quickSort</span>(<span class=\"pl-smi\">arr</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>如果数组&lt;=1,则直接返回</span>\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">&lt;=</span> <span class=\"pl-c1\">1</span>) {\n    <span class=\"pl-k\">return</span> arr;\n  }\n  <span class=\"pl-k\">var</span> pivotIndex <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">floor</span>(<span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>向下</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>找基准，并把基准从原数组删除</span>\n  <span class=\"pl-k\">var</span> pivot <span class=\"pl-k\">=</span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">splice</span>(pivotIndex, <span class=\"pl-c1\">1</span>)[<span class=\"pl-c1\">0</span>];\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>定义左右数组</span>\n  <span class=\"pl-k\">var</span> left <span class=\"pl-k\">=</span> [];\n  <span class=\"pl-k\">var</span> right <span class=\"pl-k\">=</span> [];\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>比基准小的放在left，比基准大的放在right</span>\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span>; i<span class=\"pl-k\">++</span>) {\n    <span class=\"pl-k\">if</span> (arr[i] <span class=\"pl-k\">&lt;=</span> pivot) {\n      <span class=\"pl-smi\">left</span>.<span class=\"pl-c1\">push</span>(arr[i]);\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-smi\">right</span>.<span class=\"pl-c1\">push</span>(arr[i]);\n    }\n  }\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>递归</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">quickSort</span>(left).<span class=\"pl-c1\">concat</span>([pivot], <span class=\"pl-en\">quickSort</span>(right));\n}</pre></div>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://www.cnblogs.com/dll-ft/p/5850487.html\" rel=\"nofollow\">https://www.cnblogs.com/dll-ft/p/5850487.html</a></li>\n<li><a href=\"http://hyuhan.com/2017/03/02/sorting-with-javascript/\" rel=\"nofollow\">http://hyuhan.com/2017/03/02/sorting-with-javascript/</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/50479555\" rel=\"nofollow\">算法的时间与空间复杂度</a></li>\n</ul>"
  },
  {
    "id": 19,
    "title": "pandoc文档转换命令行记录",
    "labels": "工具集",
    "created_at": "2018-03-26T08:59:19Z",
    "updated_at": "2019-05-18T01:56:52Z",
    "body_html": "<h2>安装</h2>\n<ul>\n<li><a href=\"https://pandoc.org/getting-started.html\" rel=\"nofollow\">pandoc 官方文档</a></li>\n<li><a href=\"https://github.com/jgm/pandoc/releases/tag/2.1.3\">pandoc’s download page</a></li>\n</ul>\n<h2>命令</h2>\n<h3>markdown转换为html</h3>\n<div class=\"highlight highlight-source-shell\"><pre>// 只有关键标签\npandoc -f markdown -t html -o abc1.html abc.md\n// 完整文档\npandoc -f markdown -t html -o abc2.html -s abc.md</pre></div>\n<h5>参考</h5>\n<ul>\n<li><a href=\"http://www.bagualu.net/wordpress/archives/5330\" rel=\"nofollow\">http://www.bagualu.net/wordpress/archives/5330</a></li>\n</ul>\n<h3>markdown转换为word/pdf</h3>\n<div class=\"highlight highlight-source-shell\"><pre>pandoc -s m.md -o m.docx\n</pre></div>\n<h5>参考</h5>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000004887280\" rel=\"nofollow\">https://segmentfault.com/a/1190000004887280</a></li>\n</ul>\n<h3>word(.docx)转化为md</h3>\n<pre><code>pandoc -s example30.docx -t markdown -o example35.md\n</code></pre>\n<h3>word与pdf相互转换</h3>\n<blockquote>\n<p>直接使用office word软件将word另存为pdf格式，也可将pdf文档另存为word版</p>\n</blockquote>\n<h3>Userful links</h3>\n<ul>\n<li><a href=\"https://lightpdf.com/zh/\" rel=\"nofollow\">https://lightpdf.com/zh/</a></li>\n<li><a href=\"https://blog.csdn.net/liuguangrong/article/details/52858595?locationNum=2&amp;fps=1#markdown%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2\" rel=\"nofollow\">https://blog.csdn.net/liuguangrong/article/details/52858595?locationNum=2&amp;fps=1#markdown%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2</a></li>\n</ul>"
  },
  {
    "id": 18,
    "title": "Javascript中的this指向",
    "labels": "JavaScript",
    "created_at": "2018-03-24T03:22:04Z",
    "updated_at": "2019-11-14T13:52:22Z",
    "body_html": "<h2>this 的各个使用场景</h2>\n<h3>1. 在全局环境中使用时候</h3>\n<p>在全局中使用，this 就代表全局对象 Global（在浏览器中为 window）</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-c1\">this</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>[object Window]</span></pre></div>\n<p>当您在全局上下文中定义的函数中使用这个函数时，它仍然绑定到全局对象，因为函数实际上是一种全局上下文的方法。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">f1</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>;\n}\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-en\">f1</span>()); <span class=\"pl-c\"><span class=\"pl-c\">//</span>[object Window]</span></pre></div>\n<p>上面的 f1 是一个全局对象的方法。因此，我们也可以在 window 上调用它，如下所示：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">f</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>;\n}\n\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-c1\">window</span>.<span class=\"pl-en\">f</span>()); <span class=\"pl-c\"><span class=\"pl-c\">//</span>[object Window]</span></pre></div>\n<h3>2.在对象方法中使用时</h3>\n<p>在对象方法中使用此关键字时，它将绑定到“立即”封闭对象。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>obj<span class=\"pl-pds\">'</span></span>,\n  <span class=\"pl-en\">f</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>:<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span>;\n  }\n};\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">f</span>()); <span class=\"pl-c\"><span class=\"pl-c\">//</span>[object Object]:obj</span></pre></div>\n<p>上面经把这个词直接放在双引号中。要指出的是，如果将对象嵌套在另一个对象内，则该对象将绑定到直接父对象。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>obj1<span class=\"pl-pds\">'</span></span>,\n  nestedobj<span class=\"pl-k\">:</span> {\n    name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>nestedobj<span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-en\">f</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>:<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span>;\n    }\n  }\n};\n\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-smi\">obj</span>.<span class=\"pl-smi\">nestedobj</span>.<span class=\"pl-en\">f</span>()); <span class=\"pl-c\"><span class=\"pl-c\">//</span>[object Object]:nestedobj</span></pre></div>\n<p>即使你将函数显式添加到对象作为方法，它仍然遵循上述规则，这仍然指向直接父对象。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> obj1 <span class=\"pl-k\">=</span> {\n  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>obj1<span class=\"pl-pds\">'</span></span>\n};\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">returnName</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>:<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span>;\n}\n\n<span class=\"pl-smi\">obj1</span>.<span class=\"pl-smi\">f</span> <span class=\"pl-k\">=</span> returnName; <span class=\"pl-c\"><span class=\"pl-c\">//</span>add method to object</span>\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-smi\">obj1</span>.<span class=\"pl-en\">f</span>()); <span class=\"pl-c\"><span class=\"pl-c\">//</span>[object Object]:obj1</span></pre></div>\n<h3>3.调用无上下文的函数时</h3>\n<p>当你使用这个在没有任何上下文的情况下调用的函数（即不在任何对象上）时，它被绑定到全局对象（浏览器中的窗口）（即使函数是在对象内部定义的）。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> context <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>global<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  context<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span>,\n  <span class=\"pl-en\">method</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">function</span> <span class=\"pl-en\">f</span>() {\n      <span class=\"pl-k\">var</span> context <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>function<span class=\"pl-pds\">'</span></span>;\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>:<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">context</span>;\n    }\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">f</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span>invoked without context</span>\n  }\n};\n\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-smi\">obj</span>.<span class=\"pl-c1\">method</span>()); <span class=\"pl-c\"><span class=\"pl-c\">//</span>[object Window]:global</span></pre></div>\n<h3>4.在构造函数内部使用时</h3>\n<p>当函数被用作构造函数时（即使用 new 关键字调用它时），此内部函数体指向正在构建的新对象。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> myname <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>global context<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">SimpleFun</span>() {\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">myname</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>simple function<span class=\"pl-pds\">'</span></span>;\n}\n\n<span class=\"pl-k\">var</span> obj1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SimpleFun</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span>adds myname to obj1</span>\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-smi\">obj1</span>.<span class=\"pl-smi\">myname</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>simple function</span></pre></div>\n<h3>5.当在原型链上定义的函数内部使用时</h3>\n<p>如果该方法位于对象的原型链上，则此方法内部引用方法被调用的对象，就好像方法在对象上定义一样。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> ProtoObj <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">fun</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">a</span>;\n  }\n};\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>Object.create() 使用ProtoObj创建对象</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>原型并将其分配给obj3，从而使fun()成为其原型链上的方法</span>\n\n<span class=\"pl-k\">var</span> obj3 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">create</span>(ProtoObj);\n<span class=\"pl-smi\">obj3</span>.<span class=\"pl-smi\">a</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">999</span>;\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-smi\">obj3</span>.<span class=\"pl-en\">fun</span>()); <span class=\"pl-c\"><span class=\"pl-c\">//</span>999</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>注意fun（）是在obj3的原型上定义的，但是fun()中的``this.a`获取obj3.a</span></pre></div>\n<h3>6.在 call(),apply(),和 bind()函数调用时</h3>\n<p>这里的 this 替换为对应方法传入的第一个参数.</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">add</span>(<span class=\"pl-smi\">inc1</span>, <span class=\"pl-smi\">inc2</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">a</span> <span class=\"pl-k\">+</span> inc1 <span class=\"pl-k\">+</span> inc2;\n}\n\n<span class=\"pl-k\">var</span> o <span class=\"pl-k\">=</span> { a<span class=\"pl-k\">:</span> <span class=\"pl-c1\">4</span> };\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-smi\">add</span>.<span class=\"pl-c1\">call</span>(o, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&lt;br /&gt;<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>15</span>\n\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-smi\">add</span>.<span class=\"pl-c1\">apply</span>(o, [<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>]) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&lt;br /&gt;<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>15</span>\n\n<span class=\"pl-k\">var</span> g <span class=\"pl-k\">=</span> <span class=\"pl-smi\">add</span>.<span class=\"pl-en\">bind</span>(o, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>);\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-en\">g</span>() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&lt;br /&gt;<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>15</span>\n\n<span class=\"pl-k\">var</span> h <span class=\"pl-k\">=</span> <span class=\"pl-smi\">add</span>.<span class=\"pl-en\">bind</span>(o, <span class=\"pl-c1\">5</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>h: `o.a` i.e. 4 + 5 + ?</span>\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-en\">h</span>(<span class=\"pl-c1\">6</span>) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&lt;br /&gt;<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>15</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 4 + 5 + 6 = 15</span>\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">write</span>(<span class=\"pl-en\">h</span>() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&lt;br /&gt;<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>NaN</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>no parameter is passed to h()</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>4 + 5 + undefined = NaN&lt;/code&gt;</span></pre></div>\n<h3>7.在事件处理中</h3>\n<ul>\n<li>将函数直接分配给元素的事件处理函数时，直接在事件处理函数内使用该函数会引用相应的元素。这种直接的函数分配可以使用 addeventListener 方法或通过传统的事件注册方法（如 onclick）来完成。</li>\n<li>同样，当你直接在事件属性中使用这个元素（比如&lt;button onclick =“... this ...”&gt;）时，它指向元素。</li>\n<li>但是，通过在事件处理函数或事件属性内部调用的其他函数间接使用这个函数，会解析为全局对象窗口。</li>\n<li>当我们使用 Microsoft 的事件注册模型方法 attachEvent 将该函数附加到事件处理函数时，可以实现上述相同的行为。它不是将该函数分配给事件处理程序（并因此使该元素的函数方法），而是调用该事件上的函数（在全局上下文中有效地调用它）。</li>\n</ul>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">h3</span>&gt;在事件处理程序或事件属性中直接使用this&lt;/<span class=\"pl-ent\">h3</span>&gt;\n\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>button1<span class=\"pl-pds\">\"</span></span>&gt;click() 使用addEventListner注册&lt;/<span class=\"pl-ent\">button</span>&gt;&lt;<span class=\"pl-ent\">br</span> /&gt;\n\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>button2<span class=\"pl-pds\">\"</span></span>&gt;click() 使用onclick注册&lt;/<span class=\"pl-ent\">button</span>&gt;&lt;<span class=\"pl-ent\">br</span> /&gt;\n\n&lt;<span class=\"pl-ent\">button</span>\n  <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>button3<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-e\">onclick</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>alert(this+ ' : ' + this.tagName + ' : ' + this.id);<span class=\"pl-pds\">\"</span></span>\n&gt;\n  使用点击事件的原型\n&lt;/<span class=\"pl-ent\">button</span>&gt;\n\n&lt;<span class=\"pl-ent\">h3</span>&gt;在事件处理程序或事件属性中间接使用this&lt;/<span class=\"pl-ent\">h3</span>&gt;\n\n&lt;<span class=\"pl-ent\">button</span>\n  <span class=\"pl-e\">onclick</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>alert((function(that){return that + ' : ' +this + ' : ' + this.tagName + ' : ' + this.id;})(this));<span class=\"pl-pds\">\"</span></span>\n&gt;\n  在函数内部间接使用 &lt;<span class=\"pl-ent\">br</span> /&gt;\n  定义自执行函数\n&lt;/<span class=\"pl-ent\">button</span>&gt;\n&lt;<span class=\"pl-ent\">br</span> /&gt;\n\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>button4<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">onclick</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>clickedMe()<span class=\"pl-pds\">\"</span></span>&gt;\n  在函数内部间接使用 &lt;<span class=\"pl-ent\">br</span> /&gt;\n  手动绑定事件名\n&lt;/<span class=\"pl-ent\">button</span>&gt;\n&lt;<span class=\"pl-ent\">br</span> /&gt;</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">clickedMe</span>() {\n  <span class=\"pl-en\">alert</span>(<span class=\"pl-c1\">this</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> : <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">tagName</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> : <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">id</span>);\n}\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>button1<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>click<span class=\"pl-pds\">'</span></span>, clickedMe, <span class=\"pl-c1\">false</span>);\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>button2<span class=\"pl-pds\">'</span></span>).<span class=\"pl-smi\">onclick</span> <span class=\"pl-k\">=</span> clickedMe;</pre></div>\n<ul>\n<li><a href=\"http://jsfiddle.net/Mahesha999/xKtzC/8/embedded/html%2Cjs%2Cresult/\" rel=\"nofollow\">在线 jsfiddle</a></li>\n</ul>\n<h3>8.箭头函数的 this</h3>\n<p>箭头函数转成 ES5 的代码如下。</p>\n<p>下面代码中，转换后的 ES5 版本清楚地说明了，箭头函数里面根本没有自己的this，而是引用外层的this。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> ES6</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">foo</span>() {\n  <span class=\"pl-c1\">setTimeout</span>(() <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>id:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">id</span>);\n  }, <span class=\"pl-c1\">100</span>);\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> ES5</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">foo</span>() {\n  <span class=\"pl-k\">var</span> _this <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n\n  <span class=\"pl-c1\">setTimeout</span>(<span class=\"pl-k\">function</span> () {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>id:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">_this</span>.<span class=\"pl-c1\">id</span>);\n  }, <span class=\"pl-c1\">100</span>);\n}</pre></div>\n<p>箭头函数被非箭头函数包含，this 绑定的就是最近一层非箭头函数的 this</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  i<span class=\"pl-k\">:</span> <span class=\"pl-c1\">10</span>,\n  <span class=\"pl-en\">b</span><span class=\"pl-k\">:</span> () <span class=\"pl-k\">=&gt;</span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">i</span>, <span class=\"pl-c1\">this</span>),\n  <span class=\"pl-en\">c</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>( <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">i</span>, <span class=\"pl-c1\">this</span>)\n  }\n}\n<span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">b</span>();\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> undefined Window</span>\n<span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">c</span>();\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 10, Object {...}</span></pre></div>\n<h2>结论</h2>\n<ol>\n<li>在全局环境中使用时候，<code>this</code>代表全局对象</li>\n<li>在对象方法中使用时，<code>this</code> 代表此对象</li>\n<li>调用无上下文的函数时，<code>this</code>代表全局对象</li>\n<li>在构造函数内部使用时，<code>this</code> 代表正在构建的新对象</li>\n<li>当在原型链上定义的函数内部使用时， <code>this</code> 代表此对象</li>\n<li>在 call(),apply(),和 bind()函数调用时，<code>this</code> 代表对应方法传入的第一个参数</li>\n<li>在事件处理中于 js 中绑定或注册，或在 html 中注册并直接使用 this 关键字（非丢失 this 指向），this 代表 <code>html 元素</code>，在事件处理与元素上直接绑定事件方法名会使得 this 指向 <code>window</code></li>\n<li>箭头函数中，<code>this</code>代表其位置外层的this对象</li>\n</ol>\n<h2>小测验</h2>\n<h3>demo1</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">if</span> (<span class=\"pl-c1\">true</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> What is `this` here?</span>\n}</pre></div>\n<h3>demo2</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  someData<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>a string<span class=\"pl-pds\">'</span></span>\n};\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">myFun</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> What is `this` here?</span>\n}\n\n<span class=\"pl-smi\">obj</span>.<span class=\"pl-smi\">staticFunction</span> <span class=\"pl-k\">=</span> myFun;\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>this is window:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">staticFunction</span>() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">window</span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>this is obj:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">staticFunction</span>() <span class=\"pl-k\">==</span> obj);</pre></div>\n<h3>demo3</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">myMethod</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> What is `this` here?</span>\n  }\n};\n<span class=\"pl-k\">var</span> myFun <span class=\"pl-k\">=</span> <span class=\"pl-smi\">obj</span>.<span class=\"pl-smi\">myMethod</span>;\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>this is window:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-en\">myFun</span>() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">window</span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>this is obj:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-en\">myFun</span>() <span class=\"pl-k\">==</span> obj);</pre></div>\n<h3>demo4</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">myFun</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> What is `this` here?</span>\n}\n<span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">myMethod</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-c1\">eval</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>myFun()<span class=\"pl-pds\">'</span></span>);\n  }\n};</pre></div>\n<h3>demo5</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">myFun</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> What is `this` here?</span>\n}\n<span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  someData<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>a string<span class=\"pl-pds\">'</span></span>\n};\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>this is window:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">myFun</span>.<span class=\"pl-c1\">call</span>(obj) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">window</span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>this is obj:<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">myFun</span>.<span class=\"pl-c1\">call</span>(obj) <span class=\"pl-k\">==</span> obj);</pre></div>\n<h3>公布答案</h3>\n<ul>\n<li>demo1: window</li>\n<li>demo2: obj</li>\n<li>demo3: window</li>\n<li>demo4: window</li>\n<li>demo5: obj</li>\n</ul>\n<h6>参考</h6>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" rel=\"nofollow\">http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html</a></li>\n<li><a href=\"https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\" rel=\"nofollow\">https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3</a></li>\n<li><a href=\"https://stackoverflow.com/a/3127440/1751946\" rel=\"nofollow\">https://stackoverflow.com/a/3127440/1751946</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" rel=\"nofollow\">http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"328914575\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/mqyqingfeng/Blog/issues/85\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mqyqingfeng/Blog/issues/85/hovercard\" href=\"https://github.com/mqyqingfeng/Blog/issues/85\">mqyqingfeng/Blog#85</a></li>\n</ul>"
  },
  {
    "id": 17,
    "title": "Javascript的继承与原型链",
    "labels": "JavaScript",
    "created_at": "2018-03-24T02:24:56Z",
    "updated_at": "2019-12-31T04:52:42Z",
    "body_html": "<h1>继承与原型链</h1>\n<p>什么是原型？</p>\n<p>原型（prototype）的定义：给其它对象提供共享属性的<strong>对象</strong></p>\n<p>哪些数据类型有原型？</p>\n<p>只有函数才有 prototype 属性。</p>\n<h2>基本概念</h2>\n<h4>1. 获取属性的查找规则</h4>\n<p>如果访问一个对象的属性,首先检查对象是否含有对应的属性,如果含有即得结果;</p>\n<p>如果不含有该属性, 则去其原型中查找, 如果原型中含有该属性, 既得结果;</p>\n<p>如果原型中依旧没有属性, 就到其原型中的原型去查找, 直到 <code>Object.prototype</code>。最后还没有则返回 undefined</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">rain</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">Person</span>() {}\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">dir</span>(<span class=\"pl-smi\">Person</span>.<span class=\"pl-smi\">rain</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<h4>2.修改对象属性</h4>\n<p>如果修改一个对象的属性, 那么会检查当前对象是否存在该属性, 如果存在即修改, 如果不存在则会给其添加属性.</p>\n<h4>3.值类型和引用类型的区别</h4>\n<p>在使用数组赋值的时候,数组是引用类型,存的是一个指针指向,在实例操作后会改变原型中的引用类型。从而影响所有的实例成员</p>\n<p>如果实例对象\"修改了\"原型中的值类型, 那么其实并没有影响到其他的对象</p>\n<h2>构造函数 new 一个对象</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">Person</span>() {}\n<span class=\"pl-smi\">Person</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Rainbow<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">var</span> person1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Person</span>();\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">person1</span>.<span class=\"pl-c1\">name</span>);</pre></div>\n<p>new 命令简化的内部流程，可以用下面的代码表示。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">_new</span>(<span class=\"pl-c\"><span class=\"pl-c\">/*</span> 构造函数 <span class=\"pl-c\">*/</span></span> <span class=\"pl-en\">constructor</span>, <span class=\"pl-c\"><span class=\"pl-c\">/*</span> 构造函数参数 <span class=\"pl-c\">*/</span></span> params) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 将 arguments 对象转为数组</span>\n  <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> [].<span class=\"pl-smi\">slice</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 取出构造函数</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">constructor </span>= args.<span class=\"pl-en\">shift</span>();\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 创建一个空对象，继承构造函数的 prototype 属性</span>\n  var context = Object.create(constructor.prototype);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 执行构造函数</span>\n  var result = constructor.apply(context, args);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 如果返回结果是对象，就直接返回，否则返回 context 对象</span>\n  return typeof result === 'object' &amp;&amp; result != null ? result : context;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 实例</span>\n<span class=\"pl-k\">var</span> actor <span class=\"pl-k\">=</span> <span class=\"pl-en\">_new</span>(Person, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>张三<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">28</span>);</pre></div>\n<h3>从构造函数到原型对象</h3>\n<p>构造函数与其原型对象使用 <code>prototype</code> 属性连接，而原型对象中的 constructor 属性指向构造函数。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(Person <span class=\"pl-k\">===</span> <span class=\"pl-smi\">Person</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-c1\">constructor</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<h3>实例对象与两者的连接</h3>\n<p>实例对象的 <code>__proto__</code>指向其该对象的原型，这是每一个 JavaScript 对象(除了 null )都具有的一个属性。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">person1</span>.<span class=\"pl-smi\">__proto__</span> <span class=\"pl-k\">===</span> <span class=\"pl-smi\">Person</span>.<span class=\"pl-c1\">prototype</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/f2223562058c959b7ef3ba8b66b2861050380507/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673935776b646e696c716a323068743061776a726a2e6a7067\"><img src=\"https://camo.githubusercontent.com/f2223562058c959b7ef3ba8b66b2861050380507/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673935776b646e696c716a323068743061776a726a2e6a7067\" alt=\"Snipaste_2019-11-21_18-55-12.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g95wkdnilqj20ht0awjrj.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>原型链</h2>\n<p>对象的<code>__proto__</code>指向自己构造函数的 <code>prototype</code>。<code>obj.__proto__.__proto__</code>...的原型链由此产生，包括我们的操作符 instanceof 正是通过探测 <code>obj.__proto__.__proto__</code> === <code>constructor.prototype</code> 来验证 obj 是否是 <code>constructor</code> 的实例。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">__proto__</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">null</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">dir</span>(<span class=\"pl-c1\">Object</span>.<span class=\"pl-smi\">__proto__</span>.<span class=\"pl-smi\">__proto__</span>.<span class=\"pl-smi\">__proto__</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> null</span></pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/7ec59e0cf327ffbabc2db00e913503db2d1e9ceb/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673935776b73383469756a32307170306666676d302e6a7067\"><img src=\"https://camo.githubusercontent.com/7ec59e0cf327ffbabc2db00e913503db2d1e9ceb/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673935776b73383469756a32307170306666676d302e6a7067\" alt=\"Snipaste_2019-11-21_19-45-28.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g95wks84iuj20qp0ffgm0.jpg\" style=\"max-width:100%;\"></a></p>\n<p><strong>透过一个例子查看</strong></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 顶级原型链</span>\n<span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">foo</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rainbow<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">doSomething</span>() {}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 构造函数的原型</span>\n<span class=\"pl-smi\">doSomething</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">hello</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bar<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 实例</span>\n<span class=\"pl-k\">var</span> doSomeInstancing <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">doSomething</span>();\n<span class=\"pl-smi\">doSomeInstancing</span>.<span class=\"pl-smi\">prop</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>some value<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>doSomeInstancing.foo:       <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">doSomeInstancing</span>.<span class=\"pl-smi\">foo</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 'rainbow'</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>doSomeInstancing.global:       <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">doSomeInstancing</span>.<span class=\"pl-smi\">global</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> undefined</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 属性查找步骤</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 1. 自身具备 foo属性 ？ X</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 2. doSomeInstancing.__proto__: doSomething.prototype 有 foo 属性 X (这里指向构造函数的原型)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 3. doSomeInstancing.__proto__.__proto__: Object.prototype 自身具备 foo 属性 √</span></pre></div>\n<p><strong>完整的原型链结构上溯</strong></p>\n<p>相互关联的原型组成的链状结构就是原型链，也就是<code>__proto__</code>的这条线。</p>\n<p>在下面的结构中，<code>__proto__</code>将实例对象，实例对象的原型，实例对象的原型的原型向上连接，直至 `Object.prototype'的上一级<strong>null</strong>，原型链上溯结束。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> o <span class=\"pl-k\">=</span> { a<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span> };\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> o 这个对象继承了 Object.prototype 上面的所有属性</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> o 自身没有名为 hasOwnProperty 的属性</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> hasOwnProperty 是 Object.prototype 的属性</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 因此 o 继承了 Object.prototype 的 hasOwnProperty</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Object.prototype 的原型为 null</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 原型链如下:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> o ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"pl-k\">var</span> a <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>yo<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>whadup<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>?<span class=\"pl-pds\">'</span></span>];\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 数组都继承于 Array.prototype</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (Array.prototype 中包含 indexOf, forEach 等方法)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 原型链如下:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">f</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">2</span>;\n}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 函数都继承于 Function.prototype</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> (Function.prototype 中包含 call, bind等方法)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 原型链如下:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></pre></div>\n<h2>原型链</h2>\n<h5>【很少单独来使用】</h5>\n<h4>缺点</h4>\n<p>1.引用类型值的原型属性会被实例共享</p>\n<p>2.在创建子类型的实例时,不能向超类型的构造函数中传递参数【很少单独来使用】</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">Father</span>() {\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>father<span class=\"pl-pds\">'</span></span>;\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">firend</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>aaa,bbb<span class=\"pl-pds\">'</span></span>];\n}\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">Son</span>() {}\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>原型绑定</span>\n<span class=\"pl-smi\">Son</span>.<span class=\"pl-c1\">prototype</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Father</span>();\n<span class=\"pl-smi\">Son</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-c1\">constructor</span> <span class=\"pl-k\">=</span> Son;\n\n<span class=\"pl-k\">var</span> s1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Son</span>();\n<span class=\"pl-k\">var</span> s2 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Son</span>();\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s1</span>.<span class=\"pl-c1\">name</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>father</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s2</span>.<span class=\"pl-c1\">name</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>father</span>\n\n<span class=\"pl-smi\">s1</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>son<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span>实际上已经在构造函数上定义了这个name属性</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s1</span>.<span class=\"pl-c1\">name</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>son</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s2</span>.<span class=\"pl-c1\">name</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>father</span>\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s1</span>.<span class=\"pl-smi\">firend</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>['aaa,bbb']</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s2</span>.<span class=\"pl-smi\">firend</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>['aaa,bbb']</span>\n<span class=\"pl-smi\">s1</span>.<span class=\"pl-smi\">firend</span>.<span class=\"pl-c1\">push</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ccc,ddd<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s1</span>.<span class=\"pl-smi\">firend</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>['aaa,bbb,ccc,ddd']</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s2</span>.<span class=\"pl-smi\">firend</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>['aaa,bbb,ccc,ddd'] 引用类型的原型属性会被实例共享</span></pre></div>\n<h2>借用构造函数</h2>\n<h5>【很少单独来使用】</h5>\n<h4>实现方法</h4>\n<p>在子类型构造函数的内部调用超类型构造函数(使用 apply 和 call 方法)</p>\n<h4>优点</h4>\n<p>解决了原型中引用类型属性的问题,并且子类可以向超类中传参</p>\n<h4>缺点</h4>\n<p>子类实例无法访问父类(超类)原型中定义的方法,所以函数的复用就无从谈起了</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">Father</span>(<span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">friends</span>) {\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> name;\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">friends</span> <span class=\"pl-k\">=</span> friends;\n}\n<span class=\"pl-smi\">Father</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">getName</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span>;\n};\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">Son</span>(<span class=\"pl-smi\">name</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> 注意： 为了确保 Father 构造函数不会重写 Son 构造函数的属性，请将调用 Father 构造函数的代码放在 Son 中定义的属性的前面。</span>\n  <span class=\"pl-smi\">Father</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">this</span>, name, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>aaa<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bbb<span class=\"pl-pds\">'</span></span>]);\n\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">age</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">22</span>;\n}\n\n<span class=\"pl-k\">var</span> s1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Son</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>son1<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">var</span> s2 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Son</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>son2<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s1</span>.<span class=\"pl-c1\">name</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> son1</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s2</span>.<span class=\"pl-c1\">name</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> son2</span>\n\n<span class=\"pl-smi\">s1</span>.<span class=\"pl-smi\">friends</span>.<span class=\"pl-c1\">push</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ccc<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>ddd<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s1</span>.<span class=\"pl-smi\">friends</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">s2</span>.<span class=\"pl-smi\">friends</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> [\"aaa\", \"bbb\"]</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 子类实例无法访问父类原型中的方法</span>\n<span class=\"pl-smi\">s1</span>.<span class=\"pl-en\">getName</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> TypeError: s1.getName is not a function</span>\n<span class=\"pl-smi\">s2</span>.<span class=\"pl-en\">getName</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> TypeError: s2.getName is not a function</span></pre></div>\n<h2>组合继承</h2>\n<h5>【最常用的继承模式】</h5>\n<p>又叫伪经典继承，结合原型链继承和构造函数式继承，使用原型链实现对原型属性和方法的继承（函数的复用），又使用构造函数实现对实例属性的继承（每个实例拥有自己的属性）。</p>\n<h4>优点</h4>\n<p>避免了原型链继承和构造函数继承的缺点，融合了他们的优点</p>\n<h4>缺点</h4>\n<p>无论在什么情况下，都会调用两次超类型构造函数，一次是构造子类型原型，一次是在子类型构造函数内部，解决方法查看<code>寄生组合式继承</code></p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">SuperType</span>(<span class=\"pl-smi\">name</span>) {\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> name;\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">colors</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>red<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>blue<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>green<span class=\"pl-pds\">'</span></span>];\n}\n<span class=\"pl-smi\">SuperType</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">sayName</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span>);\n};\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">SubType</span>(<span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">age</span>) {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>继承属性</span>\n  <span class=\"pl-smi\">SuperType</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">this</span>, name); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 第二次调用 SuperType()</span>\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">age</span> <span class=\"pl-k\">=</span> age;\n}\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>继承方法</span>\n<span class=\"pl-smi\">SubType</span>.<span class=\"pl-c1\">prototype</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SuperType</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 第一次调用 SuperType()</span>\n<span class=\"pl-smi\">SubType</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">sayAge</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">age</span>);\n};\n\n<span class=\"pl-k\">var</span> instancel1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SubType</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Nicholas<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">29</span>);\n<span class=\"pl-k\">var</span> instancel2 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SubType</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>yue<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">25</span>);\n<span class=\"pl-smi\">instancel1</span>.<span class=\"pl-smi\">colors</span>.<span class=\"pl-c1\">push</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>black<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">instancel1</span>.<span class=\"pl-smi\">colors</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> [\"red\", \"blue\", \"green\", \"black\"]</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">instancel2</span>.<span class=\"pl-smi\">colors</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> [\"red\", \"blue\", \"green\"] 实例独立</span>\n\n<span class=\"pl-smi\">instancel1</span>.<span class=\"pl-en\">sayName</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span>Nicholas</span>\n<span class=\"pl-smi\">instancel2</span>.<span class=\"pl-en\">sayName</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span>yue 传参</span></pre></div>\n<h2>原型式继承</h2>\n<p>想要保证一个对象与另一个对象<code>保持类似</code>的工作可以胜任</p>\n<h4>缺点</h4>\n<p>包含引用类型值的属性始终会共享相应的属性，无法保证单个实例拥有自己的引用类型属性，这点与原型链模式存在的问题一样</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">object</span>(<span class=\"pl-smi\">o</span>) {\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">F</span>() {}\n  <span class=\"pl-c1\">F</span>.<span class=\"pl-c1\">prototype</span> <span class=\"pl-k\">=</span> o;\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">F</span>();\n}\n\n<span class=\"pl-k\">var</span> person <span class=\"pl-k\">=</span> {\n  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Nicholas<span class=\"pl-pds\">'</span></span>,\n  friends<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Shelby<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Court<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Van<span class=\"pl-pds\">'</span></span>],\n};\n<span class=\"pl-k\">var</span> anotherPerson <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">create</span>(person);\n<span class=\"pl-k\">var</span> anotherPerson <span class=\"pl-k\">=</span> <span class=\"pl-en\">object</span>(person);\n<span class=\"pl-smi\">anotherPerson</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Greg<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-smi\">anotherPerson</span>.<span class=\"pl-smi\">friends</span>.<span class=\"pl-c1\">push</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Rob<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">var</span> yetAnotherPerson <span class=\"pl-k\">=</span> <span class=\"pl-en\">object</span>(person);\n<span class=\"pl-smi\">yetAnotherPerson</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Linda<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-smi\">yetAnotherPerson</span>.<span class=\"pl-smi\">friends</span>.<span class=\"pl-c1\">push</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Barbie<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-en\">alert</span>(<span class=\"pl-smi\">person</span>.<span class=\"pl-smi\">friends</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>\"Shelby,Court,Van,Rob,Barbie\"</span></pre></div>\n<h5>Object.create API</h5>\n<p>第一个参数是用作新对象的原型对象（可选的），第二个参数是用来扩展新对象属相的另外的对象，在一个参数的情况下，与<code>object()</code>方法相同</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> anotherPerson1 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">create</span>(person);\n<span class=\"pl-smi\">anotherPerson1</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Greg<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">var</span> anotherPerson2 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">create</span>(person, {\n  name<span class=\"pl-k\">:</span> {\n    value<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Greg<span class=\"pl-pds\">'</span></span>,\n  },\n});</pre></div>\n<h2>寄生式继承</h2>\n<h5>【有用的模式】</h5>\n<h4>缺点</h4>\n<p>使用寄生继承为对象添加函数，由于不能做到函数的复用性而降低效率。这一点与构造函数类似</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">createAnother</span>(<span class=\"pl-smi\">original</span>) {\n  <span class=\"pl-k\">var</span> clone <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Object</span>(original); <span class=\"pl-c\"><span class=\"pl-c\">//</span>调用函数创建一个新对象</span>\n  <span class=\"pl-smi\">clone</span>.<span class=\"pl-en\">sayHi</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 方法</span>\n    <span class=\"pl-en\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hi<span class=\"pl-pds\">'</span></span>);\n  };\n  <span class=\"pl-k\">return</span> clone;\n}\n\n<span class=\"pl-k\">var</span> person <span class=\"pl-k\">=</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>属性</span>\n  name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Nicholas<span class=\"pl-pds\">'</span></span>,\n  friends<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Shelby<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Court<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Van<span class=\"pl-pds\">'</span></span>],\n};\n\n<span class=\"pl-k\">var</span> anotherPerson <span class=\"pl-k\">=</span> <span class=\"pl-en\">createAnother</span>(person);\n<span class=\"pl-smi\">anotherPerson</span>.<span class=\"pl-en\">sayHi</span>();\n<span class=\"pl-en\">alert</span>(<span class=\"pl-smi\">anotherPerson</span>.<span class=\"pl-c1\">name</span>);</pre></div>\n<h2>寄生组合式继承</h2>\n<h5>【最理想的继承模式】</h5>\n<h4>优点</h4>\n<ol>\n<li>高效率调用一次 SuperType 构造函数，因此避免了在 SuperType.prototype 上面创建不必要，多余的属性</li>\n<li>原型链保持不变，可以正常使用<code>istanceof</code>和<code>isPrototypeOf()</code></li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">object</span>(<span class=\"pl-smi\">o</span>) {\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">F</span>() {}\n  <span class=\"pl-c1\">F</span>.<span class=\"pl-c1\">prototype</span> <span class=\"pl-k\">=</span> o;\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">F</span>();\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">inheritPrototype</span>(<span class=\"pl-smi\">subType</span>, <span class=\"pl-smi\">superType</span>) {\n  <span class=\"pl-k\">var</span> prototype <span class=\"pl-k\">=</span> <span class=\"pl-en\">object</span>(<span class=\"pl-smi\">superType</span>.<span class=\"pl-c1\">prototype</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>创建对象</span>\n  <span class=\"pl-smi\">prototype</span>.<span class=\"pl-c1\">constructor</span> <span class=\"pl-k\">=</span> subType; <span class=\"pl-c\"><span class=\"pl-c\">//</span>增强对象</span>\n  <span class=\"pl-smi\">subType</span>.<span class=\"pl-c1\">prototype</span> <span class=\"pl-k\">=</span> prototype; <span class=\"pl-c\"><span class=\"pl-c\">//</span>指定对象</span>\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">SuperType</span>(<span class=\"pl-smi\">name</span>) {\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">=</span> name;\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">colors</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>red<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>blue<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>green<span class=\"pl-pds\">'</span></span>];\n}\n\n<span class=\"pl-smi\">SuperType</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">sayName</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">alert</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-c1\">name</span>);\n};\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">SubType</span>(<span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">age</span>) {\n  <span class=\"pl-smi\">SuperType</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">this</span>, name);\n\n  <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">age</span> <span class=\"pl-k\">=</span> age;\n}\n\n<span class=\"pl-en\">inheritPrototype</span>(SubType, SuperType);\n\n<span class=\"pl-smi\">SubType</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">sayAge</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">alert</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">age</span>);\n};\n\n<span class=\"pl-k\">var</span> instance1 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SubType</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Nicholas<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">29</span>);\n<span class=\"pl-smi\">instance1</span>.<span class=\"pl-smi\">colors</span>.<span class=\"pl-c1\">push</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>black<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-en\">alert</span>(<span class=\"pl-smi\">instance1</span>.<span class=\"pl-smi\">colors</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>\"red,blue,green,black\"</span>\n<span class=\"pl-smi\">instance1</span>.<span class=\"pl-en\">sayName</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span>\"Nicholas\";</span>\n<span class=\"pl-smi\">instance1</span>.<span class=\"pl-en\">sayAge</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span>29</span>\n\n<span class=\"pl-k\">var</span> instance2 <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">SubType</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Greg<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">27</span>);\n<span class=\"pl-en\">alert</span>(<span class=\"pl-smi\">instance2</span>.<span class=\"pl-smi\">colors</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span>\"red,blue,green\"</span>\n<span class=\"pl-smi\">instance2</span>.<span class=\"pl-en\">sayName</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span>\"Greg\";</span>\n<span class=\"pl-smi\">instance2</span>.<span class=\"pl-en\">sayAge</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span>27</span></pre></div>\n<h3>参考文章</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" rel=\"nofollow\">MDN - 继承与原型链</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1023021997355072\" rel=\"nofollow\">原型继承 - 廖雪峰</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog/issues/2\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mqyqingfeng/Blog/issues/2/hovercard\">JavaScript 深入之从原型到原型链 —— 冴羽</a></li>\n<li><a href=\"https://github.com/creeperyang/blog/issues/9\" data-hovercard-type=\"issue\" data-hovercard-url=\"/creeperyang/blog/issues/9/hovercard\">从<strong>proto</strong>和 prototype 来深入理解 JS 对象和原型链 </a></li>\n</ul>"
  },
  {
    "id": 16,
    "title": "babel使用全纪录",
    "labels": "开发者笔记",
    "created_at": "2018-03-20T09:25:28Z",
    "updated_at": "2019-05-18T01:57:39Z",
    "body_html": "<h2>说明</h2>\n<p>在react项目中使用<code>ant-design</code>的时候，配置<code>import antd/dist/antd.css</code>的<code>babel-plugin-import</code> 插件并未成功导入，搞的很心烦，环境配置不通,此篇将babel的使用梳理一遍！！！</p>\n<h2>配置文件.babelrc</h2>\n<p>Babel的配置文件是<code>.babelrc</code>，存放在项目的根目录下。使用Babel的第一步，就是配置这个文件。</p>\n<p>cmd命令行创建</p>\n<div class=\"highlight highlight-source-batchfile\"><pre> touch .babelrc</pre></div>\n<p>该文件用来设置转码规则和插件，基本格式如下。</p>\n<div class=\"highlight highlight-source-js\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>presets<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> [],\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>plugins<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> []\n}</pre></div>\n<p>presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。</p>\n<div class=\"highlight highlight-source-js\"><pre># <span class=\"pl-c1\">ES2015</span>转码规则\n$ npm install <span class=\"pl-k\">--</span>save<span class=\"pl-k\">-</span>dev babel<span class=\"pl-k\">-</span>preset<span class=\"pl-k\">-</span>es2015\n\n# react转码规则\n$ npm install <span class=\"pl-k\">--</span>save<span class=\"pl-k\">-</span>dev babel<span class=\"pl-k\">-</span>preset<span class=\"pl-k\">-</span>react\n\n# <span class=\"pl-c1\">ES7</span>不同阶段语法提案的转码规则（共有<span class=\"pl-c1\">4</span>个阶段），选装一个\n$ npm install <span class=\"pl-k\">--</span>save<span class=\"pl-k\">-</span>dev babel<span class=\"pl-k\">-</span>preset<span class=\"pl-k\">-</span>stage<span class=\"pl-k\">-</span><span class=\"pl-c1\">0</span>\n$ npm install <span class=\"pl-k\">--</span>save<span class=\"pl-k\">-</span>dev babel<span class=\"pl-k\">-</span>preset<span class=\"pl-k\">-</span>stage<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>\n$ npm install <span class=\"pl-k\">--</span>save<span class=\"pl-k\">-</span>dev babel<span class=\"pl-k\">-</span>preset<span class=\"pl-k\">-</span>stage<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>\n$ npm install <span class=\"pl-k\">--</span>save<span class=\"pl-k\">-</span>dev babel<span class=\"pl-k\">-</span>preset<span class=\"pl-k\">-</span>stage<span class=\"pl-k\">-</span><span class=\"pl-c1\">3</span></pre></div>\n<p>将规则写入<code>.babelrc</code></p>\n<div class=\"highlight highlight-source-js\"><pre> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>presets<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> [\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>es2015<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>react<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stage-2<span class=\"pl-pds\">\"</span></span>\n    ],\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>plugins<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> []\n  }</pre></div>\n<p>注意，以下所有Babel工具和模块的使用，都必须先写好<code>.babelrc</code>。</p>\n<h2>命令行转码babel-cli</h2>\n<p>Babel提供<code>babel-cli</code>工具，用于命令行转码。<br>\n听阮老师的，在全局环境和当前项目环境都安装。</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 全局</span>\n$ npm install --global babel-cli\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 本地</span>\n$ npm install --save-dev babel-cli</pre></div>\n<h4>基本用法</h4>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 转码结果输出到标准输出</span>\n$ babel example.js\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 转码结果写入一个文件</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> --out-file 或 -o 参数指定输出文件</span>\n$ babel example.js --out-file compiled.js\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 或者</span>\n$ babel example.js -o compiled.js\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 整个目录转码</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> --out-dir 或 -d 参数指定输出目录</span>\n$ babel src --out-dir lib\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 或者</span>\n$ babel src -d lib\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> -s 参数生成source map文件</span>\n$ babel src -d lib -s</pre></div>\n<h5>demo</h5>\n<ol>\n<li>es6</li>\n</ol>\n<pre><code>const arr = [1,2,3];\narr.forEach(item=&gt;{\n  console.log(item+1)\n})\n</code></pre>\n<ol start=\"2\">\n<li>.babelrc,使用<code>es2015</code>转码规则</li>\n</ol>\n<pre><code>{\n  \"presets\": [\n    \"es2015\"\n  ],\n  \"plugins\": []\n}\n</code></pre>\n<ol start=\"3\">\n<li>package.json添加命令</li>\n</ol>\n<pre><code>{\n  // ...\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"babel src -d lib\"\n  },\n}\n</code></pre>\n<p>最后，转码<code>npm run build</code></p>\n<pre><code>\"use strict\";\n\nvar arr = [1, 2, 3];\narr.forEach(function (item) {\n  console.log(item + 1);\n});\n</code></pre>\n<blockquote>\n<p>转码对应的在与src同级目录的lib目录下编译所有的文件。</p>\n</blockquote>\n<h2>babel-node</h2>\n<p>babel-cli工具自带一个<code>babel-node</code>命令，提供一个支持ES6的REPL环境。它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码。</p>\n<p>它不用单独安装，而是随babel-cli一起安装。然后，执行babel-node就进入PEPL环境。</p>\n<pre><code>$ babel-node\n&gt; (x =&gt; x * 2)(1)\n2\n</code></pre>\n<p>babel-node命令可以直接运行ES6脚本。将上面的代码放入脚本文件es6.js，然后直接运行。</p>\n<pre><code>$ babel-node es6.js\n2\n</code></pre>\n<p>babel-node也可以安装在项目中。</p>\n<pre><code>$ npm install --save-dev babel-cli\n</code></pre>\n<p>然后，改写package.json。</p>\n<pre><code>{\n  \"scripts\": {\n    \"script-name\": \"babel-node script.js\"\n  }\n}\n</code></pre>\n<p>上面代码中，使用babel-node替代node，这样script.js本身就不用做任何转码处理。</p>\n<h2>babel-core</h2>\n<p>如果某些代码需要调用Babel的API进行转码，就要使用babel-core模块。</p>\n<p>安装命令如下。</p>\n<pre><code>\n$ npm install babel-core --save\n</code></pre>\n<p>然后，在项目中就可以调用babel-core。</p>\n<pre><code>var babel = require('babel-core');\n\n// 字符串转码\nbabel.transform('code();', options);\n// =&gt; { code, map, ast }\n\n// 文件转码（异步）\nbabel.transformFile('filename.js', options, function(err, result) {\n  result; // =&gt; { code, map, ast }\n});\n\n// 文件转码（同步）\nbabel.transformFileSync('filename.js', options);\n// =&gt; { code, map, ast }\n\n// Babel AST转码\nbabel.transformFromAst(ast, code, options);\n// =&gt; { code, map, ast }\n</code></pre>\n<p>配置对象options，可以参看<a href=\"http://babeljs.io/docs/usage/options/\" rel=\"nofollow\">官方文档</a>。</p>\n<p>下面是一个例子。</p>\n<pre><code>var es6Code = 'let x = n =&gt; n + 1';\nvar es5Code = require('babel-core')\n  .transform(es6Code, {\n    presets: ['es2015']\n  })\n  .code;\n// '\"use strict\";\\n\\nvar x = function x(n) {\\n  return n + 1;\\n};'\n</code></pre>\n<p>上面代码中，transform方法的第一个参数是一个字符串，表示需要转换的ES6代码，第二个参数是转换的配置对象。</p>\n<h2>babel-polyfill</h2>\n<p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下。</p>\n<pre><code>\n$ npm install --save babel-polyfill\n</code></pre>\n<p>然后，在脚本头部，加入如下一行代码。</p>\n<pre><code>import 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n</code></pre>\n<p>Babel默认不转码的API非常多，详细清单可以查看 <code>babel-plugin-transform-runtime</code>模块的<a href=\"https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-runtime/src/definitions.js\">definitions.js</a>文件。</p>\n<h2>webpack 和 babel 配置 react 开发环境</h2>\n<h3>1. 安装</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ npm install --save react react-dom\n$ npm install --save-dev babel-cli babel-core babel-preset-react babel-preset-es2015 babel-preset-stage-0 babel-plugin-transform-runtime</pre></div>\n<div class=\"highlight highlight-source-json\"><pre> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>devDependencies<span class=\"pl-pds\">\"</span></span>: {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-cli<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^6.26.0<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-core<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^6.26.0<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-loader<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^7.1.2<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-plugin-transform-runtime<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^6.23.0<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-preset-es2015<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^6.24.1<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-preset-react<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^6.24.1<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-preset-stage-0<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^6.24.1<span class=\"pl-pds\">\"</span></span>,\n  }</pre></div>\n<h3>2. 建立 babel</h3>\n<p>创建 .babelrc 文件。</p>\n<div class=\"highlight highlight-source-js\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>presets<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>es2015<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>stage-0<span class=\"pl-pds\">\"</span></span>],\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>plugins<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> [\n    [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>transform-runtime<span class=\"pl-pds\">\"</span></span>] \n  ]\n}</pre></div>\n<h3>3.webpack配置</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">...</span>\nmodule<span class=\"pl-k\">:</span> {\n    rules<span class=\"pl-k\">:</span>[\n        {\n        test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>js<span class=\"pl-c1\">[x]</span><span class=\"pl-k\">?</span><span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n        exclude<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span>node_modules<span class=\"pl-pds\">/</span></span>,\n        use<span class=\"pl-k\">:</span> {\n          loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>babel-loader<span class=\"pl-pds\">'</span></span>,\n          options<span class=\"pl-k\">:</span> {\n            presets<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>es2015<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>stage-0<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>],\n            plugins<span class=\"pl-k\">:</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>transform-runtime<span class=\"pl-pds\">'</span></span>],\n          },\n        },\n      },\n    ]\n}</pre></div>\n<h2>补充：eslint</h2>\n<h3>1.安装</h3>\n<div class=\"highlight highlight-source-shell\"><pre>npm install eslint --save-dev\nnpm install eslint-plugin-import eslint-config-airbnb-base --save-dev</pre></div>\n<h3>2.eslint结合webpack配置</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">...</span>\nmodule<span class=\"pl-k\">:</span> {\n    rules<span class=\"pl-k\">:</span>[\n         {\n        test<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span><span class=\"pl-cce\">\\.</span>js<span class=\"pl-k\">$</span><span class=\"pl-pds\">/</span></span>,\n        exclude<span class=\"pl-k\">:</span><span class=\"pl-sr\"> <span class=\"pl-pds\">/</span>(node_modules)<span class=\"pl-pds\">/</span></span>,\n        loader<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>eslint-loader<span class=\"pl-pds\">'</span></span>,\n      },\n    ]\n}</pre></div>\n<h3>3.eslintrc.json规则配置</h3>\n<div class=\"highlight highlight-source-shell\"><pre>touch .eslintrc.json\ntouch .eslintignore</pre></div>\n<p>.eslintrc.json</p>\n<div class=\"highlight highlight-source-json\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>extends<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>airbnb-base<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>env<span class=\"pl-pds\">\"</span></span>: {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>browser<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">true</span>\n  },\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>parserOptions<span class=\"pl-pds\">\"</span></span>: {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ecmaVersion<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">6</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sourceType<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>module<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ecmaFeatures<span class=\"pl-pds\">\"</span></span>: {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jsx<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">true</span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>experimentalObjectRestSpread<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">true</span>\n    }\n  },\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rules<span class=\"pl-pds\">\"</span></span>: {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>semi<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">2</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>no-console<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-ii\">...</span>\n  }\n}</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre>npm install eslint-loader --save-dev</pre></div>\n<h3>4.package.json检查eslint语法</h3>\n<div class=\"highlight highlight-source-json\"><pre> ...\n <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scripts<span class=\"pl-pds\">\"</span></span>: {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lint<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eslint **/*.js<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lint-html<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eslint **/*.js -f html -o ./reports/lint-results.html<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lint-fix<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eslint --fix **/*.js<span class=\"pl-pds\">\"</span></span>\n  },\n  ...</pre></div>\n<h3>5.eslint结合babel</h3>\n<div class=\"highlight highlight-source-shell\"><pre>npm install babel-eslint --save-dev</pre></div>\n<p>然后创建或使用项目现有的 .eslintrc.json 文件并设置 parser 为 babel-eslint。.</p>\n<div class=\"highlight highlight-source-js\"><pre>  {\n<span class=\"pl-k\">+</span>   <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>parser<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>babel-eslint<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rules<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> {\n      <span class=\"pl-k\">...</span>\n    }\n  }</pre></div>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://babeljs.io/docs/plugins/preset-react/\" rel=\"nofollow\">React preset</a></li>\n<li><a href=\"https://reactjs.org/docs/try-react.html\" rel=\"nofollow\">React Installation</a></li>\n</ul>\n<h4>userful links</h4>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html\" rel=\"nofollow\">http://www.ruanyifeng.com/blog/2016/01/babel.html</a></li>\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/README.md\">Babel 手册</a></li>\n<li><a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md#toc-introduction\">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md#toc-introduction</a></li>\n</ul>"
  },
  {
    "id": 15,
    "title": "Interview List",
    "labels": "开发者笔记",
    "created_at": "2018-03-17T04:51:38Z",
    "updated_at": "2019-10-07T09:37:57Z",
    "body_html": "<h2>开始</h2>\n<blockquote>\n<p>总结前端求职面试中常问考点</p>\n</blockquote>\n<p>自我介绍，补充：先说一下自己的技术栈...<br>\n日期 ： 2018.12.23</p>\n<h2>Html</h2>\n<ul>\n<li>渲染机制，<code>link</code>,<code>head</code>,<code>script</code>,<code>body</code>\n<ul>\n<li><code>&lt;script defer=\"defer\" src=\"\"&gt;&lt;/script&gt;</code> 可以放在 <code>head</code>中 异步加载</li>\n</ul>\n</li>\n<li>盒模型\n<ul>\n<li>现在给定一个 width：200px的盒子，他的width，padding，border，margin都是怎样的</li>\n<li>box-zing</li>\n<li>当padding与margin值为百分比时，根据父元素的 width 计算</li>\n</ul>\n</li>\n<li>重绘与回流\n<ul>\n<li>回流一定会引起重绘，重绘不一定引发回流</li>\n</ul>\n</li>\n<li>html5有哪些新特性</li>\n<li>前端存储对比，cookie，sessionStorage，localstorage</li>\n<li>html的标签分哪几种，列举一些</li>\n</ul>\n<h2>Css</h2>\n<ul>\n<li>常用选择器</li>\n<li>选择器权值\n<ul>\n<li>[a,b,c,d] （内联,id，class，元素） !important是超体</li>\n</ul>\n</li>\n<li>媒体查询</li>\n<li>预处理器用过吗？优点</li>\n<li>清浮动,BFC\n<ul>\n<li><a href=\"https://juejin.im/post/5909db2fda2f60005d2093db\" rel=\"nofollow\">关于CSS-BFC深入理解</a></li>\n</ul>\n</li>\n<li>flex\n<ul>\n<li><code>flex-direction</code> 主轴方向</li>\n<li><code>justify-content</code></li>\n<li><code>align-items</code></li>\n<li><code>flex-wrap</code>换行</li>\n</ul>\n</li>\n<li>水平居中垂直居中\n<ul>\n<li>flex</li>\n<li>transform: translate(-50%, -50%)</li>\n<li>display:table-cell</li>\n</ul>\n</li>\n<li>动画属性，css3了解吗，主要用什么，animation，transition，translate，transform 这四个是干嘛的</li>\n<li>rem布局原理，优缺点，其他布局？</li>\n<li>移动端做过吗，适配问题。750px 的设计稿，你怎么做适配，给几种方案。</li>\n<li>浏览器兼容性遇到哪些？\n<ul>\n<li><a href=\"https://github.com/postcss/autoprefixer\">autoprefixer</a></li>\n</ul>\n</li>\n</ul>\n<h2>JS</h2>\n<ul>\n<li>'use strict' 是怎么解析的</li>\n<li>闭包</li>\n<li>作用域</li>\n<li>js运行机制，Event-loop，宏任务与微任务</li>\n<li>原型链(原型链，对象，构造函数之间的联系)</li>\n<li>this以及 ES6 箭头函数中的this，如何改变this</li>\n<li>设计模式(要求说出如何实现,应用,优缺点)</li>\n<li>什么是函数柯里化？JS的API有哪些应用到了它？</li>\n<li>解决跨域的，以及后续JSONP的原理和实现以及cors怎么设置</li>\n<li>函数不定参</li>\n<li>讲讲时间复杂度计算?</li>\n<li>ES6怎么编译成ES5,css-loader原理,过程\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27289600\" rel=\"nofollow\">Babel是如何读懂JS代码的</a> / <a href=\"https://github.com/starkwang/the-super-tiny-compiler-cn/blob/master/super-tiny-compiler-chinese.js\">the-super-tiny-compiler-cn</a></li>\n</ul>\n</li>\n<li>异步回调问题，promise，Generater</li>\n<li>es6新特性，你用过哪些？</li>\n<li>数组的构造函数上提供了什么方法？不是说原型上有什么方法</li>\n<li>ES6 的类和 ES5 的构造函数有什么区别？</li>\n</ul>\n<h2>框架类</h2>\n<ul>\n<li>单页面应用SEO优化 <a href=\"https://www.zhihu.com/question/51949678\" rel=\"nofollow\">https://www.zhihu.com/question/51949678</a></li>\n<li>三大框架原理</li>\n<li>react 的生命周期介绍一下</li>\n<li>组件传值</li>\n<li>怎么用数据流管理应用</li>\n<li>webpack都是怎么用的</li>\n<li>react 和 vue 有什么区别啊，特别注重考察个人的总结\n<ul>\n<li>设计思路，原理</li>\n<li>组件化实现</li>\n<li>指令辅助与函数式</li>\n<li>技术选型角度</li>\n<li>生态圈</li>\n<li>渲染效率</li>\n<li>测试</li>\n<li>学习曲线，数据流</li>\n</ul>\n</li>\n</ul>\n<h2>未分类</h2>\n<ul>\n<li>实现一个进度条加载，从0 到100</li>\n<li>一个url从浏览器输入到解析经历了什么</li>\n<li>怎么判断一个对象是 object，还是 array。用 Object.prototype.toString.call() 吧</li>\n<li>http 协议的一些原理、报文、缓存方案</li>\n<li>前端安全的认识</li>\n<li>最近做的一个项目，其中的难点，过程。</li>\n<li>中间件</li>\n<li>node中间层</li>\n<li>请解释单页应用是什么，如何使其对SEO友好。</li>\n</ul>\n<h2>优化</h2>\n<ul>\n<li>性能优化</li>\n<li>自己做过的前端优化</li>\n<li>webpack打包的优化</li>\n<li>有没有什么优化的经验，方案。不局限于打包。</li>\n<li>react的性能优化有没有了解过啊，你都是怎么做优化的。</li>\n</ul>\n<h2>手写</h2>\n<ul>\n<li>两栏三栏自适应布局</li>\n<li>写一个检测数据类型的方法</li>\n<li>深拷贝</li>\n<li>快速排序</li>\n<li>手写vue 或react组件</li>\n<li>手写es5继承</li>\n<li>函数节流与函数防抖</li>\n<li>bind函数</li>\n<li>手写一个设计模式</li>\n</ul>\n<h2>简历改进</h2>\n<ul>\n<li>mobx redux 的区别，从简历上挖掘出的点，去看你是否总结。<br>\nmobx 我做过简单的总结。</li>\n<li>什么是函数式，跟面向对象有什么区别，因为我简历写了正在学习 fp。</li>\n<li>你简历上说你看过 redux 的源码，简单说一下吧。<br>\n终于认可了我一次，说这个确实看过，能说出来。我有点尴尬了。</li>\n<li>你说你读过 《深入浅出 nodejs》，那你在项目中用过 node 吗。</li>\n<li>你用过 vue, react。你觉得他们有什么区别。</li>\n<li>最近在看什么书</li>\n<li>除了写blog，还有什么其他的，工作之外做的</li>\n<li>怎么学习前端知识啊</li>\n</ul>\n<h2>思考</h2>\n<ul>\n<li>我学习快不快，什么是我特有的，别人学需要的成本大不大，我的优势在哪里？</li>\n<li>继承除了面试问还有什么用？还有其他的一些<code>这有什么用？</code></li>\n<li>技术揭秘 上拉加载原理</li>\n<li>英语 翻译 校对</li>\n<li>redux源码，源码学习</li>\n</ul>\n<h4>参考资料</h4>\n<ul>\n<li><a href=\"https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/README.md\">front-end-interview-handbook</a></li>\n<li><a href=\"https://github.com/InterviewMap/CS-Interview-Knowledge-Map\">CS-Interview-Knowledge-Map</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"265754502\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/sunyongjian/blog/issues/32\" data-hovercard-type=\"issue\" data-hovercard-url=\"/sunyongjian/blog/issues/32/hovercard\" href=\"https://github.com/sunyongjian/blog/issues/32\">sunyongjian/blog#32</a></li>\n</ul>"
  },
  {
    "id": 14,
    "title": "使用fis3构建工程化项目",
    "labels": "开发者笔记",
    "created_at": "2018-03-14T03:23:22Z",
    "updated_at": "2019-05-18T01:58:53Z",
    "body_html": "<h2>介绍</h2>\n<p><a href=\"http://fis.baidu.com/fis3/docs/beginning/intro.html\" rel=\"nofollow\">FIS3</a> 是面向前端的工程构建工具。解决前端工程中性能优化、资源加载（异步、同步、按需、预加载、依赖管理、合并、内嵌）、模块化开发、自动化工具、开发规范、代码部署等问题。（官方文档）</p>\n<p>我把它定义为一个项目后期部署上线的工具,可以使用它压缩css，js与图片压缩（png），支持Css精灵图的合并，做到文件指纹（添加md5戳），方便项目部署的更新迭代，本地调试可模拟线上发布后的状态，便于调试。</p>\n<h2>安装</h2>\n<pre><code>npm install -g fis3\n</code></pre>\n<h2>配置文件</h2>\n<blockquote>\n<p>默认为fis.conf.js文件</p>\n</blockquote>\n<h4>fis.match()</h4>\n<pre><code>fis.match(selector, props);\n</code></pre>\n<blockquote>\n<p>使用props配置规则编译selector匹配到的文件</p>\n</blockquote>\n<h4>fis.media()</h4>\n<p>fis.media() 接口提供多种状态功能，比如有些配置是仅供开发环境下使用，有些则是仅供生产环境使用的。</p>\n<pre><code>fis.match('*', {\n  useHash: false\n});\n\nfis.media('prod').match('*.js', {\n  optimizer: fis.plugin('uglify-js')\n});\n</code></pre>\n<pre><code>fis3 release &lt;media&gt;\n</code></pre>\n<ul>\n<li> 配置的 media 值</li>\n</ul>\n<pre><code>fis3 release prod\n</code></pre>\n<p>编译时使用 prod 指定的编译配置，即对 js 进行压缩。</p>\n<p>如上，fis.media() 可以使配置文件变为多份（多个状态，一个状态一份配置）。</p>\n<pre><code>fis.media('rd').match('*', {\n  deploy: fis.plugin('http-push', {\n    receiver: 'http://remote-rd-host/receiver.php'\n  })\n});\n\nfis.media('qa').match('*', {\n  deploy: fis.plugin('http-push', {\n    receiver: 'http://remote-qa-host/receiver.php'\n  })\n});\n</code></pre>\n<ul>\n<li>fis3 release rd push 到 RD 的远端机器上</li>\n<li>fis3 release qa push 到 QA 的远端机器上</li>\n</ul>\n<blockquote>\n<p>media dev 已经被占用，默认情况下不加  参数时默认为 dev</p>\n</blockquote>\n<h4>fis3 inspect</h4>\n<pre><code>// 在项目根目录下执行查看项目文件将如何被编译处理\nfis3 inspect\n//查看指定media的分配情况\nfis3 inspect &lt;media&gt;\n</code></pre>\n<h2>内置插件</h2>\n<p>在本地执行<code>npm install -g fis3</code>安装 fis3 命令行工具后，将会支持一下内置的插件，可直接使用命令行工具配置，操作使用。</p>\n<ul>\n<li><a href=\"https://github.com/fex-team/fis-optimizer-clean-css\">fis-optimizer-clean-css</a> 压缩css</li>\n</ul>\n<pre><code>fis\n  .media('prod')\n  .match('*.css', {\n    optimizer: fis.plugin('clean-css')\n  });\n</code></pre>\n<ul>\n<li><a href=\"https://github.com/fex-team/fis-optimizer-uglify-js\">fis-optimizer-uglify-js</a> 压缩js(+混淆)</li>\n</ul>\n<pre><code>fis\n  .media('prod')\n  .match('*.js', {\n    optimizer: fis.plugin('uglify-js', {\n    })\n  });\n\n</code></pre>\n<ul>\n<li><a href=\"https://github.com/fex-team/fis-optimizer-png-compressor\">fis-optimizer-png-compressor</a> 压缩png图片</li>\n</ul>\n<pre><code>fis\n  .media('prod')\n  .match('*.png', {\n    optimizer: fis.plugin('png-compressor', {\n\n      // pngcrush or pngquant\n      // default is pngcrush\n      type : 'pngquant'\n    })\n  });\n\n</code></pre>\n<ul>\n<li><a href=\"https://github.com/fex-team/fis-spriter-csssprites\">fis-spriter-csssprites</a> CssSprite图片合并</li>\n</ul>\n<pre><code>// 启用 fis-spriter-csssprites 插件\nfis.match('::package', {\n  spriter: fis.plugin('csssprites')\n})\n\n// 对 CSS 进行图片合并\nfis.match('*.css', {\n  // 给匹配到的文件分配属性 `useSprite`\n  useSprite: true\n});\n\n</code></pre>\n<p>　<br>\n　　针对 css 规则中的 background-image 做图片优化，将多张零碎小图片合并，并自动修改 css 背景图片位置。</p>\n<blockquote>\n<p>此插件并不会处理所有的 background-image 规则，而只会处理 url 中带 ?__sprite 图片的规则。</p>\n</blockquote>\n<h2>一套配置</h2>\n<p>FIS3 做压缩、文件指纹、图片合并、资源定位，现在把这些功能组合起来，配置文件如下</p>\n<pre><code>// 加 md5\nfis.match('*.{js,css,png}', {\n  useHash: true\n});\n\n// 启用 fis-spriter-csssprites 插件\nfis.match('::package', {\n  spriter: fis.plugin('csssprites')\n});\n\n// 对 CSS 进行图片合并\nfis.match('*.css', {\n  // 给匹配到的文件分配属性 `useSprite`\n  useSprite: true\n});\n\nfis.match('*.js', {\n  // fis-optimizer-uglify-js 插件进行压缩，已内置\n  optimizer: fis.plugin('uglify-js')\n});\n\nfis.match('*.css', {\n  // fis-optimizer-clean-css 插件进行压缩，已内置\n  optimizer: fis.plugin('clean-css')\n});\n\nfis.match('*.png', {\n  // fis-optimizer-png-compressor 插件进行压缩，已内置\n  optimizer: fis.plugin('png-compressor')\n});\n</code></pre>\n<p>可能有时候开发的时候不需要压缩、合并图片、也不需要 hash。那么给上面配置追加如下配置；</p>\n<pre><code>fis.media('debug').match('*.{js,css,png}', {\n  useHash: false,\n  useSprite: false,\n  optimizer: null\n})\n</code></pre>\n<blockquote>\n<p>fis3 release debug 启用 media debug 的配置，覆盖上面的配置，把诸多功能关掉。</p>\n</blockquote>\n<h2>构建发布</h2>\n<p>在项目根目录执行下面命令构建发布，在项目根目录下的<code>fis-conf.js</code>文件内书写配置文件。</p>\n<pre><code>// 构建发布到当前项目父级目录的 dist 目录下\nfis3 release -d ../dist\n\n//构建发布到当前项目下的 output 目录下\nfis3 release -d ./output\n\n//发布到其他盘 （Windows）\nfis3 release -d D:\\output\n\n\n</code></pre>\n<blockquote>\n<p>在构建发布命令执行后，相对于<code>根目录</code>进行版本发布，这使用做<code>线上使用</code>的</p>\n</blockquote>\n<h2>调试</h2>\n<p>FIS3 构建后，默认情况下会对资源的 URL 进行修改，改成绝对路径。这时候本地双击打开文件是无法正常工作的。这给开发调试带来了绝大的困惑。</p>\n<p>FIS3 内置一个简易 Web Server，可以方便调试构建结果。</p>\n<h4>1. 本地发布</h4>\n<pre><code>fis3 release\nfis3 release -w  // 文件监听\nfis3 release -wL //浏览器自动刷新\n</code></pre>\n<p>不加<code>-d</code> 参数默认被发布到内置 Web Server的根目录下，当启动服务时访问此目录下的资源。</p>\n<h4>2.启动</h4>\n<pre><code>fis3 server start\n</code></pre>\n<p>启动本地 Web Server，当此 Server 启动后，会自动浏览器打开 <a href=\"http://127.0.0.1:8080%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3\" rel=\"nofollow\">http://127.0.0.1:8080，默认监听端口</a> 8080</p>\n<p>通过执行以下命令得到更多启动参数，可以设置不同的端口号（当 8080 占用时）</p>\n<pre><code>fis3 server -h\n</code></pre>\n<h4>3.预览</h4>\n<p>FIS3 内置的 Server 是常驻的，如果不重启计算机或者调用命令关闭是不会关闭的。</p>\n<p>所以后续只需访问对应链接即可，而不需要每次 release 就启动一次 server。</p>\n<blockquote>\n<p>程序停止用快捷键 <code>CTRL+c</code>,测试不管用</p>\n</blockquote>\n<h2>安装一些插件</h2>\n<ul>\n<li>fis-parser-less：less 预处理插件</li>\n<li>fis3-postpackager-loader：可对页面散列文件进行合并</li>\n</ul>\n<blockquote>\n<p>给 loader 插件配置 allInOne 属性，即可对散列的引用链接进行合并，而不需要进行配置 packTo 指定合并包名。</p>\n</blockquote>\n<ul>\n<li>es6 的打包使用babel</li>\n<li>使用相对路径\n<ul>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"180229508\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/fex-team/fis3/issues/990\" data-hovercard-type=\"issue\" data-hovercard-url=\"/fex-team/fis3/issues/990/hovercard\" href=\"https://github.com/fex-team/fis3/issues/990\">fex-team/fis3#990</a></li>\n<li><a href=\"https://github.com/fex-team/fis3-hook-relative\">https://github.com/fex-team/fis3-hook-relative</a></li>\n</ul>\n</li>\n<li>fis3实战\n<ul>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"258288409\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/zhiqiang21/blog/issues/41\" data-hovercard-type=\"issue\" data-hovercard-url=\"/zhiqiang21/blog/issues/41/hovercard\" href=\"https://github.com/zhiqiang21/blog/issues/41\">zhiqiang21/blog#41</a></li>\n</ul>\n</li>\n</ul>"
  },
  {
    "id": 11,
    "title": "js编程风格",
    "labels": "JavaScript",
    "created_at": "2018-03-01T09:22:58Z",
    "updated_at": "2018-06-20T05:15:18Z",
    "body_html": "<p>框架能够让我们跑的更快，但只有了解原生的JS才能让我们走的更远。</p>\n<h2>1.单一<code>var</code></h2>\n<p>这条规则的意思是，把函数内部的所有变量，放到顶部声明。比如：</p>\n<div class=\"highlight highlight-source-js\"><pre>    <span class=\"pl-c\"><span class=\"pl-c\">//</span>示例</span>\n    <span class=\"pl-k\">function</span> <span class=\"pl-en\">A</span>(){\n      <span class=\"pl-k\">var</span> a <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n          b <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>,\n          c <span class=\"pl-k\">=</span> a <span class=\"pl-k\">+</span> b ;\n    }</pre></div>\n<p>优点：</p>\n<ul>\n<li>便于查找函数内部使用的局部变量</li>\n<li>防止变量未定义时就被使用</li>\n<li>防止变量声明提升后引发的误解<br>\n　</li>\n</ul>\n<p>关于第三点，这里举个例子说明：</p>\n<div class=\"highlight highlight-source-js\"><pre>  <span class=\"pl-k\">var</span> x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>;\n\n  (<span class=\"pl-k\">function</span> () {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(x);<span class=\"pl-c\"><span class=\"pl-c\">//</span>第一处输出 ，注意结果</span>\n    <span class=\"pl-k\">var</span> x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>;\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(x);<span class=\"pl-c\"><span class=\"pl-c\">//</span>第二处输出 2，没问题</span>\n  })();</pre></div>\n<p>从代码上看，第二处输出肯定没问题，可能会有人认为第一处输出的是1，因为此时在函数内部还没声明变量x，根据作用域链，向外层查找的话，x值为1。但是实际输出的值应该是undefined，因为js允许在函数任何地方声明变量，并且无论在哪里声明都等同于在顶部声明，这就是声明提升。所以上面的代码相当于:</p>\n<div class=\"highlight highlight-source-js\"><pre>  <span class=\"pl-k\">var</span> x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>;\n\n  (<span class=\"pl-k\">function</span> () {\n    <span class=\"pl-k\">var</span> x;\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(x);<span class=\"pl-c\"><span class=\"pl-c\">//</span>此时已声明 未赋值</span>\n    x <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>;          <span class=\"pl-c\"><span class=\"pl-c\">//</span>赋值</span>\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(x);\n  })();\n} </pre></div>\n<p>为了避免可能出现的问题，不如把变量声明都放在代码块的头部。</p>\n<blockquote>\n<p>注意：所有变量声明都放在函数的头部;所有函数都在使用之前定义。</p>\n</blockquote>\n<h2>2.全局变量大写</h2>\n<p>Javascript最大的语法缺点，可能就是全局变量对于任何一个代码块，都是可读可写。这对代码的模块化和重复使用，非常不利。</p>\n<p>避免使用全局变量；如果不得不使用，用大写字母表示变量名，比如<strong>UPPER_CASE</strong>。</p>\n<h2>3.严格相等</h2>\n<p>Javascript有两个表示\"相等\"的运算符：\"相等\"（==）和\"严格相等\"（===），使用<code>==</code>有可能促使类型转换，建议主加<code>===</code>。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">1</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">1</span> <span class=\"pl-k\">==</span> [<span class=\"pl-c1\">1</span>]; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">1</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">true</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>0<span class=\"pl-pds\">'</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-c1\">0</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">false</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<p>你有什么理由不用我？</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">===</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<h2>4.for循环缓存length</h2>\n<p>使用for循环时，缓存长度值通常用使用for循环遍历数组时，会采用以下写法：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">for</span>(<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;i<span class=\"pl-k\">&lt;</span><span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span>;i<span class=\"pl-k\">++</span>){\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 具体操作</span>\n}</pre></div>\n<p>这段代码存在的问题在于，在循环的每个迭代步骤，都必须访问一次arr的长度。如果arr是静态数值还好，但是我们在使用js时可能会碰到arr是dom元素对象，由于dom对象载页面下是活动的查询，这个长度查询就相当耗时，//用len缓存长度值</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">for</span>(<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>,len <span class=\"pl-k\">=</span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">length</span>;i<span class=\"pl-k\">&lt;</span>len;i<span class=\"pl-k\">++</span>){\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 具体操作</span>\n}</pre></div>\n<p>按照上面的代码，我们在第一次获取长度值时就缓存这个长度值，就可以避免上述问题。</p>\n<h2>5.模块化</h2>\n<p>拒绝全局function到底，引入模块模式　</p>\n<div class=\"highlight highlight-source-js\"><pre>      <span class=\"pl-k\">var</span> s <span class=\"pl-k\">=</span> <span class=\"pl-c1\">20</span>;\n       <span class=\"pl-k\">function</span> <span class=\"pl-en\">test</span>(<span class=\"pl-smi\">s</span>){\n       }\n       <span class=\"pl-k\">function</span> <span class=\"pl-en\">go</span>(){\n           <span class=\"pl-en\">test</span>(s);\n           <span class=\"pl-smi\">$</span>.<span class=\"pl-en\">ajax</span>({})\n       }\n       <span class=\"pl-en\">$</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>#test<span class=\"pl-pds\">'</span></span>).<span class=\"pl-c1\">click</span>(<span class=\"pl-k\">function</span>(){\n           <span class=\"pl-en\">go</span>();\n       })</pre></div>\n<h4>base module</h4>\n<div class=\"highlight highlight-source-js\"><pre>      <span class=\"pl-k\">var</span> index <span class=\"pl-k\">=</span> {\n          <span class=\"pl-en\">init</span>(){\n\n          },\n          <span class=\"pl-en\">datas</span>(){\n\n          },\n          <span class=\"pl-en\">bind</span>(){\n              <span class=\"pl-k\">var</span> y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n              <span class=\"pl-smi\">y</span>.<span class=\"pl-smi\">btn</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">$</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>#test<span class=\"pl-pds\">'</span></span>);\n          },\n          <span class=\"pl-en\">render</span>(){\n              <span class=\"pl-k\">var</span> y <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n              <span class=\"pl-smi\">$</span>.<span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">y</span>.<span class=\"pl-smi\">btn</span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>click<span class=\"pl-pds\">'</span></span>,func,<span class=\"pl-c1\">this</span>);\n          },\n          <span class=\"pl-en\">func</span>(){\n\n          }\n      }\n      <span class=\"pl-smi\">index</span>.<span class=\"pl-en\">init</span>();\n      <span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> index;</pre></div>\n<h2>6.优化if...else嵌套</h2>\n<h3>三元</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">if</span> (foo) <span class=\"pl-en\">bar</span>(); <span class=\"pl-k\">else</span> <span class=\"pl-en\">baz</span>(); <span class=\"pl-k\">==&gt;</span> foo<span class=\"pl-k\">?</span><span class=\"pl-en\">bar</span>()<span class=\"pl-k\">:</span><span class=\"pl-en\">baz</span>(); \n<span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>foo) <span class=\"pl-en\">bar</span>(); <span class=\"pl-k\">else</span> <span class=\"pl-en\">baz</span>(); <span class=\"pl-k\">==&gt;</span> foo<span class=\"pl-k\">?</span><span class=\"pl-en\">baz</span>()<span class=\"pl-k\">:</span><span class=\"pl-en\">bar</span>(); \n<span class=\"pl-k\">if</span> (foo) <span class=\"pl-k\">return</span> <span class=\"pl-en\">bar</span>(); <span class=\"pl-k\">else</span> <span class=\"pl-k\">return</span> <span class=\"pl-en\">baz</span>(); <span class=\"pl-k\">==&gt;</span> <span class=\"pl-k\">return</span> foo<span class=\"pl-k\">?</span><span class=\"pl-en\">bar</span>()<span class=\"pl-k\">:</span><span class=\"pl-en\">baz</span>(); \n</pre></div>\n<h3>&amp;&amp; 和 ||</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">if</span> (foo) <span class=\"pl-en\">bar</span>(); <span class=\"pl-k\">==&gt;</span> foo<span class=\"pl-k\">&amp;&amp;</span><span class=\"pl-en\">bar</span>(); \n<span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>foo) <span class=\"pl-en\">bar</span>(); <span class=\"pl-k\">==&gt;</span> foo<span class=\"pl-k\">||</span><span class=\"pl-en\">bar</span>(); </pre></div>\n<h4>参考</h4>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" rel=\"nofollow\">http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38066626\" rel=\"nofollow\">https://zhuanlan.zhihu.com/p/38066626</a></li>\n</ul>"
  },
  {
    "id": 10,
    "title": "函数声明和函数表达式的区别",
    "labels": "JavaScript",
    "created_at": "2018-03-01T08:24:18Z",
    "updated_at": "2019-10-13T15:55:11Z",
    "body_html": "<h2>函数声明（funDeclaration）</h2>\n<p>无论在哪儿定义函数,只要是外层函数并且满足不被包裹，就都可以进行全局范围的调用</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">foo</span>() {}</pre></div>\n<p>在函数体内部的函数声明无法提升到全局，只能提升到函数体内顶部(块级作用域空间)</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">test</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">1</span>);\n\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">test2</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">2</span>);\n  }\n}\n<span class=\"pl-en\">test</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 1</span>\n<span class=\"pl-en\">test2</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> Uncaught ReferenceError: test2 is not defined</span></pre></div>\n<p>函数体内部执行：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">test</span>() {\n  <span class=\"pl-en\">test2</span>();\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">test2</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">2</span>);\n  }\n}\n<span class=\"pl-en\">test</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 2</span></pre></div>\n<p>在外部要想访问函数内部申明的函数，需要先<code>return</code>出来:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">test</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">1</span>);\n\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">test2</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">2</span>);\n  }\n  <span class=\"pl-k\">return</span> {\n    test2<span class=\"pl-k\">:</span> test2\n  };\n}\n<span class=\"pl-en\">test</span>().<span class=\"pl-en\">test2</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> 2</span></pre></div>\n<h2>函数表达式（funExpression）</h2>\n<p>函数表达式需要等到表达式赋值 <strong>完成</strong> 才可以</p>\n<blockquote>\n<p>换言之使用<strong>var</strong>来声明函数，就会涉及到变量的声明提升，先拿出变量名定义为 undefined，再随着逻辑顺序进行赋值<code>先定义，后使用</code></p>\n</blockquote>\n<pre><code>var foo = function () { }\n</code></pre>\n<h3>demo1</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">Toast</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> hello world</span>\n\n<span class=\"pl-en\">showToast</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> shwoToast is not a function</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-en\">showToast</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>123<span class=\"pl-pds\">'</span></span>);\n};\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">Toast</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello world<span class=\"pl-pds\">'</span></span>);\n}</pre></div>\n<blockquote>\n<p>在这里只需要把<code>showToast</code>提前就好了</p>\n</blockquote>\n<h3>demo2</h3>\n<h4>主流浏览器解析，ie11+</h4>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> sayHello;\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> sayHey); <span class=\"pl-c\"><span class=\"pl-c\">//</span>=&gt;undefined</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> sayHo); <span class=\"pl-c\"><span class=\"pl-c\">//</span>=&gt;undefined</span>\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">true</span>) {\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHey</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHey<span class=\"pl-pds\">'</span></span>);\n  }\n  <span class=\"pl-en\">sayHello</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHo</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHello<span class=\"pl-pds\">'</span></span>);\n  };\n} <span class=\"pl-k\">else</span> {\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHey</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHey2<span class=\"pl-pds\">'</span></span>);\n  }\n  <span class=\"pl-en\">sayHello</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHo</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHello2<span class=\"pl-pds\">'</span></span>);\n  };\n}\n<span class=\"pl-en\">sayHey</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sayHey</span>\n<span class=\"pl-en\">sayHello</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sayHello</span></pre></div>\n<p>在花括号里面声明的函数在进行预解析时只会提升函数名，不会提升函数体，所以不管 if 条件是否为真，函数体都不会提升，永远是 undefined,接下来随着 if 条件判断进行解析赋值，当然是走 ture 方法。</p>\n<h4>ie9，ie10</h4>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> sayHello;\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> sayHey); <span class=\"pl-c\"><span class=\"pl-c\">//</span>=&gt;function</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> sayHo); <span class=\"pl-c\"><span class=\"pl-c\">//</span>=&gt;undefined</span>\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">true</span>) {\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHey</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHey<span class=\"pl-pds\">'</span></span>);\n  }\n  <span class=\"pl-en\">sayHello</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHo</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHello<span class=\"pl-pds\">'</span></span>);\n  };\n} <span class=\"pl-k\">else</span> {\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHey</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHey2<span class=\"pl-pds\">'</span></span>);\n  }\n  <span class=\"pl-en\">sayHello</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHo</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHello2<span class=\"pl-pds\">'</span></span>);\n  };\n}\n<span class=\"pl-en\">sayHey</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sayHey2</span>\n<span class=\"pl-en\">sayHello</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sayHello</span></pre></div>\n<p>在这里的 ie 将所有的函数声明进行了提升，从而由<code>sayHey2</code>替代了<code>sayHey</code>,函数表达式的在顺着条件判断进行了定义，执行为<code>true</code>的情况，进行赋值解析。</p>\n<h4>ie8</h4>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> sayHello;\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> sayHey); <span class=\"pl-c\"><span class=\"pl-c\">//</span>=&gt;function</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> sayHello); <span class=\"pl-c\"><span class=\"pl-c\">//</span>=&gt;function</span>\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">true</span>) {\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHey</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHey<span class=\"pl-pds\">'</span></span>);\n  }\n  <span class=\"pl-en\">sayHello</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHo</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHello<span class=\"pl-pds\">'</span></span>);\n  };\n} <span class=\"pl-k\">else</span> {\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHey</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHey2<span class=\"pl-pds\">'</span></span>);\n  }\n  <span class=\"pl-en\">sayHello</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHo</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHello2<span class=\"pl-pds\">'</span></span>);\n  };\n}\n<span class=\"pl-en\">sayHey</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sayHey2</span>\n<span class=\"pl-en\">sayHello</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sayHello</span></pre></div>\n<p>ie8 在这里处理的比较奇葩，正常的函数申明提升，但是却也将条件判断为假的情况进行了提升，我们看到<code>typeof (sayHello)=&gt;function</code></p>\n<h3>结论</h3>\n<p>由于函数声明提升的差异，想要在条件判断中定义不同的函数方法，应该采用定义函数表达式的方法，这样就在各个浏览器中拿到相同的函数方法，得到相同的结果。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> sayHello;\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> sayHey); <span class=\"pl-c\"><span class=\"pl-c\">//</span>=&gt;undefined    ie8以下解析为function</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> sayHo); <span class=\"pl-c\"><span class=\"pl-c\">//</span>=&gt;undefined</span>\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">true</span>) {\n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">sayHey</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHey</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHey<span class=\"pl-pds\">'</span></span>);\n  };\n} <span class=\"pl-k\">else</span> {\n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">sayHey</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHey</span>() {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sayHey2<span class=\"pl-pds\">'</span></span>);\n  };\n}\n<span class=\"pl-en\">sayHey</span>(); <span class=\"pl-c\"><span class=\"pl-c\">//</span> =&gt; sayHey</span></pre></div>\n<h5>参考</h5>\n<ul>\n<li><a href=\"http://www.cnblogs.com/isaboy/p/javascript_function.html\" rel=\"nofollow\">http://www.cnblogs.com/isaboy/p/javascript_function.html</a></li>\n</ul>"
  },
  {
    "id": 9,
    "title": "React组件编码规范化",
    "labels": "开发者笔记",
    "created_at": "2018-02-26T08:02:08Z",
    "updated_at": "2019-09-02T03:25:58Z",
    "body_html": "<h3>1.UI组件和container组件</h3>\n<p>UI组件是构成前端界面的基础单元，它们不涉及业务逻辑，无生命周期函数，只负责单纯的渲染，所有数据都通过 props 传入。</p>\n<p><strong>UI组件分为两种情况，有状态组件和无状态组件:</strong></p>\n<ul>\n<li>如果是无状态组件，则使用纯函数，我们大部分的UI组件都是这种纯函数。</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> bad (relying on function name inference is discouraged)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">Listing</span> <span class=\"pl-k\">=</span> ({ hello }) <span class=\"pl-k\">=&gt;</span> (\n  <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>{hello}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>\n);\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> good</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">Listing</span>({ hello }) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>{hello}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>;\n}</pre></div>\n<ul>\n<li>如果模块有内部状态或者是refs, 推荐使用 class extends React.Component</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> bad</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">Listing</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-en\">createClass</span>({\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> ...</span>\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">hello</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>;\n  }\n});\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> good</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Listing</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> ...</span>\n  <span class=\"pl-en\">render</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">&lt;</span>div<span class=\"pl-k\">&gt;</span>{<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">state</span>.<span class=\"pl-smi\">hello</span>}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>div<span class=\"pl-k\">&gt;</span>;\n  }\n}</pre></div>\n<h3>2. components导出默认模块</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">export</span> { <span class=\"pl-c1\">default</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">XScroll</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./XScroll<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">export</span> { <span class=\"pl-c1\">default</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">TypeList</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>./TypeList<span class=\"pl-pds\">'</span></span>;</pre></div>\n<h3>3.总是在Refs里使用回调函数</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> bad</span>\n<span class=\"pl-k\">&lt;</span>Foo\n  ref<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>myRef<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> good</span>\n<span class=\"pl-k\">&lt;</span>Foo\n  ref<span class=\"pl-k\">=</span>{(<span class=\"pl-smi\">ref</span>) <span class=\"pl-k\">=&gt;</span> { <span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">myRef</span> <span class=\"pl-k\">=</span> ref; }}\n<span class=\"pl-k\">/</span><span class=\"pl-k\">&gt;</span></pre></div>\n<h3>4.this.props.children</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">NotesList</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e\">React</span>.<span class=\"pl-smi\">Component</span>{\n       <span class=\"pl-en\">render</span>() {\n        <span class=\"pl-k\">return</span> (\n            <span class=\"pl-k\">&lt;</span>ol<span class=\"pl-k\">&gt;</span>\n              {\n                <span class=\"pl-smi\">React</span>.<span class=\"pl-smi\">Children</span>.<span class=\"pl-en\">map</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">props</span>.<span class=\"pl-smi\">children</span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">child</span>) {\n                  <span class=\"pl-k\">return</span> <span class=\"pl-k\">&lt;</span>li<span class=\"pl-k\">&gt;</span>{child}<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>li<span class=\"pl-k\">&gt;</span>;\n                })\n              }\n            <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>ol<span class=\"pl-k\">&gt;</span>\n          );\n       }\n    }\n\n\n      <span class=\"pl-smi\">ReactDOM</span>.<span class=\"pl-en\">render</span>(\n        <span class=\"pl-k\">&lt;</span>NotesList<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>span<span class=\"pl-k\">&gt;</span>hello<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>span<span class=\"pl-k\">&gt;</span>\n          <span class=\"pl-k\">&lt;</span>span<span class=\"pl-k\">&gt;</span>world<span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>span<span class=\"pl-k\">&gt;</span>\n        <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>NotesList<span class=\"pl-k\">&gt;</span>,\n        <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>example<span class=\"pl-pds\">'</span></span>)\n      );</pre></div>\n<ul>\n<li>使用 React.Children.map 来遍历组件子节点\n<blockquote>\n<p>可以避免 this.props.children 的值不确定</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>组件状态</th>\n<th>this.props.children 获取结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>没有子节点</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>一个子节点</td>\n<td>obj</td>\n</tr>\n<tr>\n<td>多个子节点</td>\n<td>array</td>\n</tr>\n</tbody>\n</table>\n<h3>5.PropTypes</h3>\n<ul>\n<li>组件类的 PropTypes 属性，就是用来验证组件实例的属性是否符合要求</li>\n</ul>\n<pre><code>      var data = 123;\n      class MyTitle extends React.Component {\n        propTypes :{\n          title: React.PropTypes.string.isRequired,\n        }\n        render() {\n          return &lt;h1&gt; {this.props.title} &lt;/h1&gt;;\n        }\n      }\n\n\n      ReactDOM.render(\n        &lt;MyTitle title={data} /&gt;,\n        document.getElementById('example')\n      );\n</code></pre>\n<h3>6.模块生命周期</h3>\n<ul>\n<li><code>class extends React.Component</code> 的生命周期函数:</li>\n</ul>\n<ol>\n<li>可选的 <code>static</code> 方法</li>\n<li><code>constructor</code> 构造函数</li>\n<li><code>getChildContext</code> 获取子元素内容</li>\n<li><code>componentWillMount</code> 模块渲染前</li>\n<li><code>componentDidMount</code> 模块渲染后</li>\n<li><code>componentWillReceiveProps</code> 模块将接受新的数据</li>\n<li><code>shouldComponentUpdate</code> 判断模块需不需要重新渲染</li>\n<li><code>componentWillUpdate</code> 上面的方法返回 <code>true</code>， 模块将重新渲染</li>\n<li><code>componentDidUpdate</code> 模块渲染结束</li>\n<li><code>componentWillUnmount</code> 模块将从DOM中清除, 做一些清理任务</li>\n<li><em>点击回调或者事件处理器</em> 如 <code>onClickSubmit()</code> 或 <code>onChangeDescription()</code></li>\n<li><em><code>render</code> 里的 getter 方法</em> 如 <code>getSelectReason()</code> 或 <code>getFooterContent()</code></li>\n<li><em>可选的 render 方法</em> 如 <code>renderNavigation()</code> 或 <code>renderProfilePicture()</code></li>\n<li><code>render</code> render() 方法</li>\n</ol>\n<ul>\n<li>\n<p>如何定义 <code>propTypes</code>, <code>defaultProps</code>, <code>contextTypes</code>, 等等其他属性...</p>\n<div class=\"highlight highlight-source-js-jsx\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">React</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>react<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">PropTypes</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>prop-types<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-smi\">propTypes</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-c1\"><span class=\"pl-s\">id</span>:</span> <span class=\"pl-smi\">PropTypes</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">number</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">isRequired</span>,\n  <span class=\"pl-c1\"><span class=\"pl-s\">url</span>:</span> <span class=\"pl-smi\">PropTypes</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">string</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">isRequired</span>,\n  <span class=\"pl-c1\"><span class=\"pl-s\">text</span>:</span> <span class=\"pl-smi\">PropTypes</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">string</span>,\n};\n\n<span class=\"pl-k\">const</span> <span class=\"pl-smi\">defaultProps</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-c1\"><span class=\"pl-s\">text</span>:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello World<span class=\"pl-pds\">'</span></span>,\n};\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Link</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">React</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Component</span> {\n  <span class=\"pl-k\">static</span> <span class=\"pl-en\"><span class=\"pl-s\">methodsAreOk</span></span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n  }\n\n  <span class=\"pl-en\"><span class=\"pl-s\">render</span></span>() {\n    <span class=\"pl-k\">return</span> &lt;<span class=\"pl-ent\">a</span> <span class=\"pl-e\">href</span><span class=\"pl-k\">=</span><span class=\"pl-pse\">{</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">props</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">url</span><span class=\"pl-pse\">}</span> <span class=\"pl-e\">data-id</span><span class=\"pl-k\">=</span><span class=\"pl-pse\">{</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">props</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">id</span><span class=\"pl-pse\">}</span>&gt;<span class=\"pl-pse\">{</span><span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">props</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">text</span><span class=\"pl-pse\">}</span>&lt;/<span class=\"pl-ent\">a</span>&gt;;\n  }\n}\n\n<span class=\"pl-smi\">Link</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">propTypes</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">propTypes</span>;\n<span class=\"pl-smi\">Link</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">defaultProps</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">defaultProps</span>;\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-smi\">Link</span>;\n</pre></div>\n</li>\n</ul>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://github.com/JasonBoy/javascript/blob/master/react/README.md#ordering-react-%E6%A8%A1%E5%9D%97%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">Airbnb React/JSX 编码规范</a></li>\n<li><a href=\"https://github.com/minooo/React-Study/issues/6\" data-hovercard-type=\"issue\" data-hovercard-url=\"/minooo/React-Study/issues/6/hovercard\">【分享】关于React组件规范化的一些建议 </a></li>\n</ul>"
  },
  {
    "id": 8,
    "title": "跨域请求数据",
    "labels": "开发者笔记",
    "created_at": "2018-02-26T08:01:36Z",
    "updated_at": "2019-11-07T14:16:33Z",
    "body_html": "<h2>前言</h2>\n<p>什么是跨域？</p>\n<p>这就说到需要提到浏览器的同源策略，注意：是<strong>浏览器</strong>的。</p>\n<p>那么什么是同源策略？</p>\n<p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。如果是两个网页的协议，域名，端口一致，则这两个页面有相同的源。</p>\n<p>那么不遵守同源策略则会涉及到跨域问题。</p>\n<p>补充：非同源的限制：</p>\n<div class=\"highlight highlight-source-shell\"><pre>（1） Cookie、LocalStorage 和 IndexDB 无法读取。\n\n（2） DOM 无法获得。\n\n（3） AJAX 请求不能发送。</pre></div>\n<h2>1.jsonp 方法</h2>\n<p>JSONP（JSON with Padding）是数据格式 JSON 的一种“使用模式”，可以让网页从别的网域要数据。另一个解决这个问题的新方法是跨来源资源共享。</p>\n<p>由于同源策略，一般来说位于<code>server1.example.com</code>的网页无法与 <code>server2.example.com</code>的服务器沟通，而 HTML 的 <code>&lt;script&gt;</code>元素是一个例外。利用 <code>&lt;script&gt;</code>元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 数据，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的数据并不是 JSON，而是任意的 JavaScript，用 JavaScript 解释器运行而不是用 JSON 解析器解析。</p>\n<blockquote>\n<p>只是基于 get 请求的跨域,post 不支持<br>\n利用 script 的 src 属性天然可跨域的特性进行传递数据</p>\n</blockquote>\n<h4>操作步骤:</h4>\n<p>1.在全局准备一个函数,用来接收数据</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">fnname</span>() {}</pre></div>\n<p>2.在请求的时候将准备好的函数的名字传递给后端,callback 后面的名字</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&lt;</span>script src <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://www.example.com?callback = fnname<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span></pre></div>\n<p>3.后端返回函数的调用,并且将数据通过传递参数的形式传递过来</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">fnname</span>({ name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>zhangsan<span class=\"pl-pds\">'</span></span>, age<span class=\"pl-k\">:</span> <span class=\"pl-c1\">18</span> });</pre></div>\n<p>4.前端得到,处理数据</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">fnname</span>(<span class=\"pl-smi\">data</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(data);\n}</pre></div>\n<h4>在 angular 使用 jsonp</h4>\n<p>跨域的时候会报错,这里需要设置一个白名单,因为 jsonp 的跨域是敏感的,需要将 url 加入到可信任的白名单里面</p>\n<ul>\n<li>自己封装 jsonp 请求方法</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">myJsonp</span>(<span class=\"pl-smi\">url</span>, <span class=\"pl-smi\">data</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-k\">var</span> fnName <span class=\"pl-k\">=</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>myJsonp_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n    <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">random</span>()\n      .<span class=\"pl-c1\">toString</span>()\n      .<span class=\"pl-c1\">replace</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>);\n\n  <span class=\"pl-c1\">window</span>[fnName] <span class=\"pl-k\">=</span> callback;\n\n  <span class=\"pl-k\">var</span> querystring <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>;\n\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> attr <span class=\"pl-k\">in</span> data) {\n    querystring <span class=\"pl-k\">+=</span> attr <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> data[attr] <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&amp;<span class=\"pl-pds\">'</span></span>;\n  }\n\n  <span class=\"pl-k\">var</span> script <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>script<span class=\"pl-pds\">'</span></span>);\n\n  <span class=\"pl-smi\">script</span>.<span class=\"pl-smi\">src</span> <span class=\"pl-k\">=</span> url <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>?<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> querystring <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>callback=<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> fnName;\n\n  <span class=\"pl-smi\">script</span>.<span class=\"pl-en\">onload</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">body</span>.<span class=\"pl-c1\">removeChild</span>(script);\n  };\n\n  <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">body</span>.<span class=\"pl-c1\">appendChild</span>(script);\n}</pre></div>\n<h4>调用</h4>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">myJsonp</span>(\n  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.douban.com/v2/movie/in_theaters<span class=\"pl-pds\">'</span></span>,\n  {\n    start<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span>,\n    count<span class=\"pl-k\">:</span> <span class=\"pl-c1\">10</span>\n  },\n  <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">res</span>) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(res);\n  }\n);</pre></div>\n<h3>2.CORS 跨域</h3>\n<p>CORS 是一个 W3C 标准，全称是\"跨域资源共享\"（Cross-origin resource sharing）。出于安全原因，浏览器限制从脚本内发起的跨源 HTTP 请求。 例如，XMLHttpRequest 和 Fetch API 遵循同源策略。</p>\n<p>而跨域资源共享它允许浏览器向跨源服务器，发出 <code>XMLHttpRequest</code> 请求，从而克服了 <code>AJAX</code> 只能同源使用的限制。而且比 JSONP 方法更为强大 ，支持所有类型的 <code>HTTP</code> 请求。</p>\n<p>先决条件: 只要服务器实现了<code>CORS</code>设置，就可以跨源通信。</p>\n<ul>\n<li>请求类型 简单请求</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>（1) 请求方法是以下三种方法之一：\n\n<span class=\"pl-s\"><span class=\"pl-pds\">`</span>HEAD<span class=\"pl-pds\">`</span></span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>GET<span class=\"pl-pds\">`</span></span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>POST<span class=\"pl-pds\">`</span></span>\n\n（2）HTTP 的头信息不超出以下几种字段：\n\n  Accept\n  Accept-Language\n  Content-Language\n  Last-Event-ID\n  Content-Type：只限于以下三个值\n  application/x-www-form-urlencoded、multipart/form-data、text/plain\n</pre></div>\n<p>凡是不同时满足上面两个条件，就属于非简单请求。浏览器对这两种请求的处理，是不一样的</p>\n<p>本文只讨论了简单请求的实现步骤</p>\n<p>对于简单请求，浏览器发现这次跨源 AJAX 请求是简单请求，就自动在头信息之中，添加一个 Origin 字段。如下：</p>\n<pre><code>GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n</code></pre>\n<p>上面的头信息中，<code>Origin</code> 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。如果在服务端不被允许，直接使用 ajax 访问，会有以下错误：</p>\n<pre><code>XMLHttpRequest cannot load http://www.server.com/server.PHP. No 'Access-Control-Allow-Origin' header is present on the requested resource.Origin 'http://www.client.com' is therefore not allowed access.\n</code></pre>\n<p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段：</p>\n<pre><code>Access-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n</code></pre>\n<blockquote>\n<p>上面的头信息中,有三个与 Cros 请求相关的字段,都以<code>Access-Control-</code>开头.</p>\n</blockquote>\n<h4>1.Access-Control-Allow-Origin</h4>\n<p>该字段是必须的。它的值要么是请求时 Origin 字段的值，要么是一个<code>*</code>，表示接受任意域名的请求。</p>\n<h4>2.Access-Control-Allow-Credentials</h4>\n<p>该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为 true，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为 true，如果服务器不要浏览器发送 Cookie，删除该字段即可。</p>\n<h4>3.Access-Control-Expose-Headers</h4>\n<p>该字段可选。CORS 请求时，XMLHttpRequest 对象的 getResponseHeader()方法只能拿到 6 个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在 Access-Control-Expose-Headers 里面指定。上面的例子指定，getResponseHeader('FooBar')可以返回 FooBar 字段的值。</p>\n<h3>实现一个使用 CORS 的跨域</h3>\n<p>本地设置目录情况如下</p>\n<ol>\n<li>域名 api.study.com\n<ul>\n<li>文件 03-cors.php</li>\n</ul>\n</li>\n<li>域名 study.com\n<ul>\n<li>文件 cors.html\n<ul>\n<li>jquery.js</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>前端</p>\n<div class=\"highlight highlight-source-js\"><pre>    <span class=\"pl-smi\">$</span>.<span class=\"pl-en\">ajax</span>({\n      type<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>post<span class=\"pl-pds\">\"</span></span>,\n      url<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://api.study.com/03-cors.php<span class=\"pl-pds\">\"</span></span>,\n      data<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-en\">success</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">response</span>) {\n        <span class=\"pl-en\">alert</span>(response)\n      }\n    });\n    <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>script<span class=\"pl-k\">&gt;</span></pre></div>\n<p>php</p>\n<div class=\"highlight highlight-text-html-php\"><pre><span class=\"pl-s1\">    <span class=\"pl-k\">&lt;</span>?<span class=\"pl-c1\">php</span></span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">header</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Content-Type:text/html;charset=UTF-8<span class=\"pl-pds\">\"</span></span>);</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 指定允许其他域名访问</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">header</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Access-Control-Allow-Origin:*<span class=\"pl-pds\">'</span></span>);</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 响应类型</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">header</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Access-Control-Allow-Methods:POST<span class=\"pl-pds\">'</span></span>);</span>\n<span class=\"pl-s1\">    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 响应头设置</span></span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">header</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Access-Control-Allow-Headers:x-requested-with,content-type<span class=\"pl-pds\">'</span></span>);</span>\n<span class=\"pl-s1\"></span>\n<span class=\"pl-s1\">    <span class=\"pl-c1\">echo</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>hellow world ,cors<span class=\"pl-pds\">'</span></span>;</span>\n<span class=\"pl-s1\">    </span><span class=\"pl-pse\"><span class=\"pl-s1\">?</span>&gt;</span></pre></div>\n<blockquote>\n<p>总结:在实现 CORS 跨域获取数据的过程中关键在于后端的设置, 在被请求的 Response header 中加入参数设置项</p>\n</blockquote>\n<h2>3. 反向代理</h2>\n<p>先要 弄懂两个概念，正向代理和反向代理。</p>\n<p><strong>正向代理</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/a6783e9a21bbd30ed77dd976d82a1ba53c333604/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673870753362766c32366a323066343038727133312e6a7067\"><img src=\"https://camo.githubusercontent.com/a6783e9a21bbd30ed77dd976d82a1ba53c333604/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673870753362766c32366a323066343038727133312e6a7067\" alt=\"img (2).jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g8pu3bvl26j20f408rq31.jpg\" style=\"max-width:100%;\"></a></p>\n<p>A 同学在大众创业、万众创新的大时代背景下开启他的创业之路，目前他遇到的最大的一个问题就是启动资金，于是他决定去找马云爸爸借钱，可想而知，最后碰一鼻子灰回来了。</p>\n<p>情急之下，他想到一个办法，找关系开后门，经过一番消息打探，原来 A 同学的大学老师王老师是马云的同学，于是 A 同学找到王老师，托王老师帮忙去马云那借 500 万过来，当然最后事成了。</p>\n<p>不过马云并不知道这钱是 A 同学借的，马云是借给王老师的，最后由王老师转交给 A 同学。这里的王老师在这个过程中扮演了一个非常关键的角色，就是代理，也可以说是正向代理，王老师代替 A 同学办这件事，这个过程中，真正借钱的人是谁，马云是不知道的，这点非常关键。</p>\n<p>我们常说的代理也就是只正向代理，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，科学上网工具 Shadowsocks 扮演的就是典型的正向代理角色。</p>\n<p>在天朝访问 <a href=\"http://www.google.com\" rel=\"nofollow\">www.google.com</a> 时会被无情的墙掉，要想翻越这堵墙，你可以在国外用 Shadowsocks 来搭建一台代理服务器，代理帮我们请求 <a href=\"http://www.google.com%EF%BC%8C%E4%BB%A3%E7%90%86%E5%86%8D%E6%8A%8A%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C%E5%86%8D%E8%BF%94%E5%9B%9E%E7%BB%99%E6%88%91%E3%80%82\" rel=\"nofollow\">www.google.com，代理再把请求响应结果再返回给我。</a></p>\n<p><strong>反向代理</strong></p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/ee9d2e225449e43d64c745b98af936db918d5034/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673870753268647a77636a3230616630387333796a2e6a7067\"><img src=\"https://camo.githubusercontent.com/ee9d2e225449e43d64c745b98af936db918d5034/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673870753268647a77636a3230616630387333796a2e6a7067\" alt=\"img (3).jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g8pu2hdzwcj20af08s3yj.jpg\" style=\"max-width:100%;\"></a></p>\n<p>大家都有过这样的经历，拨打 10086 客服电话，一个地区的 10086 客服有几个或者几十个，你永远都不需要关心在电话那头的是哪一个，叫什么，男的，还是女的，漂亮的还是帅气的，你都不关心，你关心的是你的问题能不能得到专业的解答，你只需要拨通了 10086 的总机号码，电话那头总会有人会回答你，只是有时慢有时快而已。那么这里的 10086 总机号码就是我们说的反向代理。客户不知道真正提供服务的人是谁。</p>\n<p>反向代理隐藏了真实的服务端，当我们访问 <a href=\"http://www.baidu.com\" rel=\"nofollow\">www.baidu.com</a> 的时候，就像拨打 10086 一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，www.baidu.com 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到提供真实计算的服务器那里去。Nginx 就是性能非常好的反向代理服务器，它可以用来做负载均衡。</p>\n<blockquote>\n<p>两者的区别在于代理的对象不一样，「正向代理」代理的对象是客户端，「反向代理」代理的对象是服务端</p>\n</blockquote>\n<h2>4. 其他方法</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\" rel=\"nofollow\">window.postMessage - MDN</a></li>\n<li>WebSocket</li>\n</ul>\n<h4>参考</h4>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\" rel=\"nofollow\">浏览器的同源策略 - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" rel=\"nofollow\">HTTP 访问控制（CORS） - MDN</a></li>\n<li><a href=\"https://zh.wikipedia.org/zh-cn/JSONP\" rel=\"nofollow\">JSONP - wikipedia</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" rel=\"nofollow\">浏览器同源政策及其规避方法 - 阮一峰</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" rel=\"nofollow\">跨域资源共享 CORS 详解 - 阮一峰</a></li>\n<li><a href=\"http://blog.csdn.net/fdipzone/article/details/46390573\" rel=\"nofollow\">ajax 设置 Access-Control-Allow-Origin 实现跨域访问</a></li>\n<li><a href=\"http://www.10tiao.com/html/151/201802/2665514361/2.html\" rel=\"nofollow\">最通俗易懂地解释：正向代理与反向代理</a></li>\n</ul>"
  },
  {
    "id": 7,
    "title": "npm&yarn",
    "labels": "开发者笔记",
    "created_at": "2018-02-26T08:00:03Z",
    "updated_at": "2019-11-12T06:34:31Z",
    "body_html": "<h2>node</h2>\n<h3>node 版本升级</h3>\n<blockquote>\n<p>mac 使用<code>n</code>模块来安装，windows 在原先安装 node 的目录再进行安装</p>\n</blockquote>\n<pre><code>npm install -g n --force\n\nn stable //升级到最新稳定版本\nn lastest // 升级到最新版本\nn 8.9.3 //升级到指定版本：\n</code></pre>\n<h2>npm</h2>\n<p>本身为用来下载 node 的包的<br>\n只是用它来下载一些包<br>\n也可以用来下载前端的包</p>\n<h3>1.npm 版本升级</h3>\n<div class=\"highlight highlight-source-shell\"><pre>npm i -g npm to update</pre></div>\n<h3>2.基本使用</h3>\n<ol>\n<li>\n<p>打开 cmd,切换到项目所在文件夹</p>\n</li>\n<li>\n<p>在 cmd 中输入命令: <code>npm init</code> ,会生成一个名为 package.json 的配置文件（省略设置配置信息 <code>npm init -y</code>）</p>\n<blockquote>\n<p>这里会要求输入 name，这个 name 直接使用小写英文就可以,不要用中文，大写，或者特殊符号!</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>name 值不要和我们要下载的包名一样</strong></p>\n<ol start=\"3\">\n<li>\n<p>使用<code>npm install 包名</code> 来下载我们想要在在项目中使用的包<br>\n<em>注意这个包会下载到，当前 cmd 所在路径</em><br>\n<em>是在 cmd 所在路径的 node_modules/包名 中</em></p>\n</li>\n<li>\n<p>指定版本号下载</p>\n</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>npm install webpack@3.10.0 -g</pre></div>\n<ol start=\"5\">\n<li>开发依赖及运行依赖</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>devDependencies</td>\n<td>开发依赖，上线不需要</td>\n</tr>\n<tr>\n<td>dependencies</td>\n<td>项目运行的依赖，上线依旧要使用</td>\n</tr>\n<tr>\n<td><code>--save</code> / <code>-S</code></td>\n<td>配置信息写入<strong>dependencies</strong></td>\n</tr>\n<tr>\n<td><code>--save–dev</code> / <code>-D</code></td>\n<td>配置信息写入<strong>devDependencies</strong></td>\n</tr>\n<tr>\n<td><code>npm i jquery -S</code></td>\n<td>下载 jquery 并保存到 package.json 的开发依赖中</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"6\">\n<li>移除模块</li>\n</ol>\n<p><strong>删除全局模块</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>npm uninstall -g <span class=\"pl-k\">&lt;</span>package<span class=\"pl-k\">&gt;</span></pre></div>\n<p><strong>删除本地模块</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>npm uninstall 模块\n\nnpm uninstall 模块：删除模块，但不删除模块留在package.json中的对应信息\nnpm uninstall 模块 --save 删除模块，同时删除模块留在package.json中dependencies下的对应信息\nnpm uninstall 模块 --save-dev 删除模块，同时删除模块留在package.json中devDependencies下的对应信息</pre></div>\n<h3>3.npm 常用命令</h3>\n<table>\n<thead>\n<tr>\n<th>命令说明</th>\n<th>header 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>npm init -y</td>\n<td>省略项目初始化需要填写的信息</td>\n</tr>\n<tr>\n<td>npm config list</td>\n<td>查看自己 npm 的配置信息</td>\n</tr>\n<tr>\n<td>script <strong>执行命令</strong></td>\n<td>npm run 去执行这个命令。</td>\n</tr>\n<tr>\n<td>npm list -g --depth 0</td>\n<td>查看已全局安装的依赖</td>\n</tr>\n<tr>\n<td>npm prefix -g</td>\n<td>查看全局 node 模块的安装路径</td>\n</tr>\n</tbody>\n</table>\n<h3>4. 切换淘宝源</h3>\n<pre><code>npm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n</code></pre>\n<p><strong>还原 npm 官方仓库</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>npm config <span class=\"pl-c1\">set</span> registry=http://registry.npmjs.org</pre></div>\n<h3>5.版本</h3>\n<p><a href=\"https://semver.npmjs.com/\" rel=\"nofollow\">官方计算版本范围</a></p>\n<table>\n<thead>\n<tr>\n<th>range</th>\n<th>含义</th>\n<th>例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^2.2.1</td>\n<td>指定的 MAJOR 版本号下, 所有更新的版本</td>\n<td>匹配 2.2.3, 2.3.0; 不匹配 1.0.3, 3.0.1</td>\n</tr>\n<tr>\n<td>~2.2.1</td>\n<td>指定 MAJOR.MINOR 版本号下，所有更新的版本</td>\n<td>匹配 2.2.3, 2.2.9 ; 不匹配 2.3.0, 2.4.5</td>\n</tr>\n<tr>\n<td><code>&gt;=2.1</code></td>\n<td>版本号大于或等于 2.1.0</td>\n<td>匹配 2.1.2, 3.1</td>\n</tr>\n<tr>\n<td>&lt;=2.2</td>\n<td>版本号小于或等于 2.2</td>\n<td>匹配 1.0.0, 2.2.1, 2.2.11</td>\n</tr>\n<tr>\n<td>1.0.0 - 2.0.0</td>\n<td>版本号从 1.0.0 (含) 到 2.0.0 (含)</td>\n<td>匹配 1.0.0, 1.3.4, 2.0.0</td>\n</tr>\n</tbody>\n</table>\n<p>任意两条规则，通过 || 连接起来，则表示两条规则的并集:</p>\n<p>如 ^2 &gt;=2.3.1 || ^3 &gt;3.2 可以匹配:</p>\n<pre><code>* `2.3.1`, `2,8.1`, `3.3.1`\n* 但不匹配 `1.0.0`, `2.2.0`, `3.1.0`, `4.0.0`\nPS: 除了这几种，还有如下更直观的表示版本号范围的写法:\n</code></pre>\n<ul>\n<li><code>*</code> 或 x 匹配所有主版本</li>\n<li>1 或 1.x 匹配 主版本号为 1 的所有版本</li>\n<li>1.2 或 1.2.x 匹配 版本号为 1.2 开头的所有版本</li>\n</ul>\n<p>PPS: 在常规仅包含数字的版本号之外，semver 还允许在 MAJOR.MINOR.PATCH 后追加 - 后跟点号分隔的标签，作为预发布版本标签 - Prerelese Tags，通常被视为不稳定、不建议生产使用的版本。例如：</p>\n<ul>\n<li>1.0.0-alpha</li>\n<li>1.0.0-beta.1</li>\n<li>1.0.0-rc.3</li>\n</ul>\n<p>上表中我们最常见的是 ^1.8.11 这种格式的 range, 因为我们在使用 npm install  安装包时，npm 默认安装当前最新版本，例如 1.8.11, 然后在所安装的版本号前加^号, 将 ^1.8.11 写入 package.json 依赖配置，意味着可以匹配 1.8.11 以上，2.0.0 以下的所有版本。</p>\n<h3>6.使用代理</h3>\n<ol>\n<li>给命令行统一设置代理 windows</li>\n</ol>\n<pre><code>$ set http_proxy=http://proxy.mysite.com:8080\n\n// 如果有要求用户名密码则输入:\n$ set http_proxy_user=&lt; username &gt;\n$ set http_proxy_pass=&lt; password &gt;\n</code></pre>\n<ol start=\"2\">\n<li>npm 代理配置</li>\n</ol>\n<pre><code>npm config set proxy=http://proxy3.bj.petrochina:8080\nnpm config delete proxy // 取消\n</code></pre>\n<h5>参考</h5>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000002435496\" rel=\"nofollow\">设置 git/npm/bower/gem 镜像或代理的方法</a></li>\n</ul>\n<h3>7.依赖版本升级</h3>\n<ol>\n<li>package.json 中会记录各个依赖的版本，如果想要更新依赖，可以使用 npm update，但是这样更新后，新版依赖的版本号在 package.json 中并不会作出相应的更新。使用下面的更新保存到配置文件中</li>\n</ol>\n<pre><code>npm update -S\nnpm update -D\n</code></pre>\n<ol start=\"2\">\n<li>其他方式</li>\n</ol>\n<p><a href=\"https://cnodejs.org/topic/5705cd70c5f5b4a959e9192a\" rel=\"nofollow\">npm 模块升级工具 npm-check，提供命令行下的图形界面，可以手动选择升级哪些模块</a></p>\n<h3>8. npm 发包</h3>\n<div class=\"highlight highlight-source-shell\"><pre>npm config list <span class=\"pl-c\"><span class=\"pl-c\">#</span> 本地配置需修改为官方的仓库</span>\nnpm config <span class=\"pl-c1\">set</span> registry=http://registry.npmjs.org <span class=\"pl-c\"><span class=\"pl-c\">#</span> 还原为官方仓库</span>\nnpm login <span class=\"pl-c\"><span class=\"pl-c\">#</span>登录</span>\nnpm publish <span class=\"pl-c\"><span class=\"pl-c\">#</span> 发布</span>\nnpm unpublish --force <span class=\"pl-c\"><span class=\"pl-c\">#</span>撤回已经发布的包(在 npm 包目录下)</span>\n\nnpm config <span class=\"pl-c1\">set</span> registry http://registry.npmjs.org <span class=\"pl-c\"><span class=\"pl-c\">#</span> 切换回日常使用的淘宝镜像库</span></pre></div>\n<h2>yarn</h2>\n<ol>\n<li>下载地址</li>\n</ol>\n<ul>\n<li><a href=\"https://yarn.bootcss.com/\" rel=\"nofollow\">https://yarn.bootcss.com/</a></li>\n</ul>\n<ol start=\"2\">\n<li>配置淘宝镜像</li>\n</ol>\n<pre><code>yarn config set registry https://registry.npm.taobao.org -g\n</code></pre>\n<ol start=\"3\">\n<li>中文介绍说明</li>\n</ol>\n<ul>\n<li><a href=\"https://yarnpkg.com/zh-Hans/docs/cli\" rel=\"nofollow\">yarn cli 介绍</a></li>\n</ul>\n<ol start=\"4\">\n<li>使用 yarn</li>\n</ol>\n<ul>\n<li>开始一个新工程</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>yarn init</pre></div>\n<ul>\n<li>添加一个依赖</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> dependencies</span>\nyarn add [package]\nyarn add [package]@[version]\nyarn add [package]@[tag]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> devDependencies</span>\nyarn add redux-devtools-extension --dev</pre></div>\n<ul>\n<li>全局安装</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>yarn global add webapck@3.10.0</pre></div>\n<p>全局安装后仍然无法使用命令的话，需要添加<code>环境变量</code>配置</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 获取bin目录，复制粘贴到系统变量里面</span>\nyarn global bin</pre></div>\n<p>更新一个依赖</p>\n<div class=\"highlight highlight-source-shell\"><pre>yarn upgrade [package]\nyarn upgrade [package]@[version]\nyarn upgrade [package]@[tag]</pre></div>\n<ul>\n<li>移除一个依赖</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>yarn remove [package]</pre></div>\n<ul>\n<li>查看 yarn 全局安装路径</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>yarn global bin</pre></div>\n<ul>\n<li>从全局移除一个依赖</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>yarn global remove @tarojs/cli</pre></div>\n<ul>\n<li>全局更新至最新的版本</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>yarn global add  @tarojs/cli@latest</pre></div>\n<ul>\n<li>查看全局安装的列表</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>yarn global list</pre></div>\n<h3>node-sass 安装</h3>\n<div class=\"highlight highlight-source-shell\"><pre>SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install <span class=\"pl-c\"><span class=\"pl-c\">#</span> 首次安装所有依赖直接指向</span>\n\n<span class=\"pl-c1\">set</span> SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ <span class=\"pl-c\"><span class=\"pl-c\">#</span> 先 set ，后 install</span>\nnpm install node-sass</pre></div>\n<p>或者新建 <code>.npmrc</code> 文件，内容为：</p>\n<div class=\"highlight highlight-source-shell\"><pre>sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</pre></div>\n<p><strong>最新更新</strong>：使用 <code>dart-sass</code>代替 <code>node-sass</code></p>\n<div class=\"highlight highlight-source-shell\"><pre>yarn add sass-loader sass fibers  -D</pre></div>\n<p>webpack 配置更新</p>\n<div class=\"highlight highlight-source-shell\"><pre>      {\n        test: /<span class=\"pl-cce\">\\.</span>scss$/,\n        use: [\n          <span class=\"pl-s\"><span class=\"pl-pds\">'</span>style-loader<span class=\"pl-pds\">'</span></span>, // creates style nodes from JS strings},\n          <span class=\"pl-s\"><span class=\"pl-pds\">'</span>css-loader<span class=\"pl-pds\">'</span></span>, // translates CSS into CommonJS\n          {\n            loader: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass-loader<span class=\"pl-pds\">'</span></span>, // compiles Sass to CSS\n            options: {\n              implementation: require(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sass<span class=\"pl-pds\">'</span></span>),\n              sassOptions: {\n                fiber: require(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>fibers<span class=\"pl-pds\">'</span></span>),\n              },\n            },\n          },\n        ],\n      },</pre></div>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://github.com/lmk123/blog/issues/28\" data-hovercard-type=\"issue\" data-hovercard-url=\"/lmk123/blog/issues/28/hovercard\">安装 node-sass 的正确姿势 </a></li>\n<li><a href=\"https://github.com/klren0312/daliy_knowledge/issues/54\" data-hovercard-type=\"issue\" data-hovercard-url=\"/klren0312/daliy_knowledge/issues/54/hovercard\">webpack node-sass 改为 dart-sass </a></li>\n<li><a href=\"https://github.com/webpack-contrib/sass-loader#examples\">https://github.com/webpack-contrib/sass-loader#examples</a></li>\n</ul>"
  },
  {
    "id": 6,
    "title": "Javascript之深浅拷贝",
    "labels": "JavaScript",
    "created_at": "2018-02-26T07:59:20Z",
    "updated_at": "2019-10-13T15:54:09Z",
    "body_html": "<h2>前言</h2>\n<p>深拷贝拷贝的是两个完全相同的对象，两个双胞胎长得一摸一样,互不影响。</p>\n<p>浅拷贝拷贝的是指向对象的指针,两个指针同样指向同同一对象,一改都改变。</p>\n<p>浅拷贝：浅拷贝是拷贝引用，拷贝后的引用都是指向同一个对象的实例，彼此之间的操作会互相影响。</p>\n<p>深拷贝：在堆中重新分配内存，并且把源对象所有属性都进行新建拷贝，以保证深拷贝的对象的引用图不包含任何原有对象或对象图上的任何对象，拷贝后的对象与原来的对象是完全隔离，互不影响</p>\n<p>只是针对复杂数据类型（Object，Array）的复制问题。浅拷贝与深拷贝都可以实现在已有对象上再生出一份的作用。但是对象的实例是存储在堆内存中然后通过一个引用值去操作对象，由此拷贝的时候就存在两种情况了：拷贝引用和拷贝实例，这也是浅拷贝和深拷贝的区别。</p>\n<h2>数组的浅拷贝</h2>\n<p>简单的浅拷贝可以使用数组的<code>concat</code>和<code>slice</code>做到：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> arr <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>old<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">true</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">undefined</span>];\n<span class=\"pl-k\">var</span> new_arr <span class=\"pl-k\">=</span> [].<span class=\"pl-c1\">concat</span>(arr);\n\nnew_arr[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>new<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(arr); <span class=\"pl-c\"><span class=\"pl-c\">//</span>['old',1 ,true, null, undefined]</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(new_arr); <span class=\"pl-c\"><span class=\"pl-c\">//</span>['new',1, true, null, undefined]</span></pre></div>\n<p>查看第一个例子后可能以为<code>concat</code>是深拷贝了实例，下面接着看复杂一些的数组能不能做到：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> arr <span class=\"pl-k\">=</span> [{ old<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>old<span class=\"pl-pds\">'</span></span> }, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>old<span class=\"pl-pds\">'</span></span>]];\n\n<span class=\"pl-k\">var</span> new_arr <span class=\"pl-k\">=</span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">concat</span>();\n\narr[<span class=\"pl-c1\">0</span>].<span class=\"pl-smi\">old</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>new<span class=\"pl-pds\">'</span></span>;\narr[<span class=\"pl-c1\">1</span>][<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>new<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(arr); <span class=\"pl-c\"><span class=\"pl-c\">//</span> [{old: 'new'}, ['new']]</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(new_arr); <span class=\"pl-c\"><span class=\"pl-c\">//</span> [{old: 'new'}, ['new']]</span></pre></div>\n<p>在这里看到<code>concat</code>对于复杂的例子是无法完成深拷贝的，更改实例 1 后实例 2 也进行了相同的变化，还有<code>slice</code>，它们完成的是浅拷贝。</p>\n<blockquote>\n<p>源对象拷贝实例，其属性对象拷贝引用。</p>\n</blockquote>\n<p>这种情况，外层源对象是拷贝实例，如果其属性元素为复杂数据类型时，内层元素拷贝引用。<br>\n对源对象直接操作，不影响另外一个对象，但是对其属性操作时候，会改变另外一个对象的属性的值。</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> arr <span class=\"pl-k\">=</span> [{ old<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>old<span class=\"pl-pds\">'</span></span> }, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>old<span class=\"pl-pds\">'</span></span>]];\n\n<span class=\"pl-k\">var</span> new_arr <span class=\"pl-k\">=</span> <span class=\"pl-smi\">arr</span>.<span class=\"pl-c1\">concat</span>();\n\narr[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>new<span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(arr); <span class=\"pl-c\"><span class=\"pl-c\">//</span> ['new', ['old']]</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(new_arr); <span class=\"pl-c\"><span class=\"pl-c\">//</span> [{old: 'old'}, ['old']]</span></pre></div>\n<p>常用方法为：Object.assign(target, sources...),Array.prototype.slice(), Array.prototype.concat(), jQury 的$.extend({},obj)...</p>\n<h2>深拷贝</h2>\n<p>深拷贝后，两个对象，包括其内部的元素互不干扰。常见方法有 JSON.parse(JSON.stringify(obj));，jQury 的$.extend(true,{},obj)，lodash 的*.cloneDeep 和*.clone(value, true)。例：</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> arr <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>old<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">true</span>, [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>old1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>old2<span class=\"pl-pds\">'</span></span>], { old<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span> }];\n\n<span class=\"pl-k\">var</span> new_arr <span class=\"pl-k\">=</span> <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">parse</span>(<span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">stringify</span>(arr));\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(new_arr);</pre></div>\n<h2>浅拷贝的实现</h2>\n<div class=\"highlight highlight-source-js\"><pre>    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 只拷贝对象</span>\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">typeof</span> obj <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">return</span>;\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 根据obj的类型判断是新建一个数组还是对象</span>\n    <span class=\"pl-k\">var</span> newObj <span class=\"pl-k\">=</span> obj <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Array</span> <span class=\"pl-k\">?</span> [] <span class=\"pl-k\">:</span> {};\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 遍历obj，并且判断是obj的属性才拷贝</span>\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> key <span class=\"pl-k\">in</span> obj) {\n        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">hasOwnProperty</span>(key)) {\n            newObj[key] <span class=\"pl-k\">=</span> obj[key];\n        }\n    }\n    <span class=\"pl-k\">return</span> newObj;\n}</pre></div>\n<h2>深拷贝的实现</h2>\n<p>如何实现一个深拷贝呢？说起来也好简单，我们在拷贝的时候判断一下属性值的类型，如果是对象，我们递归调用深拷贝函数不就好了~</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-en\">deepCopy</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">obj</span>) {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">typeof</span> obj <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">return</span>;\n  <span class=\"pl-k\">var</span> newObj <span class=\"pl-k\">=</span> obj <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Array</span> <span class=\"pl-k\">?</span> [] <span class=\"pl-k\">:</span> {};\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> key <span class=\"pl-k\">in</span> obj) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">hasOwnProperty</span>(key)) {\n      newObj[key] <span class=\"pl-k\">=</span>\n        <span class=\"pl-k\">typeof</span> obj[key] <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">?</span> <span class=\"pl-en\">deepCopy</span>(obj[key]) <span class=\"pl-k\">:</span> obj[key];\n    }\n  }\n  <span class=\"pl-k\">return</span> newObj;\n};</pre></div>\n<h4>补充：数组的原型指向</h4>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">Array</span>.<span class=\"pl-smi\">__proto__</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">Function</span>.<span class=\"pl-c1\">prototype</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">Function</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">__proto__</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">__proto__</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> true</span></pre></div>\n<h2>方法记录</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 对象深度克隆，支持[]和{}</span>\n<span class=\"pl-c1\">Object</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">clone</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span>;\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">typeof</span> obj <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">return</span>;\n  <span class=\"pl-k\">var</span> newObj <span class=\"pl-k\">=</span> obj <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Array</span> <span class=\"pl-k\">?</span> [] <span class=\"pl-k\">:</span> {};\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> key <span class=\"pl-k\">in</span> obj) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">obj</span>.<span class=\"pl-en\">hasOwnProperty</span>(key)) {\n      newObj[key] <span class=\"pl-k\">=</span> <span class=\"pl-k\">typeof</span> obj[key] <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">?</span> obj[key].<span class=\"pl-en\">clone</span>() <span class=\"pl-k\">:</span> obj[key];\n    }\n  }\n  <span class=\"pl-k\">return</span> newObj;\n};</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@desc</span> 深拷贝，支持常见类型</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> <span class=\"pl-en\">{Any}</span> <span class=\"pl-smi\">values</span></span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span>(<span class=\"pl-smi\">values</span>) {\n  <span class=\"pl-k\">var</span> copy;\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Handle the 3 simple types, and null or undefined</span>\n  <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">null</span> <span class=\"pl-k\">==</span> values <span class=\"pl-k\">||</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>object<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">!=</span> <span class=\"pl-k\">typeof</span> values) <span class=\"pl-k\">return</span> values;\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Handle Date</span>\n  <span class=\"pl-k\">if</span> (values <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Date</span>) {\n    copy <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Date</span>();\n    <span class=\"pl-smi\">copy</span>.<span class=\"pl-c1\">setTime</span>(<span class=\"pl-smi\">values</span>.<span class=\"pl-c1\">getTime</span>());\n    <span class=\"pl-k\">return</span> copy;\n  }\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Handle Array</span>\n  <span class=\"pl-k\">if</span> (values <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Array</span>) {\n    copy <span class=\"pl-k\">=</span> [];\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>, len <span class=\"pl-k\">=</span> <span class=\"pl-smi\">values</span>.<span class=\"pl-c1\">length</span>; i <span class=\"pl-k\">&lt;</span> len; i<span class=\"pl-k\">++</span>) {\n      copy[i] <span class=\"pl-k\">=</span> <span class=\"pl-en\">deepClone</span>(values[i]);\n    }\n    <span class=\"pl-k\">return</span> copy;\n  }\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Handle Object</span>\n  <span class=\"pl-k\">if</span> (values <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Object</span>) {\n    copy <span class=\"pl-k\">=</span> {};\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> attr <span class=\"pl-k\">in</span> values) {\n      <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">values</span>.<span class=\"pl-en\">hasOwnProperty</span>(attr)) copy[attr] <span class=\"pl-k\">=</span> <span class=\"pl-en\">deepClone</span>(values[attr]);\n    }\n    <span class=\"pl-k\">return</span> copy;\n  }\n\n  <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unable to copy values! Its type isn't supported.<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>\n<h4>参考</h4>\n<ul>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"242235902\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/mqyqingfeng/Blog/issues/32\" data-hovercard-type=\"issue\" data-hovercard-url=\"/mqyqingfeng/Blog/issues/32/hovercard\" href=\"https://github.com/mqyqingfeng/Blog/issues/32\">mqyqingfeng/Blog#32</a></li>\n<li><a href=\"https://www.jianshu.com/p/a4e1e7b6f4f8\" rel=\"nofollow\">https://www.jianshu.com/p/a4e1e7b6f4f8</a></li>\n</ul>"
  },
  {
    "id": 5,
    "title": "Js传参技巧总结",
    "labels": "开发者笔记",
    "created_at": "2018-02-26T07:58:38Z",
    "updated_at": "2019-12-30T04:44:10Z",
    "body_html": "<h2>1.隐式创建 html 标签</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">&lt;</span>input type<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hidden<span class=\"pl-pds\">\"</span></span> name<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tc_id<span class=\"pl-pds\">\"</span></span> value<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>{{tc_id}}<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">&gt;</span></pre></div>\n<blockquote>\n<p>这种方法一般配合 ajax，上面的 value 使用了模板引擎</p>\n</blockquote>\n<h2>2.window['data']</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">window</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>the window object<span class=\"pl-pds\">'</span></span>;</pre></div>\n<h2>3.使用 localStorage，cookie 等存储</h2>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">localStorage</span>.<span class=\"pl-c1\">setItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>xiaoyueyue<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c1\">window</span>.<span class=\"pl-smi\">localStorage</span>.<span class=\"pl-c1\">getItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>);</pre></div>\n<blockquote>\n<p>特点：cookie，localStorage，sessionStorage，indexDB</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">特性</th>\n<th align=\"center\">cookie</th>\n<th align=\"center\">localStorage</th>\n<th align=\"center\">sessionStorage</th>\n<th align=\"center\">indexDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">数据生命周期</td>\n<td align=\"center\">一般由服务器生成，可以设置过期时间</td>\n<td align=\"center\">除非被清理，否则一直存在</td>\n<td align=\"center\">页面关闭就清理</td>\n<td align=\"center\">除非被清理，否则一直存在</td>\n</tr>\n<tr>\n<td align=\"center\">数据存储大小</td>\n<td align=\"center\">4K</td>\n<td align=\"center\">5M</td>\n<td align=\"center\">5M</td>\n<td align=\"center\">无限</td>\n</tr>\n<tr>\n<td align=\"center\">与服务端通信</td>\n<td align=\"center\">每次都会携带在 header 中，对于请求性能影响</td>\n<td align=\"center\">不参与</td>\n<td align=\"center\">不参与</td>\n<td align=\"center\">不参与</td>\n</tr>\n</tbody>\n</table>\n<p>从上表可以看到，<code>cookie</code> 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 <code>localStorage</code> 和 <code>sessionStorage</code> 。对于不怎么改变的数据尽量使用 <code>localStorage</code> 存储，否则可以用 <code>sessionStorage</code> 存储。</p>\n<blockquote>\n<p>注意点:存储<code>object</code>类型数据，此深拷贝方法会忽略掉函数和 <code>undefined</code></p>\n</blockquote>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> obj <span class=\"pl-k\">=</span> {\n  type<span class=\"pl-k\">:</span> <span class=\"pl-c1\">undefined</span>,\n  text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>xiaoyueyue<span class=\"pl-pds\">'</span></span>,\n  <span class=\"pl-en\">methord</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-en\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>I am an methord<span class=\"pl-pds\">'</span></span>);\n  }\n};\n\n<span class=\"pl-smi\">localStorage</span>.<span class=\"pl-c1\">setItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>data<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">stringify</span>(obj));\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">parse</span>(<span class=\"pl-smi\">localStorage</span>.<span class=\"pl-c1\">getItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>data<span class=\"pl-pds\">'</span></span>))); <span class=\"pl-c\"><span class=\"pl-c\">//</span> {text: \"xiaoyueyue\"}</span></pre></div>\n<h2>4.获取地址栏方法</h2>\n<ol>\n<li>自己封装的方法</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">parseParam</span>(<span class=\"pl-smi\">url</span>) {\n  <span class=\"pl-k\">var</span> paramArr <span class=\"pl-k\">=</span> <span class=\"pl-c1\">decodeURI</span>(url)\n      .<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>?<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">1</span>]\n      .<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>&amp;<span class=\"pl-pds\">'</span></span>),\n    obj <span class=\"pl-k\">=</span> {};\n  <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">paramArr</span>.<span class=\"pl-c1\">length</span>; i<span class=\"pl-k\">++</span>) {\n    <span class=\"pl-k\">var</span> item <span class=\"pl-k\">=</span> paramArr[i];\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">indexOf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">!=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) {\n      <span class=\"pl-k\">var</span> tmp <span class=\"pl-k\">=</span> <span class=\"pl-smi\">item</span>.<span class=\"pl-c1\">split</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span>);\n      obj[tmp[<span class=\"pl-c1\">0</span>]] <span class=\"pl-k\">=</span> tmp[<span class=\"pl-c1\">1</span>];\n    } <span class=\"pl-k\">else</span> {\n      obj[item] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>;\n    }\n  }\n  <span class=\"pl-k\">return</span> obj;\n}</pre></div>\n<p>2.正则表达式方法</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">GetQueryString</span>(<span class=\"pl-smi\">name</span>) {\n  <span class=\"pl-k\">var</span> reg <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">RegExp</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>(^|&amp;)<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>=([^&amp;]*)(&amp;|$)<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-k\">var</span> r <span class=\"pl-k\">=</span> <span class=\"pl-c1\">window</span>.<span class=\"pl-c1\">location</span>.<span class=\"pl-smi\">search</span>.<span class=\"pl-c1\">substr</span>(<span class=\"pl-c1\">1</span>).<span class=\"pl-c1\">match</span>(reg);\n  <span class=\"pl-k\">if</span> (r <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">unescape</span>(r[<span class=\"pl-c1\">2</span>]);\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n}</pre></div>\n<h2>5.标签绑定函数传参</h2>\n<div class=\"highlight highlight-text-html-basic\"><pre><span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span>base<span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">onclick</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>alert(id)<span class=\"pl-pds\">\"</span></span>&gt;test1&lt;/<span class=\"pl-ent\">button</span>&gt;\n\n<span class=\"pl-c\"><span class=\"pl-c\">&lt;!--</span>高级<span class=\"pl-c\">--&gt;</span></span>\n&lt;<span class=\"pl-ent\">button</span>\n  <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>123<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-e\">yue</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xiaoyueyue<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-e\">friend</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>heizi<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-e\">onclick</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>console.log(this.getAttribute('yue'),this.getAttribute('friend'))<span class=\"pl-pds\">\"</span></span>\n&gt;\n  test\n&lt;/<span class=\"pl-ent\">button</span>&gt;</pre></div>\n<h3>this 拓展</h3>\n<p>使用 this 传参，在使用 art-template 中琢磨出来的，再也不用只传递一个 id 拼接成好几个参数了！happy！</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> box <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-smi\">box</span>.<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">=</span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;button id='1' data-name='xiaoyueyue' data-age='25' data-friend='heizi' onclick='alertInfo(this.dataset)'&gt;点击&lt;/button&gt;<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">body</span>.<span class=\"pl-c1\">appendChild</span>(box);\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> name,age,friend</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">alertInfo</span>(<span class=\"pl-smi\">data</span>) {\n  <span class=\"pl-en\">alert</span>(\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>大家好,我是<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n      <span class=\"pl-smi\">data</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">+</span>\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span>, 我今年<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n      <span class=\"pl-smi\">data</span>.<span class=\"pl-smi\">age</span> <span class=\"pl-k\">+</span>\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span>岁了，我的好朋友是<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n      <span class=\"pl-smi\">data</span>.<span class=\"pl-smi\">friend</span> <span class=\"pl-k\">+</span>\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span> !<span class=\"pl-pds\">'</span></span>\n  );\n}</pre></div>\n<blockquote>\n<p>这里需要注意一点：存储的 data—含有大写的单词 =》这里会统一转化为小写，比如：data-orderId = “2a34fb64a13211e8a0f00050568b2fdd”，在实际取值的时候为<code>this.dataset.orderid</code>;</p>\n</blockquote>\n<h3>event</h3>\n<p>既然可以使用 this，那么在事件当中<code>event.target</code>方法也是可以的：</p>\n<blockquote>\n<p>根据 class 获取当前的索引值，参数可以为 event 对象</p>\n</blockquote>\n<pre><code>  var getIndexByClass =  function (param) {\n    var element = param.classname ? param : param.target;\n    var className = element.classname;\n    var domArr = Array.prototype.slice.call(document.querySelectorAll('.' + className));\n    for (var index = 0; index &lt; domArr.length; index++) {\n      if (domArr[index] === element) {\n        return index;\n      }\n    }\n    return -1;\n  },\n</code></pre>\n<h2>6.HTML5 data-* 自定义属性</h2>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">button</span> <span class=\"pl-e\">data-name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>xiaoyueyue<span class=\"pl-pds\">\"</span></span>&gt;点击&lt;/<span class=\"pl-ent\">button</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> btn <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>button<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-smi\">btn</span>.<span class=\"pl-en\">onclick</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">alert</span>(<span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">dataset</span>.<span class=\"pl-c1\">name</span>);\n};</pre></div>\n<h2>7.字符串传参</h2>\n<h3>单个参数</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>xiaoyueyue<span class=\"pl-pds\">'</span></span>,\n  age <span class=\"pl-k\">=</span> <span class=\"pl-c1\">25</span>;\n\n<span class=\"pl-k\">var</span> box <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-smi\">box</span>.<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&lt;button onclick=\"alertInfo(<span class=\"pl-cce\">\\'</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\'</span>)\"&gt;点击&lt;/button&gt;<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">body</span>.<span class=\"pl-c1\">appendChild</span>(box);\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> name, age</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">alertInfo</span>(<span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">age</span>, <span class=\"pl-smi\">home</span>, <span class=\"pl-smi\">friend</span>) {\n  <span class=\"pl-en\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>我是<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> name);\n}</pre></div>\n<h3>多参传递</h3>\n<div class=\"highlight highlight-source-js\"><pre>  <span class=\"pl-k\">var</span> name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>xiaoyueyue<span class=\"pl-pds\">'</span></span>,\n      age <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>25<span class=\"pl-pds\">'</span></span>,\n      home <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>shanxi<span class=\"pl-pds\">'</span></span>,\n      friend <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>heizi<span class=\"pl-pds\">'</span></span>,\n      <span class=\"pl-c1\">DQ</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;quot;<span class=\"pl-pds\">\"</span></span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span> 双引号的超文本标记语言</span>\n\n    <span class=\"pl-k\">var</span> params <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;quot;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;quot;,&amp;quot;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> age <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;quot;,&amp;quot;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> home <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;quot;,&amp;quot;<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> friend <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&amp;quot;<span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-k\">var</span> params2 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">DQ</span> <span class=\"pl-k\">+</span> name <span class=\"pl-k\">+</span> <span class=\"pl-c1\">DQ</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>,<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">DQ</span> <span class=\"pl-k\">+</span> age <span class=\"pl-k\">+</span> <span class=\"pl-c1\">DQ</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>,<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">DQ</span> <span class=\"pl-k\">+</span> home <span class=\"pl-k\">+</span> <span class=\"pl-c1\">DQ</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>,<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">DQ</span> <span class=\"pl-k\">+</span> friend <span class=\"pl-k\">+</span> <span class=\"pl-c1\">DQ</span>;\n    <span class=\"pl-k\">var</span> box <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>div<span class=\"pl-pds\">\"</span></span>);\n    <span class=\"pl-smi\">box</span>.<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;button onclick='alertInfo(<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> params <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>)'&gt;点击&lt;/button&gt;<span class=\"pl-pds\">\"</span></span>;\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(box)\n    <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">body</span>.<span class=\"pl-c1\">appendChild</span>(box);\n\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> name, age,home,friend</span>\n    <span class=\"pl-k\">function</span> <span class=\"pl-en\">alertInfo</span>(<span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">age</span>, <span class=\"pl-smi\">home</span>, <span class=\"pl-smi\">friend</span>) {\n      <span class=\"pl-en\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>我是<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>,<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>我今年<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> age <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>岁了！<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h3>复杂传参</h3>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> data <span class=\"pl-k\">=</span> [\n  {\n    name<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>xiaoyueyue<span class=\"pl-pds\">'</span></span>,\n    age<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>25<span class=\"pl-pds\">'</span></span>,\n    home<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>shanxi<span class=\"pl-pds\">'</span></span>,\n    friend<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>heizi<span class=\"pl-pds\">'</span></span>\n  }\n];\n\n<span class=\"pl-k\">var</span> box <span class=\"pl-k\">=</span> <span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">createElement</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>div<span class=\"pl-pds\">'</span></span>),\n  html <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>;\n\n<span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">data</span>.<span class=\"pl-c1\">length</span>; i<span class=\"pl-k\">++</span>) {\n  html <span class=\"pl-k\">+=</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;button id='btn'  onclick='alertInfo(id,<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n    data[i].<span class=\"pl-c1\">name</span> <span class=\"pl-k\">+</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>\",\"<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n    data[i].<span class=\"pl-smi\">age</span> <span class=\"pl-k\">+</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>\",\"<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n    data[i].<span class=\"pl-smi\">home</span> <span class=\"pl-k\">+</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>\",\"<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n    data[i].<span class=\"pl-smi\">friend</span> <span class=\"pl-k\">+</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>\")<span class=\"pl-cce\">\\'</span>&gt;点击&lt;/button&gt;<span class=\"pl-pds\">'</span></span>;\n}\n<span class=\"pl-smi\">box</span>.<span class=\"pl-smi\">innerHTML</span> <span class=\"pl-k\">=</span> html;\n<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">body</span>.<span class=\"pl-c1\">appendChild</span>(box);\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">alertInfo</span>(<span class=\"pl-smi\">id</span>, <span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">age</span>, <span class=\"pl-smi\">home</span>, <span class=\"pl-smi\">friend</span>) {\n  <span class=\"pl-en\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>我是 <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> , <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> friend <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> 是我的好朋友<span class=\"pl-pds\">'</span></span>);\n}</pre></div>\n<h2>8.arguments</h2>\n<p><code>arguments</code>对象是所有（非箭头）函数中都可用的局部变量。你可以使用 arguments 对象在函数中引用函数的参数。它是一个类数组的对象。</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">button</span>\n  <span class=\"pl-e\">onclick</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fenpei('f233c7a290ae11e8a0f00050568b2fdd','100','0号 车用柴油(Ⅴ)')<span class=\"pl-pds\">\"</span></span>\n&gt;\n  分配\n&lt;/<span class=\"pl-ent\">button</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">fenpei</span>() {\n  <span class=\"pl-k\">var</span> args <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">slice</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>);\n  <span class=\"pl-en\">alert</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>我是<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> args[<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>油品，数量为 <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> args[<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> 吨， id为 <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> args[<span class=\"pl-c1\">0</span>]);\n}</pre></div>\n<h2>9.form 表单</h2>\n<p>借助<code>form</code>表单，ajax 传递序列化参数</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> form表单序列化，摘自JS高程</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-smi\">form</span>) {\n  <span class=\"pl-k\">var</span> parts <span class=\"pl-k\">=</span> [],\n    field <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>,\n    i,\n    len,\n    j,\n    optLen,\n    option,\n    optValue;\n\n  <span class=\"pl-k\">for</span> (i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>, len <span class=\"pl-k\">=</span> <span class=\"pl-smi\">form</span>.<span class=\"pl-c1\">elements</span>.<span class=\"pl-c1\">length</span>; i <span class=\"pl-k\">&lt;</span> len; i<span class=\"pl-k\">++</span>) {\n    field <span class=\"pl-k\">=</span> <span class=\"pl-smi\">form</span>.<span class=\"pl-c1\">elements</span>[i];\n\n    <span class=\"pl-k\">switch</span> (<span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">type</span>) {\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>select-one<span class=\"pl-pds\">'</span></span>:\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>select-multiple<span class=\"pl-pds\">'</span></span>:\n        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">name</span>.<span class=\"pl-c1\">length</span>) {\n          <span class=\"pl-k\">for</span> (j <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>, optLen <span class=\"pl-k\">=</span> <span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">options</span>.<span class=\"pl-c1\">length</span>; j <span class=\"pl-k\">&lt;</span> optLen; j<span class=\"pl-k\">++</span>) {\n            option <span class=\"pl-k\">=</span> <span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">options</span>[j];\n            <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">option</span>.<span class=\"pl-c1\">selected</span>) {\n              optValue <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>;\n              <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">option</span>.<span class=\"pl-smi\">hasAttribute</span>) {\n                optValue <span class=\"pl-k\">=</span> <span class=\"pl-smi\">option</span>.<span class=\"pl-c1\">hasAttribute</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>value<span class=\"pl-pds\">'</span></span>)\n                  <span class=\"pl-k\">?</span> <span class=\"pl-smi\">option</span>.<span class=\"pl-c1\">value</span>\n                  <span class=\"pl-k\">:</span> <span class=\"pl-smi\">option</span>.<span class=\"pl-c1\">text</span>;\n              } <span class=\"pl-k\">else</span> {\n                optValue <span class=\"pl-k\">=</span> <span class=\"pl-smi\">option</span>.<span class=\"pl-c1\">attributes</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>value<span class=\"pl-pds\">'</span></span>].<span class=\"pl-c1\">specified</span>\n                  <span class=\"pl-k\">?</span> <span class=\"pl-smi\">option</span>.<span class=\"pl-c1\">value</span>\n                  <span class=\"pl-k\">:</span> <span class=\"pl-smi\">option</span>.<span class=\"pl-c1\">text</span>;\n              }\n              <span class=\"pl-smi\">parts</span>.<span class=\"pl-c1\">push</span>(\n                <span class=\"pl-c1\">encodeURIComponent</span>(<span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">name</span>) <span class=\"pl-k\">+</span>\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n                  <span class=\"pl-c1\">encodeURIComponent</span>(optValue)\n              );\n            }\n          }\n        }\n        <span class=\"pl-k\">break</span>;\n\n      <span class=\"pl-k\">case</span> <span class=\"pl-c1\">undefined</span>: <span class=\"pl-c\"><span class=\"pl-c\">//</span>fieldset</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>file<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c\"><span class=\"pl-c\">//</span>file input</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>submit<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c\"><span class=\"pl-c\">//</span>submit button</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>reset<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c\"><span class=\"pl-c\">//</span>reset button</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>button<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c\"><span class=\"pl-c\">//</span>custom button</span>\n        <span class=\"pl-k\">break</span>;\n\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>radio<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c\"><span class=\"pl-c\">//</span>radio button</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>checkbox<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c\"><span class=\"pl-c\">//</span>checkbox</span>\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">checked</span>) {\n          <span class=\"pl-k\">break</span>;\n        }\n      <span class=\"pl-c\"><span class=\"pl-c\">/*</span> falls through <span class=\"pl-c\">*/</span></span>\n\n      <span class=\"pl-k\">default</span>:\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span>don't include form fields without names</span>\n        <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">name</span>.<span class=\"pl-c1\">length</span>) {\n          <span class=\"pl-smi\">parts</span>.<span class=\"pl-c1\">push</span>(\n            <span class=\"pl-c1\">encodeURIComponent</span>(<span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">name</span>) <span class=\"pl-k\">+</span>\n              <span class=\"pl-s\"><span class=\"pl-pds\">'</span>=<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span>\n              <span class=\"pl-c1\">encodeURIComponent</span>(<span class=\"pl-smi\">field</span>.<span class=\"pl-c1\">value</span>)\n          );\n        }\n    }\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">parts</span>.<span class=\"pl-c1\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>&amp;<span class=\"pl-pds\">'</span></span>);\n}</pre></div>\n<p>栗子：</p>\n<div class=\"highlight highlight-text-html-basic\"><pre>&lt;<span class=\"pl-ent\">form</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>formData<span class=\"pl-pds\">\"</span></span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pop-info<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">label</span> <span class=\"pl-e\">for</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ordersaleCode<span class=\"pl-pds\">\"</span></span>&gt;订单编号：&lt;/<span class=\"pl-ent\">label</span>&gt;\n    &lt;<span class=\"pl-ent\">input</span>\n      <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ordersaleCode<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ordersaleCode<span class=\"pl-pds\">\"</span></span>\n      <span class=\"pl-e\">placeholder</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>请输入订单编号<span class=\"pl-pds\">\"</span></span>\n    /&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n  &lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pop-info<span class=\"pl-pds\">\"</span></span>&gt;\n    &lt;<span class=\"pl-ent\">label</span> <span class=\"pl-e\">for</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>extractType<span class=\"pl-pds\">\"</span></span>&gt;配送方式：&lt;/<span class=\"pl-ent\">label</span>&gt;\n    &lt;<span class=\"pl-ent\">select</span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>extractType<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">name</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>extractType<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">class</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mySelect<span class=\"pl-pds\">\"</span></span>&gt;\n      &lt;<span class=\"pl-ent\">option</span> <span class=\"pl-e\">value</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0<span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">selected</span>&gt;配送&lt;/<span class=\"pl-ent\">option</span>&gt;\n      &lt;<span class=\"pl-ent\">option</span> <span class=\"pl-e\">value</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1<span class=\"pl-pds\">\"</span></span>&gt;自提&lt;/<span class=\"pl-ent\">option</span>&gt;\n    &lt;/<span class=\"pl-ent\">select</span>&gt;\n  &lt;/<span class=\"pl-ent\">div</span>&gt;\n&lt;/<span class=\"pl-ent\">form</span>&gt;\n&lt;<span class=\"pl-ent\">button</span>&gt;获取参数&lt;/<span class=\"pl-ent\">button</span>&gt;</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">querySelector</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>button<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">onclick</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>param: <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-c1\">document</span>.<span class=\"pl-c1\">getElementById</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>formData<span class=\"pl-pds\">'</span></span>))); <span class=\"pl-c\"><span class=\"pl-c\">//</span> param: ordersaleCode=&amp;extractType=0</span>\n};</pre></div>\n<h2>10. 发布订阅处理复杂逻辑传参</h2>\n<blockquote>\n<p>支持先订阅后发布，以及先发布后订阅</p>\n</blockquote>\n<ul>\n<li>方法源码</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-c1\">Event</span> <span class=\"pl-k\">=</span> (<span class=\"pl-k\">function</span>() {\n  <span class=\"pl-k\">var</span> clientList <span class=\"pl-k\">=</span> {},\n    pub,\n    sub,\n    remove;\n\n  <span class=\"pl-k\">var</span> cached <span class=\"pl-k\">=</span> {};\n\n  <span class=\"pl-en\">sub</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">fn</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>clientList[key]) {\n      clientList[key] <span class=\"pl-k\">=</span> [];\n    }\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 使用缓存执行的订阅不用多次调用执行</span>\n    cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>time<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">==</span> <span class=\"pl-c1\">undefined</span> <span class=\"pl-k\">?</span> clientList[key].<span class=\"pl-c1\">push</span>(fn) <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>;\n    <span class=\"pl-k\">if</span> (cached[key] <span class=\"pl-k\">instanceof</span> <span class=\"pl-c1\">Array</span> <span class=\"pl-k\">&amp;&amp;</span> cached[key].<span class=\"pl-c1\">length</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span>说明有缓存的 可以执行</span>\n      <span class=\"pl-smi\">fn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>, cached[key]);\n      cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>time<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>;\n    }\n  };\n  <span class=\"pl-en\">pub</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n    <span class=\"pl-k\">var</span> key <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">shift</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>),\n      fns <span class=\"pl-k\">=</span> clientList[key];\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fns <span class=\"pl-k\">||</span> <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">===</span> <span class=\"pl-c1\">0</span>) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span>初始默认缓存</span>\n      cached[key] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">slice</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>, <span class=\"pl-c1\">0</span>);\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    }\n\n    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>, fn; (fn <span class=\"pl-k\">=</span> fns[i<span class=\"pl-k\">++</span>]); ) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> 再次发布更新缓存中的 data 参数</span>\n      cached[key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>time<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">undefined</span>\n        <span class=\"pl-k\">?</span> (cached[key] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Array</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-smi\">slice</span>.<span class=\"pl-c1\">call</span>(<span class=\"pl-c1\">arguments</span>, <span class=\"pl-c1\">0</span>))\n        <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>;\n      <span class=\"pl-smi\">fn</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">this</span>, <span class=\"pl-c1\">arguments</span>);\n    }\n  };\n  <span class=\"pl-en\">remove</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">fn</span>) {\n    <span class=\"pl-k\">var</span> fns <span class=\"pl-k\">=</span> clientList[key];\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 缓存订阅一并删除</span>\n    <span class=\"pl-k\">var</span> cachedFn <span class=\"pl-k\">=</span> cached[key];\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fns <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>cachedFn) {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    }\n    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fn) {\n      fns <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>);\n      cachedFn <span class=\"pl-k\">&amp;&amp;</span> (<span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>);\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-k\">if</span> (cachedFn) {\n        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> m <span class=\"pl-k\">=</span> <span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>; m <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>; m<span class=\"pl-k\">--</span>) {\n          <span class=\"pl-k\">var</span> _fn_temp <span class=\"pl-k\">=</span> cachedFn[m];\n          <span class=\"pl-k\">if</span> (_fn_temp <span class=\"pl-k\">===</span> fn) {\n            <span class=\"pl-smi\">cachedFn</span>.<span class=\"pl-c1\">splice</span>(m, <span class=\"pl-c1\">1</span>);\n          }\n        }\n      }\n      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">var</span> n <span class=\"pl-k\">=</span> <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">length</span> <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>; n <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>; n<span class=\"pl-k\">--</span>) {\n        <span class=\"pl-k\">var</span> _fn <span class=\"pl-k\">=</span> fns[n];\n        <span class=\"pl-k\">if</span> (_fn <span class=\"pl-k\">===</span> fn) {\n          <span class=\"pl-smi\">fns</span>.<span class=\"pl-c1\">splice</span>(n, <span class=\"pl-c1\">1</span>);\n        }\n      }\n    }\n  };\n  <span class=\"pl-k\">return</span> {\n    pub<span class=\"pl-k\">:</span> pub,\n    sub<span class=\"pl-k\">:</span> sub,\n    remove<span class=\"pl-k\">:</span> remove\n  };\n})();</pre></div>\n<p>在微信小程序中使用的例子:</p>\n<ul>\n<li>全局挂载使用</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> app.js</span>\n<span class=\"pl-en\">App</span>({\n  <span class=\"pl-en\">onLaunch</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">e</span>) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 注册 storage，这是第二条</span>\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">Storage</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Storage</span>;\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 注册发布订阅模式</span>\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Event</span>;\n  }\n});</pre></div>\n<ul>\n<li>使用实例</li>\n</ul>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 添加收货地址页面订阅</span>\n <span class=\"pl-en\">onLoad</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">options</span>) {\n        <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span>.<span class=\"pl-c1\">sub</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addAddress<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">data</span>) {\n            <span class=\"pl-smi\">y</span>.<span class=\"pl-en\">setData</span>({\n                addAddress<span class=\"pl-k\">:</span> data\n            })\n        })\n }\n<span class=\"pl-c\"><span class=\"pl-c\">/**</span></span>\n<span class=\"pl-c\"> * 生命周期函数--监听页面隐藏</span>\n<span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span>\n <span class=\"pl-en\">onHide</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 取消多余的事件订阅</span>\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">Storage</span>.<span class=\"pl-c1\">removeItem</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addAddress<span class=\"pl-pds\">\"</span></span>);\n},\n <span class=\"pl-en\">onUnload</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">function</span> () {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> 取消多余的事件订阅</span>\n    <span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span>.<span class=\"pl-c1\">remove</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>addAddress<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> 传递地址页面获取好数据传递</span>\n<span class=\"pl-smi\">wx</span>.<span class=\"pl-smi\">yue</span>.<span class=\"pl-en\">pub</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>addAddress<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">data</span>.<span class=\"pl-smi\">info</span>);\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> 补充跳转返回</span></pre></div>\n<blockquote>\n<p>注意:使用完成数据后要注意卸载，在页面被关闭时操作</p>\n</blockquote>\n<h2>拓展阅读</h2>\n<ul>\n<li><a href=\"https://juejin.im/post/59be85735188256bd733cc10\" rel=\"nofollow\">JavaScript 参数传递的深入理解</a></li>\n</ul>"
  },
  {
    "id": 4,
    "title": "前端基本功 —— 扎马步",
    "labels": "JavaScript",
    "created_at": "2018-02-26T07:57:20Z",
    "updated_at": "2019-11-07T18:28:29Z",
    "body_html": "<h2>前言</h2>\n<p>是思过崖，是训练场，开始扎马步！</p>\n<h2>Html，Css</h2>\n<ul>\n<li>盒模型什么样, box-sizing：border-box?\n<ul>\n<li>当 padding 与 margin 值为百分比时，根据父元素的 <code>width</code> 计算</li>\n</ul>\n</li>\n</ul>\n<pre><code>每一个盒子有四条边界：由内往外是内容边界、内边距边界、边框边界、外边距边界\n\nIE盒模型的width/height = content + border + padding; 标准盒模型的width/height = content\n\nbox-sizing: content-box 为普通浏览器模式 ; box-sizing: border-box;为IE浏览器模式\n\nIE盒模型 （border-box模式）的优势：padding与border不会溢出父容器 ，符合书写逻辑不需要计算！\n\n *{ box-sizing: border-box; } 能够统一IE和非IE浏览器之间的差异，一同转换为 IE 盒子模型\n</code></pre>\n<ul>\n<li>常用选择器\n<ul>\n<li>id，class，元素</li>\n<li>后代选择器 空格分隔</li>\n<li>子选择符(E&gt;F) 选择所有作为 E 元素的子元素 F</li>\n<li>相邻兄弟选择器（E+F）选择紧贴在 E 元素之后 F 元素</li>\n<li>兄弟选择符(E~F) 选择 E 元素后面的所有兄弟元素 F</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes\" rel=\"nofollow\">伪类</a> E:hover、 E:active、 E:focus、E:not()、 E:first-child、 E:last-child、 E:nth-child(n) E:nth-last-child(n)、 E:nth-of-type(n)</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors\" rel=\"nofollow\">属性选择器</a> E[attr]、E[attr=\"val\"]、E[attr$=\"val\"]、E[attr^=\"val\"]、E[attr*=\"val\"] 、E[attr|=\"val\"]</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements\" rel=\"nofollow\">伪元素</a> E::first-line、E::letter、 E::before、 E::aftet、E:selection</li>\n</ul>\n</li>\n<li>CSS 选择权权重优先级</li>\n</ul>\n<pre><code>最高级： !important\n第一等： 代表内联样式，如: style=\"xxx\"，权值为1000\n第二等： 代表ID选择器，如：#content，权值为100\n第三等： 代表类，伪类和属性选择器，如.content，:hover，[type=\"radio\"]，权值为10\n第四等： 代表元素选择器和伪元素选择器，如div，::before，权值为1\n\n注意：通配选择符（*）关系选择符（+, &gt;, ~, ' ', ||）和 否定伪类（:not()）对优先级没有影响。\n（但是，在 :not() 内部声明的选择器会影响优先级）。\n</code></pre>\n<ul>\n<li>水平居中垂直居中</li>\n</ul>\n<pre><code>- position + `transform:translate(-50%,-50%)`\n- flex\n- table\n</code></pre>\n<ul>\n<li>postion 的各个属性值是分别相对于什么定位?</li>\n</ul>\n<pre><code>static：静态定位\nposition的默认值，元素框正常生成，也就是没有定位时的正常显示\n\nrelative: 相对定位:\n 用法一：自身定位，元素相对自身的原位置偏移某个距离，但是原本的空间依旧保留，表现为空白。\n 用法二：子元素定位：设置后可以使该元素的子元素相对该元素绝对定位。\n\nabsolute：绝对定位\n用法：元素从文档流删除，并相对于包含块定位。元素在原本的空间关闭。元素定位后转化为块级元素。\n定位参照：它会从父类开始一层一层向上找起，寻找position值不是static的祖先元素，直到html根标签为止。\n\nfixed：固定定位\n用法一：自身定位：元素从文档流删除，并相对于浏览器视窗定位，因此不随文档滚动而移动\n用法二：子元素定位，设置后可以使该元素的子元素相对该元素绝对定位。\n</code></pre>\n<ul>\n<li>块元素，行内元素以及行内块的不同点</li>\n</ul>\n<pre><code>块状元素特征：  (1)能够识别宽高,宽度默认是它容器的100%，除非设定一个宽度\n　　　　　　　  (2)margin和padding的上下左右均对其有效\n　　　　　　　  (3)可以自动换行\n　　　　　　　  (4)默认排列方式为从上至下\n              (5)可以容纳内联元素和其他块元素\n\n行内元素特征：  (1)设置宽高无效,大小由其内含的内容决定\n　　　　　　　  (2)对margin仅设置水平方向有效，垂直方向无效；padding设置上下左右都有效，即会撑大空间\n              (3)不会自动进行换行,和其他元素都在同一行\n              (4)默认排列方式为从左到右\n              (5)只能容纳文本或者其他内联元素。\n\n行内块状元素特征：(1)能够识别宽高\n               (2)margin和padding的上下左右均对其有效\n　　　　　　　　　(3)不自动换行\n　　　　　　　　　(4)默认排列方式为从左到右\n</code></pre>\n<ul>\n<li>em，rem 具体是如何计算的？</li>\n<li>重绘与回流</li>\n<li>flex 布局怎么使用？ flex = 1 暗含的三个属性</li>\n</ul>\n<pre><code>flex flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto,后两个属性可选；\nflex-grow放大比例，默认0， flex-shrink缩小比例，默认为1\n</code></pre>\n<ul>\n<li>媒体查询可以吗?视口需要做什么?</li>\n<li>响应式布局\n<ul>\n<li><a href=\"https://github.com/yanyue404/blog/issues/39\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/39/hovercard\"># 39 rem 适配移动设备</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/40\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/40/hovercard\">#40 Css3 动画 </a>\n<ul>\n<li>animation：animation-name， animation-duration，animation-iteration-count， animation-delay， animation-timing-function:</li>\n<li><code>@keyframes slidein {from { transform: scaleX(0); }to { transform:scaleX(1); }}</code></li>\n<li>transition:过渡（帧动画）\n<ul>\n<li><code>transition:width 1s linear 2s;;</code></li>\n</ul>\n</li>\n<li>transform:2D 转换 3D 转换\n<ul>\n<li>位移：translate(x,y)</li>\n<li>旋转：rotate(30deg) | (角度设置正值(顺时针),负值(逆时针))</li>\n<li>缩放： scale(倍数) | 整数(大于 1)放大 小数(小于 1)缩小</li>\n<li>倾斜：skew(30deg,45deg) 第一个值垂直方向倾斜,第二个方向代表水平倾斜</li>\n<li>旋转原点：transform-origin</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>html5 有哪些新特性\n<ul>\n<li>语义化标签</li>\n<li>表单元素</li>\n<li>音频视频</li>\n<li>地理定位，在线离线状态</li>\n<li>canvas， WebGL，SVG</li>\n<li>data-name</li>\n<li>XMLHttpRequest Level 2</li>\n<li>History API</li>\n<li>Camera API</li>\n<li>拖放</li>\n<li>存储</li>\n<li>Web Sockets</li>\n<li>离线存储</li>\n<li>requestAnimationFrame</li>\n</ul>\n</li>\n</ul>\n<h2>Javascript</h2>\n<ul>\n<li>数据类型及其检测 关键词 【typeof ，instanceof ，Object.prototype.toString 】</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>基本类型有六种： null，undefined，boolean，number，string，symbol。\n对象（Object）\n\ntypeof 对于基本类型，除了 null 都可以显示正确的类型，对于对象，除了函数都会显示 object。\ntypeof 1 <span class=\"pl-c\"><span class=\"pl-c\">#</span> 'number'</span>\n\ninstanceof 运算符只能用于对象，不适用原始类型的值，基于原型链查找比较。\n[] instanceof Object<span class=\"pl-k\">;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> true </span>\n[] instanceof Array<span class=\"pl-k\">;</span>   <span class=\"pl-c\"><span class=\"pl-c\">#</span> true</span>\n[] instanceof Object<span class=\"pl-k\">;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> true</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello<span class=\"pl-pds\">'</span></span> instanceof String <span class=\"pl-c\"><span class=\"pl-c\">#</span> false</span>\n\n<span class=\"pl-en\">Object.prototype.toString.call</span>() 通用，可以返回toString运行时this指向的具体对象类型\nObject.prototype.toString.call(true) <span class=\"pl-k\">;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> [object Boolean]</span>\n</pre></div>\n<ul>\n<li><a href=\"https://github.com/yanyue404/blog/issues/73\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/73/hovercard\">#73 理解 JS 中的闭包</a></li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/30\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/30/hovercard\"># 30 我所知道的 JavaScript 中的 Event Loop</a> 关键词 【 单线程，任务队列，宏任务，微任务】</li>\n<li>new 一个对象的过程发生了什么</li>\n</ul>\n<pre><code>生成一个新对象\n获得构造函数，链接到原型\n绑定this\n返回新对象\n</code></pre>\n<ul>\n<li>ES6 中的箭头函数</li>\n<li>原型链</li>\n<li>数组的构造函数上提供了什么方法？不是说原型上有什么方法</li>\n<li>ES6 的类和 ES5 的构造函数有什么区别？</li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/74\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/74/hovercard\">#74 节流与防抖如何区分？</a> 关键词 【闭包应用实践】</li>\n<li>obj 插入 html 中，贪婪，反贪婪</li>\n<li>amd 和 commonjs</li>\n<li>如何处理并发请求操作一起展示结果?</li>\n<li>promise 如何使用?</li>\n<li>Object.definepropty 如何使用?</li>\n</ul>\n<h2>浏览器和网络</h2>\n<ul>\n<li><a href=\"https://github.com/yanyue404/blog/issues/8\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/8/hovercard\">#8 跨域请求数据</a>，关键词 【JSONP，CORS，反向代理】</li>\n<li><a href=\"https://github.com/yanyue404/blog/issues/43\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yanyue404/blog/issues/43/hovercard\">#43 IE 兼容性</a></li>\n<li>网站从浏览器输入 url 到渲染完毕的过程\n<ul>\n<li><a href=\"http://www.dailichun.com/2018/03/12/whenyouenteraurl.html\" rel=\"nofollow\">参考</a></li>\n</ul>\n</li>\n<li>http 协议(一些原理、报文、缓存方案)</li>\n</ul>\n<h2>功能实践思路</h2>\n<ul>\n<li>轮播图</li>\n<li>上拉加载，下拉加载</li>\n<li>分页</li>\n<li>实现一个进度条加载，从 0 到 100</li>\n</ul>\n<h2>手写</h2>\n<ul>\n<li>两栏三栏自适应布局</li>\n<li>写一个检测数据类型的方法</li>\n<li>深拷贝</li>\n<li>快速排序</li>\n<li>手写 es5 继承</li>\n<li>函数节流与函数防抖</li>\n<li>bind 函数</li>\n<li>手写一个设计模式</li>\n<li>手写 vue 或 react 组件</li>\n</ul>\n<h2>其他</h2>\n<p>不归类于基础，但下面的方向也要思考总结。</p>\n<h3>框架和类库</h3>\n<ul>\n<li>延迟加载组件是怎么做得?</li>\n</ul>\n<h3>前端工程</h3>\n<ul>\n<li>webpack 的配置开发和线上做了什么?</li>\n<li>工程化项目如何做性能优化?</li>\n<li>ES6 怎么编译成 ES5,css-loader 原理,过程\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/27289600\" rel=\"nofollow\">Babel 是如何读懂 JS 代码的</a> / <a href=\"https://github.com/starkwang/the-super-tiny-compiler-cn/blob/master/super-tiny-compiler-chinese.js\">the-super-tiny-compiler-cn</a></li>\n</ul>\n</li>\n<li>怎么用数据流管理应用</li>\n<li>前端安全的认识\n<ul>\n<li>XSS</li>\n<li>CSRF</li>\n</ul>\n</li>\n<li>node 中间件</li>\n</ul>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://github.com/sunyongjian/blog/issues/32\" data-hovercard-type=\"issue\" data-hovercard-url=\"/sunyongjian/blog/issues/32/hovercard\">2017-08 面试总结（at,dm）- sunyongjian </a></li>\n<li><a href=\"https://github.com/sunyongjian/blog/issues/24\" data-hovercard-type=\"issue\" data-hovercard-url=\"/sunyongjian/blog/issues/24/hovercard\">面试问别人的一些问题 - sunyongjian </a></li>\n<li><a href=\"https://github.com/sunyongjian/blog/issues/41\" data-hovercard-type=\"issue\" data-hovercard-url=\"/sunyongjian/blog/issues/41/hovercard\">2019-03 面试总结（alicloud, tikTok, ke, ks）- sunyongjian </a></li>\n<li><a href=\"https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/README.md\">front-end-interview-handbook</a></li>\n<li><a href=\"https://github.com/InterviewMap/CS-Interview-Knowledge-Map\">CS-Interview-Knowledge-Map</a></li>\n</ul>"
  },
  {
    "id": 3,
    "title": "开发环境的搭建",
    "labels": "开发者笔记",
    "created_at": "2018-02-26T07:56:20Z",
    "updated_at": "2019-10-14T16:24:13Z",
    "body_html": "<h2>软件配置</h2>\n<h3>生产必备</h3>\n<ul>\n<li>Tim &amp; Wechat</li>\n<li><a href=\"https://gitforwindows.org/\" rel=\"nofollow\">git bash</a></li>\n<li><a href=\"https://github.com/tonsky/FiraCode\">FiraCode</a> Vscode 设置使用的字体</li>\n<li><a href=\"https://note.youdao.com/\" rel=\"nofollow\">有道云笔记</a></li>\n<li><a href=\"https://mail.163.com/dashi/\" rel=\"nofollow\">网易邮箱大师</a></li>\n<li><a href=\"https://www.navicat.com.cn/products/navicat-premium\" rel=\"nofollow\">Navicat Premium</a> - 数据库合集开发工具</li>\n<li>包管理\n<ul>\n<li><a href=\"https://yarnpkg.com/zh-Hant/\" rel=\"nofollow\">yarn</a></li>\n<li><a href=\"http://nodejs.cn/download/\" rel=\"nofollow\">npm</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/Maximus5/ConEmu/\">ConEmu</a> - windows 使用的 Terminal 终端,我用这个</li>\n<li><a href=\"https://www.listary.com/\" rel=\"nofollow\">Listary</a> - 快速检索文件</li>\n<li><a href=\"https://pooi.moe/QuickLook/\" rel=\"nofollow\">QuickLook</a> - 文件预览</li>\n</ul>\n<h3>其他</h3>\n<ul>\n<li><a href=\"https://www.screentogif.com/\" rel=\"nofollow\">ScreenToGif</a> - gif 动画录制</li>\n<li><a href=\"https://zh.snipaste.com/\" rel=\"nofollow\">Snipaste</a> - 截图+切图</li>\n<li><a href=\"https://www.telerik.com/fiddler\" rel=\"nofollow\">Fiddler</a> - 调试网络，线上测试修改</li>\n<li><a href=\"https://www.getpostman.com/\" rel=\"nofollow\">Postman</a> - api 请求，通过 chrome apps 使用</li>\n<li><a href=\"https://github.com/jgm/pandoc\">Pandoc</a> - 强大的文档格式转换，用作处理 Resume</li>\n<li><a href=\"http://ohsoft.net/eng/\" rel=\"nofollow\">oCam</a> - 视频录制</li>\n<li><a href=\"https://github.com/olive-editor/olive\">olive</a> - 视频剪辑</li>\n<li><a href=\"https://arctime.org/\" rel=\"nofollow\">ArcTime</a> - 字幕制作</li>\n<li><a href=\"https://www.xmind.cn/xmind8-pro/\" rel=\"nofollow\">Xmind</a> - 思维导图</li>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\" rel=\"nofollow\">微信开发者工具</a> - 选择稳定版</li>\n<li><a href=\"http://www.vdigger.com/index.html\" rel=\"nofollow\">GetFLV</a> - DOWNLOAD VIDEOS AND MUSIC FROM 200,000+ SITES.</li>\n</ul>\n<h3>待体验</h3>\n<ul>\n<li><a href=\"https://github.com/ggreer/the_silver_searcher\">the_silver_searcher</a> - 代码搜索</li>\n<li><a href=\"https://github.com/Molunerfinn/PicGo\">PicGo</a> - PicGo, 图片上传</li>\n<li><a href=\"https://www.charlesproxy.com/\" rel=\"nofollow\">Charles</a> - 抓包，支持 https</li>\n</ul>\n<h2>CLI</h2>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 查看自己 npm 的配置信息</span>\nnpm list -g --depth 0\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 查看 yarn 全局安装的列表</span>\nyarn global list</pre></div>\n<ul>\n<li><a href=\"https://github.com/facebook/create-react-app\">create-react-app</a> - react 官方脚手架</li>\n<li><a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a> - vue 命令行工具,项目脚手架</li>\n<li><a href=\"https://github.com/webpack/webpack\">webpack</a> - 打包工具，使用 的<code>3.10.0</code>版本，未升级 <code>4.x</code>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server\">webpack-dev-server</a> - Serves a webpack app. Updates the browser on changes</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/hexojs/hexo\">hexo</a> - hexo-cli, blog framework, powered by Node.js\n<ul>\n<li><a href=\"https://github.com/wuchong/jacman\">jacman</a> - <code>jacman</code> 主题，正在使用...</li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">hexo-theme-next</a></li>\n<li><a href=\"https://github.com/yscoder/hexo-theme-indigo\">hexo-theme-indigo</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/vuejs/vuepress\">vuepress</a> - Vue 驱动的静态站点生成器，文档说明</li>\n<li><a href=\"https://github.com/isaacs/rimraf\">rimraf</a> - 删除文件</li>\n<li><a href=\"https://github.com/remy/nodemon/\">nodemon</a> - 监视 node.js 应用程序中的修改，实时更新</li>\n<li><a href=\"https://github.com/Pana/nrm\">nrm</a> - npm 下载源切换</li>\n<li><a href=\"https://github.com/domenic/opener\">opener</a> - 打开某个端口，固定文件</li>\n<li><a href=\"https://github.com/NervJS/taro\">taro</a> - tarojs/cli，多端统一开发框架，用 React 的开发方式编写一次代码</li>\n<li><a href=\"https://github.com/kefranabg/readme-md-generator\">readme-md-generator</a> - 生成 <code>README.md</code> 文档的 cli 工具, <code>readme</code></li>\n<li><a href=\"https://github.com/hilleer/kill-port-process\">kill-port-process</a> - 命令行杀死被占用的端口服务 <code>kill-port 3000</code></li>\n<li><a href=\"https://github.com/tschaub/gh-pages\">gh-pages</a> - 将文件发布到 GitHub 上的 <code>gh-pages</code> 分支</li>\n<li><a href=\"https://github.com/Unitech/pm2\">pm2</a> - node 进程管理工具</li>\n<li><a href=\"https://github.com/eslint/eslint\">eslint</a> - A fully pluggable tool for identifying and reporting on patterns in JavaScript <a href=\"https://eslint.org/docs/rules/\" rel=\"nofollow\">https://eslint.org/docs/rules/</a></li>\n<li><a href=\"https://github.com/prettier/prettier/\">prettier</a> - Prettier is an opinionated code formatter. <a href=\"https://prettier.io\" rel=\"nofollow\">https://prettier.io</a></li>\n</ul>\n<h3>待体验</h3>\n<ul>\n<li><a href=\"https://github.com/visionmedia/debug\">debug</a> - 打印调试信息</li>\n</ul>\n<h2>Chrome 扩展</h2>\n<ul>\n<li>Google Search\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/chrome-sync-helper/gbkepcmpjglfonklehdgjnimebhnmlel\" rel=\"nofollow\">Chrome 同步助手</a> - 实现 Chrome 账号同步和扩展自动更新</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/%E8%B0%B7%E6%AD%8C%E6%9C%8D%E5%8A%A1%E5%8A%A9%E6%89%8B/cgncbhnhlkbdieckbbmeppcefokppagh\" rel=\"nofollow\">谷歌服务助手</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B/gocklaboggjfkolaknpbhddbaopcepfp\" rel=\"nofollow\">谷歌访问助手</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B/nonmafimegllfoonjgplbabhmgfanaka\" rel=\"nofollow\">谷歌上网助手</a></li>\n</ul>\n</li>\n<li>广告拦截\n<ul>\n<li>Adblock Plus</li>\n<li>广告终结者</li>\n</ul>\n</li>\n<li>翻译\n<ul>\n<li>Google 翻译</li>\n<li>划词翻译</li>\n<li>沙拉查词-聚合词典划词翻译</li>\n</ul>\n</li>\n<li>下载\n<ul>\n<li>Image Downloader</li>\n<li>Flash Video Downloader - 超级强大的下载工具</li>\n<li>Video Downloader professional</li>\n<li>YAAW for Chrome</li>\n</ul>\n</li>\n<li>github 相关\n<ul>\n<li>Sourcegraph 查看 代码</li>\n<li>Octotree 查看 代码</li>\n<li><a href=\"https://github.com/OctoLinker/OctoLinker\">OctoLinker</a> 支持代码文件内跳转</li>\n<li>Isometric Contributions</li>\n<li>Insight.io for Github</li>\n<li>GitHub Hovercard</li>\n<li>Awesome Autocomplete for GitHub</li>\n</ul>\n</li>\n<li>辅助开发\n<ul>\n<li>Clear Cache</li>\n<li><a href=\"https://github.com/annnhan/ReRes\">ReRes</a> - Change the response of the request</li>\n<li>ColorZilla - 取色器</li>\n<li>新浪微博图床 - markdown 图片</li>\n<li>Axure RP Extension for Chrome</li>\n<li>ReplaceGoogleCDN</li>\n<li>高效网页截图编辑插件</li>\n<li>有道云笔记插件</li>\n</ul>\n</li>\n<li>devtools\n<ul>\n<li>Vue.js devtools</li>\n<li>Redux DevTools</li>\n<li>React Developer Tools</li>\n</ul>\n</li>\n<li>优化基础环境\n<ul>\n<li>捕捉网页截图 - FireShot</li>\n<li>OneTab</li>\n<li>Holmes 书签搜索</li>\n<li>扩展管理器(Extension Manager)</li>\n<li>JSONView</li>\n<li>Wappalyzer</li>\n<li>PageSpeed Insights</li>\n<li>Open SEO Stats</li>\n</ul>\n</li>\n<li>Tampermonkey\n<ul>\n<li><a href=\"https://github.com/syhyz1990/baiduyun\">baiduyun</a></li>\n<li><a href=\"https://zh.savefrom.net/1-how-to-download-youtube-video.html\" rel=\"nofollow\">SaveFrom.net helper</a> - 速度最快的免费 YouTube 下载器</li>\n</ul>\n</li>\n</ul>\n<h3>应用 apps</h3>\n<ul>\n<li>Postman</li>\n<li>TeamViewer</li>\n</ul>\n<h2>For GFW</h2>\n<ul>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows\">shadowsocks-windows</a>\n<ul>\n<li><a href=\"https://github.com/max2max/freess\">freess</a> - 免费 ss 账号 免费 shadowsocks 账号 免费 v2ray 账号 (长期更新)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/getlantern/download\">lantern</a> - 最新版蓝灯下载</li>\n<li><a href=\"https://github.com/EtherDream/jsproxy\">jsproxy</a> 一个基于浏览器端 JS 实现的在线代理 <a href=\"https://zjcqoo.github.io/\" rel=\"nofollow\">https://zjcqoo.github.io/</a></li>\n<li>未使用\n<ul>\n<li><a href=\"https://vilavpn.com/\" rel=\"nofollow\">Vila</a> - 付费可用，基于 V2ray 技术</li>\n<li><a href=\"https://dlercloud.org/\" rel=\"nofollow\">Dler Cloud</a></li>\n</ul>\n</li>\n</ul>"
  },
  {
    "id": 2,
    "title": "git+Github的正确姿势",
    "labels": "开发者笔记",
    "created_at": "2018-02-26T07:55:22Z",
    "updated_at": "2019-11-14T18:24:08Z",
    "body_html": "<h2>前言</h2>\n<p>此文章是笔者在 github 使用中的一些经验性总结，学习的新姿势会同步更新，记录。</p>\n<h3>学习资料</h3>\n<p><strong>1. 新手推荐</strong></p>\n<ul>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" rel=\"nofollow\">Git 教程-廖雪峰</a></li>\n<li><a href=\"http://www.imooc.com/learn/390\" rel=\"nofollow\">版本控制入门 – 搬进 Github</a></li>\n</ul>\n<p><strong>2. 帮助文档</strong></p>\n<ul>\n<li><a href=\"https://git-scm.com/book/zh/v2\" rel=\"nofollow\">Git --fast-version-control </a></li>\n<li><a href=\"https://help.github.com/\">官方网站</a> / <a href=\"https://github.com/waylau/github-help\">基础中文翻译</a></li>\n<li><a href=\"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md\">Git 飞行规则(Flight Rules)</a></li>\n<li><a href=\"https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md#%E8%B4%A1%E7%8C%AE%E8%80%85%E6%8C%87%E5%8D%97\">GitHub 秘籍</a></li>\n<li><a href=\"https://github.com/gotgit/gotgithub\">GotGitHub: an open source E-book about GitHub in Chinese</a></li>\n<li><a href=\"https://github.com/geeeeeeeeek/git-recipes\">git-recipes</a> - 高质量的 Git 中文教程</li>\n<li><a href=\"https://github.com/phodal/github\">GitHub 漫游指南 by phodal</a></li>\n</ul>\n<h2>一、github markdown 语法介绍</h2>\n<blockquote>\n<p>写好 md 很重要 !!!</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/ruanyf/document-style-guide\">中文技术文档的写作规范 by ruanyifeng</a></li>\n<li><a href=\"https://github.com/guodongxiaren/README\">guodongxiaren/README README 文件语法解读</a></li>\n<li><a href=\"https://github.com/caiyongji/emoji-list\">emoji-list/ github 支持的 emojj 表情</a></li>\n<li><a href=\"https://shields.io/\" rel=\"nofollow\">GitHub 上 README 中的漂亮徽章</a></li>\n</ul>\n<h2>二、保证基本使用</h2>\n<h3>1. 在公司的内网如需要配置代理</h3>\n<p>github 上可以使用 https 进行访问。</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ git config --global http.proxy http://web-proxy.oa.com:8080</pre></div>\n<blockquote>\n<p>但是这样可以 clone 了。但是如果要 push 代码，那就麻烦了。每次都需要输入密码,接着往下看。</p>\n</blockquote>\n<h3>2. 上传前设置<code>.gitignore</code> 过滤</h3>\n<p>案例介绍，如前端 项目中充满数量庞大依赖文件的<code>node_modules</code>，我们不需要上传，靠<code>package.json</code>文件下载依赖包就可以</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-k\">*</span>.DS_Store\nnode_modules <span class=\"pl-c\"><span class=\"pl-c\">#</span> 过滤项目中名为 node_modules 的文件夹，做上传例外操作</span>\nbower_components\n.sass-cache\nnpm-debug.log\n.idea\n.vscode</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> git-忽略版本控制内某些文件的修改</span>\ngit update-index --assume-unchanged application/Everything/Everything.ini</pre></div>\n<h3>3. git commit log</h3>\n<p>优雅的提交 <code>code</code>，为 commit 自己的每次 commit 设置好的日志, 方便日后追溯:</p>\n<ul>\n<li>Head\n<ul>\n<li>type: feat 新特性, fix 修改问题, docs 文档, style 格式, refactor 重构, test 测试用例, chore 其他修改, 比如构建流程, 依赖管理.</li>\n<li>scope:影响范围， 比如: route, component, utils, build... 可省略</li>\n<li>subject:简短的提交信息</li>\n</ul>\n</li>\n<li>Body\n<ul>\n<li>what：详细做了什么</li>\n<li>why： 为什么这样做</li>\n<li>how： 有什么后果</li>\n</ul>\n</li>\n<li>Footer\n<ul>\n<li>相关链接</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>补充：使用 svn 小乌龟提交代码没有强制需要写 commit log , 建议大家都写</p>\n</blockquote>\n<h3>4. git push 免密码</h3>\n<p>每次提交代码时需要输入用户名密码，则说明你在从仓库中 clone 代码时使用的是 HTTPS 的 key 进行拉取代码。而使用 SSH key 拉取代码时，则不需要。</p>\n<p>(1). 创建文件 <code>.git-credentials</code> 存储 GIT 用户名和密码</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 创建</span>\ntouch .git-credentials\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 在vim中打开</span>\nvim .git-credentials\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 文件内容</span>\nhttps://{username}:{password}@github.com</pre></div>\n<p>(2). 长期存储密码,进入 git bash 终端， 输入如下命令:</p>\n<div class=\"highlight highlight-source-shell\"><pre>git config --global credential.helper store</pre></div>\n<p>经过这样操作后就可以<code>免密登录</code>了</p>\n<p><strong>注意事项</strong></p>\n<p>文件结构要与初始化连接 <code>github</code> 的<code>.gitconfig</code>文件在同级别目录下</p>\n<h2>三、项目 github 平台展示</h2>\n<h3>1. <code>gh-pages</code> 分支发布在线访问</h3>\n<p>在自己的 github 项目上添加<code>gh-pages</code>分支，并保证里面有需要展示的代码，以<code>index.html</code>作为入口就 ok，可以展示项目了</p>\n<ul>\n<li>参考：将本项目下的 dist 文件夹内容发布到远端的 <code>gh-pages</code> 分支</li>\n</ul>\n<div class=\"highlight highlight-source-shell\"><pre>git subtree push --prefix=dist origin gh-pages</pre></div>\n<h4>栗子</h4>\n<ul>\n<li><a href=\"https://github.com/xiaoyueyue165/vip\">项目 vip</a> <a href=\"https://xiaoyueyue165.github.io/vip/%E5%94%AF%E5%93%81%E4%BC%9A%E9%A6%96%E9%A1%B5/\" rel=\"nofollow\">在线访问</a></li>\n<li><a href=\"https://github.com/xiaoyueyue165/react-yanxuan\">项目 react-yanxuan</a> <a href=\"https://xiaoyueyue.org/react-yanxuan/\" rel=\"nofollow\">在线访问</a></li>\n</ul>\n<h3>2. github 修改项目语言显示</h3>\n<p>在项目根目录添加文件名为<code>.gitattributes</code>的文本文件:</p>\n<div class=\"highlight highlight-source-shell\"><pre>touch .gitattributes</pre></div>\n<p>写入:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">*</span>.<span class=\"pl-smi\">js</span> linguist<span class=\"pl-k\">-</span>language<span class=\"pl-k\">=</span>javascript\n<span class=\"pl-k\">*</span>.<span class=\"pl-smi\">css</span> linguist<span class=\"pl-k\">-</span>language<span class=\"pl-k\">=</span>javascript\n<span class=\"pl-k\">*</span>.<span class=\"pl-smi\">html</span> linguist<span class=\"pl-k\">-</span>language<span class=\"pl-k\">=</span>javascript</pre></div>\n<p>意思就是将<code>.js</code>、<code>.css</code>、<code>.html</code>当作 <strong>javascript</strong> 语言来统计,简单有效</p>\n<blockquote>\n<p>查看案例，将展示的语言变为<code>javascript</code>=&gt; <a href=\"https://github.com/xiaoyueyue165/King-of-glory\">King-of-glory</a></p>\n</blockquote>\n<h3>3. 上传文件出错</h3>\n<p>(1). <strong>git 推送出现 \"fatal: The remote end hung up unexpectedly\"</strong></p>\n<p>原因：上传的文件过大,单个文件均小于 <code>100M</code><br>\n解决办法：在项目.<code>git</code>文件夹下寻找<code>config</code>文件，添加如下代码：</p>\n<div class=\"highlight highlight-source-shell\"><pre>[http]\npostBuffer = 524288000</pre></div>\n<p>(2). 用于上传单个文件大于 100M 失败时使用</p>\n<ul>\n<li><a href=\"https://github.com/git-lfs/git-lfs\">git-lfs</a></li>\n</ul>\n<h3>4. rebase 命令修改 commit 提交历史</h3>\n<p>合并最近提交的历史，将 <code>ba4358d</code>到 <code>a549037</code> 变为一个 commit</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 输入</span>\ngit log --online\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 输出</span>\nba4358d (HEAD -<span class=\"pl-k\">&gt;</span> master, origin/master, origin/HEAD) docs: 重\nba4358d Update README.md\nba4358d Update README.md <span class=\"pl-c\"><span class=\"pl-c\">#</span> 此条目以上合并为一条</span>\n36f95d9 docs\n0312afb init</pre></div>\n<p>准备合并</p>\n<div class=\"highlight highlight-source-shell\"><pre>git rebase -i 36f95d9 <span class=\"pl-k\">|</span> git rebase -i HEAD~3</pre></div>\n<p>选择合并</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 输出</span>\n\npick ba4358d   <span class=\"pl-s\"><span class=\"pl-pds\">'</span>注释**********<span class=\"pl-pds\">'</span></span>\n\npick ba4358d   <span class=\"pl-s\"><span class=\"pl-pds\">'</span>注释*********<span class=\"pl-pds\">'</span></span>\n\npick ba4358d   <span class=\"pl-s\"><span class=\"pl-pds\">'</span>注释**********<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> pick 的意思是要会执行这个 commit</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> squash 的意思是这个 commit 会被合并到前一个commit (省略写法 s)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 在 vim 命令下输入 i 进入编辑模式，编辑完成后 :eq 保存退出</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 输入</span>\n\npick 3ca6ec3   <span class=\"pl-s\"><span class=\"pl-pds\">'</span>注释**********<span class=\"pl-pds\">'</span></span>\n\ns 1b40566   <span class=\"pl-s\"><span class=\"pl-pds\">'</span>注释*********<span class=\"pl-pds\">'</span></span>\n\ns 53f244a   <span class=\"pl-s\"><span class=\"pl-pds\">'</span>注释**********<span class=\"pl-pds\">'</span></span></pre></div>\n<p>保存完成后，你有两个选择</p>\n<div class=\"highlight highlight-source-shell\"><pre>git rebase --continue  <span class=\"pl-c\"><span class=\"pl-c\">#</span>  确认 rebase</span>\ngit rebase --abort     <span class=\"pl-c\"><span class=\"pl-c\">#</span> 取消 rebase</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>确认后，就可以上传到远程了。</span></pre></div>\n<p>如果没有冲突，或者冲突已经解决，则会出现如下的编辑窗口, 输入<code>:wq</code> 保存并推出:</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> This is a combination of 4 commits.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>The first commit’s message is:</span>\n注释......\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> The 2nd commit’s message is:</span>\n注释......\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> The 3rd commit’s message is:</span>\n注释......\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Please enter the commit message for your changes. Lines starting # with ‘#’ will be ignored, and an empty message aborts the commit.</span></pre></div>\n<p>查看历史，已经改变</p>\n<div class=\"highlight highlight-source-shell\"><pre>git log --oneline\nd2d71a5 (HEAD -<span class=\"pl-k\">&gt;</span> master) Update README.md\n36f95d9 docs\n0312afb init</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre>git push -f  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 强制覆盖远程</span></pre></div>\n<h3>5.修改最新的 git commit 注释</h3>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 添加新的注释</span>\ngit commit --amend -m <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>新的注释<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 推送至远程</span>\ngit push -f</pre></div>\n<h3>5. github 创建远程分支时，容易引起同步往自己的项目上提交 <code>PR</code>，如何避免？</h3>\n<h2>四、github 团队组织</h2>\n<ul>\n<li><a href=\"https://github.com/google\">google</a></li>\n<li><a href=\"https://github.com/facebook\">facebook</a></li>\n<li><a href=\"https://github.com/apache\">apache</a></li>\n<li><a href=\"https://github.com/microsoft\">microsoft</a></li>\n<li><a href=\"https://github.com/mozilla\">mozilla</a></li>\n<li><a href=\"https://github.com/codrops\">codrops</a></li>\n<li><a href=\"https://github.com/twitter\">twitter</a></li>\n<li><a href=\"https://github.com/square\">square</a></li>\n<li><a href=\"https://github.com/googlesamples\">googlesamples</a></li>\n<li><a href=\"https://github.com/Netflix\">Netflix</a></li>\n<li><a href=\"https://github.com/github\">github</a></li>\n<li><a href=\"https://github.com/airbnb\">airbnb</a></li>\n</ul>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/34223150\" rel=\"nofollow\">优雅的提交你的 Git Commit Message</a></li>\n<li><a href=\"https://www.oschina.net/news/69705/git-commit-message-and-changelog-guide\" rel=\"nofollow\">Git 提交的正确姿势：Commit message 编写指南</a></li>\n<li><a href=\"https://www.cnblogs.com/MuYunyun/p/6082359.html\" rel=\"nofollow\">如何用 Github 的 gh-pages 分支展示自己的项目</a></li>\n<li><a href=\"https://www.jianshu.com/p/964de879904a\" rel=\"nofollow\">「Git」合并多个 Commit</a></li>\n<li><a href=\"https://learnku.com/articles/9377/git-log-is-not-very-good-lets-merge-commit\" rel=\"nofollow\">Git log 不太好看，我们来合并 commit 吧</a></li>\n<li><a href=\"https://github.com/niezhiyang/open_source_team\">国内github团队的开源地址</a></li>\n</ul>"
  },
  {
    "id": 1,
    "title": "git入门与实践",
    "labels": "开发者笔记",
    "created_at": "2018-02-26T07:53:52Z",
    "updated_at": "2019-11-01T09:37:05Z",
    "body_html": "<h1>git 入门与实践</h1>\n<h6>推荐</h6>\n<ul>\n<li><a href=\"https://backlog.com/git-tutorial/cn/\" rel=\"nofollow\">猴子都能懂的GIT入门</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2\" rel=\"nofollow\">Git --everything-is-loca 官方文档</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" rel=\"nofollow\">Git 教程-廖雪峰</a></li>\n</ul>\n<p>git 客户端有图形化（小乌龟 ），有命令行（git bash）等...</p>\n<h2>基本配置</h2>\n<h3>配置用户名和邮箱:</h3>\n<div class=\"highlight highlight-source-shell\"><pre>git config --global user.name <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>自己的名字<span class=\"pl-pds\">\"</span></span>  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 用户名</span>\ngit config --global user.email <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>自己的邮箱<span class=\"pl-pds\">\"</span></span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> 邮箱</span>\ngit config --list</pre></div>\n<blockquote>\n<p>补充，其实是保存了用户名和邮箱到 C:\\Users[用户名].gitconfig 文件中</p>\n</blockquote>\n<h3>公用的电脑来备份(github)(远端仓库)</h3>\n<p>github 本身是个网站,但是这个网站所在的电脑可以做为公用的电脑来备份代码!</p>\n<ol>\n<li>注册 github 账号，并登陆</li>\n<li>先使用 git bash 窗口，输入</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>ssh-keygen -t rsa <span class=\"pl-k\">||</span> ssh-keygen</pre></div>\n<blockquote>\n<p>这个命令就会生成一个标识,我们需要把这个标识上传到服务器会在 【/c/Users/[用户名]/.ssh】目录中生成两个文件:【id_rsa, id_rsa.pub】, 我们用编辑器打开 id_rsa.pub,复制内容并关闭</p>\n</blockquote>\n<p>3.在 github 网站上,把复制的密钥,添加到 github 上去!</p>\n<p>4.测试 <code>$ ssh -T git@github.com</code></p>\n<blockquote>\n<p>如果能看到类似于**Hi XXXX! You've successfully authenticated, but GitHub does not provide shell access.**这样的提示，则表示 ssh key 配置成功！</p>\n</blockquote>\n<h2>Git 工作区、暂存区和版本库</h2>\n<p>我们先来理解下 Git 工作区、暂存区和版本库概念</p>\n<ul>\n<li>工作区：就是你在电脑里能看到的目录。</li>\n<li>暂存区：英文叫 stage, 或 index。一般存放在\"git 目录\"下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>\n<li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是 Git 的版本库。</li>\n</ul>\n<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/5da44aa168384787dd9e49fc699c514e8797c9e1/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673866303968733031396a32306a65303933646a6c2e6a7067\"><img src=\"https://camo.githubusercontent.com/5da44aa168384787dd9e49fc699c514e8797c9e1/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c7931673866303968733031396a32306a65303933646a6c2e6a7067\" alt=\"201609291519223166.png\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g8f09hs019j20je093djl.jpg\" style=\"max-width:100%;\"></a></p>\n<h2>工作流</h2>\n<ol>\n<li>在项目根目录下创建<code>.git</code>文件，暂存区和版本库的代码都在此文件夹下</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>git init</pre></div>\n<ol start=\"2\">\n<li>添加文件到暂存区</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>git add A4.txt //添加单一文件\ngit add -A    //把自上一次git commit后，修改过的文件全部添加到暂存区</pre></div>\n<ol start=\"3\">\n<li>放到仓库</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>git commit -m <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>注释<span class=\"pl-pds\">\"</span></span> // 是把暂存区的代码，放到仓库</pre></div>\n<ol start=\"4\">\n<li>git 上传代码到远端分支</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>git push git@github.com:yanyue404/fed02.git master</pre></div>\n<h5>简化命令</h5>\n<div class=\"highlight highlight-source-shell\"><pre>git remote add origin git@github.com:yanyue404/fed02.git\ngit push origin master</pre></div>\n<blockquote>\n<p>// 这个 origin 随便起, 就相当于设置<code>var origin = \"git@github.com:yanyue404/fed02.git\"</code>,将本地的 master 分支推送到 origin 主机的 master 分支</p>\n</blockquote>\n<ol start=\"5\">\n<li>忽略清单文件(.gitignore)</li>\n</ol>\n<p>在项目根目录，新建一个名为 .gitignore 的文件 。假如，我们希望 test 文件中的内容不被备份, 就在.gitignore 文件中添加一行</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> 忽略项目根目录的test文件夹中的内容</span>\n/test\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 忽略项目中所有名为test的文件夹，或者文件</span>\n<span class=\"pl-c1\">test</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 忽略项目中的名为app.js的文件</span>\napp.js\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 忽略项目中的所有js</span>\n<span class=\"pl-k\">*</span>.js\n/test/<span class=\"pl-k\">*</span>.<span class=\"pl-k\">*</span></pre></div>\n<h3>常用命令:</h3>\n<ul>\n<li><code>git status</code> // 查看有哪些修改后的文件在暂存区，哪些不在</li>\n<li><code>git log</code> //只能看到 head 指向之前的提交记录</li>\n<li><code>git reflog</code> // 查看所有的操作记录</li>\n</ul>\n<h2>版本回退</h2>\n<p>默认 head 指向 master,就会把 master 中的提交的代码拿到工作区</p>\n<ul>\n<li><code>git reset --hard 提交的id</code></li>\n<li><code>git reset --hard 53bd6a3cd5b9ff5782af4837985c1e3023412d23</code></li>\n</ul>\n<p>强制提交:</p>\n<div class=\"highlight highlight-source-shell\"><pre>git push -f</pre></div>\n<blockquote>\n<p>注意，如果是回退到最近的一次提交的状态，不需要添加 commit_id，直接 <code>git reset --hard head</code></p>\n</blockquote>\n<h2>分支</h2>\n<p>默认只有一个 master 分支（主分支），可以创建新的分支，然后在分支中提交代码!，直到这个功能完成了，就可以回到 master 分支，然后合并。</p>\n<div class=\"highlight highlight-source-shell\"><pre>git branch <span class=\"pl-c\"><span class=\"pl-c\">#</span> 查看本地分支</span>\ngit branch -r <span class=\"pl-c\"><span class=\"pl-c\">#</span> 查看所有远程分支</span>\ngit branch -a <span class=\"pl-c\"><span class=\"pl-c\">#</span> 查看所有远程分支和本地分支</span>\n\ngit branch [branch-name]  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 新建一个分支，但依然停留在当前分支</span>\ngit checkout [branch-name]  <span class=\"pl-c\"><span class=\"pl-c\">#</span> 切换到指定分支，并更新工作区</span>\ngit checkout -b [branch-name] <span class=\"pl-c\"><span class=\"pl-c\">#</span>  创建一个分支并切换到该分支中,相当于以上两条命令</span>\n\ngit merge [branch-name] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 合并指定分支到当前分支</span>\n\ngit branch -d [branch-name] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 删除分支</span>\ngit push origin --delete [branch-name] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 删除远程分支</span></pre></div>\n<h2>标签</h2>\n<div class=\"highlight highlight-source-shell\"><pre>git tag <span class=\"pl-c\"><span class=\"pl-c\">#</span> 列出所有tag</span>\ngit tag [tag] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 新建一个tag在当前commit</span>\ngit tag [tag] [commit] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 新建一个tag在指定commit</span>\ngit tag -d [tag] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 删除本地tag</span>\ngit push origin :refs/tags/[tagName] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 删除远程tag</span>\ngit show [tag] <span class=\"pl-c\"><span class=\"pl-c\">#</span>查看tag信息</span>\ngit push [remote] [tag] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 提交指定tag</span></pre></div>\n<h2>远程同步</h2>\n<div class=\"highlight highlight-source-shell\"><pre>git fetch [remote] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 下载远程仓库的所有变动</span>\n\ngit remote -v <span class=\"pl-c\"><span class=\"pl-c\">#</span> 显示所有远程仓库</span>\ngit remote show [remote] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 显示某个远程仓库的信息</span>\ngit remote add [shortname] [url] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 增加一个新的远程仓库，并命名</span>\n\ngit pull [remote] [branch] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 取回远程仓库的变化，并与本地分支合并</span>\n\ngit push [remote] [branch] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 上传本地指定分支到远程仓库</span>\ngit push [remote] --force <span class=\"pl-c\"><span class=\"pl-c\">#</span> 强行推送当前分支到远程仓库，即使有冲突</span>\ngit push [remote] --all <span class=\"pl-c\"><span class=\"pl-c\">#</span> 推送所有分支到远程仓库</span></pre></div>\n<h2>流程(针对于一个项目 project)</h2>\n<div class=\"highlight highlight-source-shell\"><pre>git init <span class=\"pl-c\"><span class=\"pl-c\">#</span> 是第一次建立版本库</span>\ngit clone [url] <span class=\"pl-c\"><span class=\"pl-c\">#</span> 下载一个项目和它的整个代码历史</span>\n\ngit pull origin master    <span class=\"pl-c\"><span class=\"pl-c\">#</span> 从远程获取最新版本并merge到本地等同于</span>\ngit checkout -b dev       <span class=\"pl-c\"><span class=\"pl-c\">#</span> 这里在新分支上开发，考虑实际是否需要</span>\ngit add -A, git commit -m <span class=\"pl-c\"><span class=\"pl-c\">#</span> 一样是这两个命令功能完成之后回到 master 分支</span>\ngit checkout master\ngit merge dev\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 删除本地 dev分支和远程的dev分支</span>\ngit branch -d dev\ngit push origin --delete dev</pre></div>\n<h2>git 常用命令速查表</h2>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/0292788da54eb2ebfcdc0107011690a1d4e7d66b/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316738657a7377687036776a32316c6f3134716771752e6a7067\"><img src=\"https://camo.githubusercontent.com/0292788da54eb2ebfcdc0107011690a1d4e7d66b/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f64663535316561356c79316738657a7377687036776a32316c6f3134716771752e6a7067\" alt=\"1486348362884912.jpg\" data-canonical-src=\"http://ww1.sinaimg.cn/large/df551ea5ly1g8ezswhp6wj21lo14qgqu.jpg\" style=\"max-width:100%;\"></a></p>\n<h4>参考链接</h4>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" rel=\"nofollow\">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></li>\n<li><a href=\"https://juejin.im/post/5844507761ff4b006c3359a9\" rel=\"nofollow\">Git workflow 详谈</a></li>\n</ul>"
  }
]
